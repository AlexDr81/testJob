
testJob.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800890c  0800890c  0001890c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a08  08008a08  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008a08  08008a08  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a08  08008a08  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a08  08008a08  00018a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a0c  08008a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d8  200001e4  08008bf4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013bc  08008bf4  000213bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001615b  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000323f  00000000  00000000  00036368  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d90  00000000  00000000  000395a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  0003a338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000175a7  00000000  00000000  0003af70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e209  00000000  00000000  00052517  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000709df  00000000  00000000  00060720  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d10ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d98  00000000  00000000  000d117c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080088f4 	.word	0x080088f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080088f4 	.word	0x080088f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b68:	f1a2 0201 	sub.w	r2, r2, #1
 8000b6c:	d1ed      	bne.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_fmul>:
 8000cc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ccc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd6:	ea92 0f0c 	teqne	r2, ip
 8000cda:	ea93 0f0c 	teqne	r3, ip
 8000cde:	d06f      	beq.n	8000dc0 <__aeabi_fmul+0xf8>
 8000ce0:	441a      	add	r2, r3
 8000ce2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce6:	0240      	lsls	r0, r0, #9
 8000ce8:	bf18      	it	ne
 8000cea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cee:	d01e      	beq.n	8000d2e <__aeabi_fmul+0x66>
 8000cf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cf4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000d00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d08:	bf3e      	ittt	cc
 8000d0a:	0049      	lslcc	r1, r1, #1
 8000d0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d10:	005b      	lslcc	r3, r3, #1
 8000d12:	ea40 0001 	orr.w	r0, r0, r1
 8000d16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d1a:	2afd      	cmp	r2, #253	; 0xfd
 8000d1c:	d81d      	bhi.n	8000d5a <__aeabi_fmul+0x92>
 8000d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d26:	bf08      	it	eq
 8000d28:	f020 0001 	biceq.w	r0, r0, #1
 8000d2c:	4770      	bx	lr
 8000d2e:	f090 0f00 	teq	r0, #0
 8000d32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d36:	bf08      	it	eq
 8000d38:	0249      	lsleq	r1, r1, #9
 8000d3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d42:	3a7f      	subs	r2, #127	; 0x7f
 8000d44:	bfc2      	ittt	gt
 8000d46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4e:	4770      	bxgt	lr
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	3a01      	subs	r2, #1
 8000d5a:	dc5d      	bgt.n	8000e18 <__aeabi_fmul+0x150>
 8000d5c:	f112 0f19 	cmn.w	r2, #25
 8000d60:	bfdc      	itt	le
 8000d62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d66:	4770      	bxle	lr
 8000d68:	f1c2 0200 	rsb	r2, r2, #0
 8000d6c:	0041      	lsls	r1, r0, #1
 8000d6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d72:	f1c2 0220 	rsb	r2, r2, #32
 8000d76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d7e:	f140 0000 	adc.w	r0, r0, #0
 8000d82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d86:	bf08      	it	eq
 8000d88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8c:	4770      	bx	lr
 8000d8e:	f092 0f00 	teq	r2, #0
 8000d92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0040      	lsleq	r0, r0, #1
 8000d9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9e:	3a01      	subeq	r2, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fmul+0xce>
 8000da2:	ea40 000c 	orr.w	r0, r0, ip
 8000da6:	f093 0f00 	teq	r3, #0
 8000daa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0049      	lsleq	r1, r1, #1
 8000db2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db6:	3b01      	subeq	r3, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fmul+0xe6>
 8000dba:	ea41 010c 	orr.w	r1, r1, ip
 8000dbe:	e78f      	b.n	8000ce0 <__aeabi_fmul+0x18>
 8000dc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc4:	ea92 0f0c 	teq	r2, ip
 8000dc8:	bf18      	it	ne
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d00a      	beq.n	8000de6 <__aeabi_fmul+0x11e>
 8000dd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd4:	bf18      	it	ne
 8000dd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	d1d8      	bne.n	8000d8e <__aeabi_fmul+0xc6>
 8000ddc:	ea80 0001 	eor.w	r0, r0, r1
 8000de0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	bf17      	itett	ne
 8000dec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000df0:	4608      	moveq	r0, r1
 8000df2:	f091 0f00 	teqne	r1, #0
 8000df6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dfa:	d014      	beq.n	8000e26 <__aeabi_fmul+0x15e>
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d101      	bne.n	8000e06 <__aeabi_fmul+0x13e>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	d10f      	bne.n	8000e26 <__aeabi_fmul+0x15e>
 8000e06:	ea93 0f0c 	teq	r3, ip
 8000e0a:	d103      	bne.n	8000e14 <__aeabi_fmul+0x14c>
 8000e0c:	024b      	lsls	r3, r1, #9
 8000e0e:	bf18      	it	ne
 8000e10:	4608      	movne	r0, r1
 8000e12:	d108      	bne.n	8000e26 <__aeabi_fmul+0x15e>
 8000e14:	ea80 0001 	eor.w	r0, r0, r1
 8000e18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	4770      	bx	lr
 8000e26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e2e:	4770      	bx	lr

08000e30 <__aeabi_fdiv>:
 8000e30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e38:	bf1e      	ittt	ne
 8000e3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3e:	ea92 0f0c 	teqne	r2, ip
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d069      	beq.n	8000f1c <__aeabi_fdiv+0xec>
 8000e48:	eba2 0203 	sub.w	r2, r2, r3
 8000e4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e50:	0249      	lsls	r1, r1, #9
 8000e52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e56:	d037      	beq.n	8000ec8 <__aeabi_fdiv+0x98>
 8000e58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	bf38      	it	cc
 8000e6c:	005b      	lslcc	r3, r3, #1
 8000e6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e76:	428b      	cmp	r3, r1
 8000e78:	bf24      	itt	cs
 8000e7a:	1a5b      	subcs	r3, r3, r1
 8000e7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e84:	bf24      	itt	cs
 8000e86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e92:	bf24      	itt	cs
 8000e94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ea6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	bf18      	it	ne
 8000eae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eb2:	d1e0      	bne.n	8000e76 <__aeabi_fdiv+0x46>
 8000eb4:	2afd      	cmp	r2, #253	; 0xfd
 8000eb6:	f63f af50 	bhi.w	8000d5a <__aeabi_fmul+0x92>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec0:	bf08      	it	eq
 8000ec2:	f020 0001 	biceq.w	r0, r0, #1
 8000ec6:	4770      	bx	lr
 8000ec8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ecc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed0:	327f      	adds	r2, #127	; 0x7f
 8000ed2:	bfc2      	ittt	gt
 8000ed4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000edc:	4770      	bxgt	lr
 8000ede:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee2:	f04f 0300 	mov.w	r3, #0
 8000ee6:	3a01      	subs	r2, #1
 8000ee8:	e737      	b.n	8000d5a <__aeabi_fmul+0x92>
 8000eea:	f092 0f00 	teq	r2, #0
 8000eee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0040      	lsleq	r0, r0, #1
 8000ef6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000efa:	3a01      	subeq	r2, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fdiv+0xc2>
 8000efe:	ea40 000c 	orr.w	r0, r0, ip
 8000f02:	f093 0f00 	teq	r3, #0
 8000f06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0049      	lsleq	r1, r1, #1
 8000f0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f12:	3b01      	subeq	r3, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fdiv+0xda>
 8000f16:	ea41 010c 	orr.w	r1, r1, ip
 8000f1a:	e795      	b.n	8000e48 <__aeabi_fdiv+0x18>
 8000f1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f20:	ea92 0f0c 	teq	r2, ip
 8000f24:	d108      	bne.n	8000f38 <__aeabi_fdiv+0x108>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	f47f af7d 	bne.w	8000e26 <__aeabi_fmul+0x15e>
 8000f2c:	ea93 0f0c 	teq	r3, ip
 8000f30:	f47f af70 	bne.w	8000e14 <__aeabi_fmul+0x14c>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e776      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	d104      	bne.n	8000f48 <__aeabi_fdiv+0x118>
 8000f3e:	024b      	lsls	r3, r1, #9
 8000f40:	f43f af4c 	beq.w	8000ddc <__aeabi_fmul+0x114>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e76e      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f4c:	bf18      	it	ne
 8000f4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f52:	d1ca      	bne.n	8000eea <__aeabi_fdiv+0xba>
 8000f54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f58:	f47f af5c 	bne.w	8000e14 <__aeabi_fmul+0x14c>
 8000f5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f60:	f47f af3c 	bne.w	8000ddc <__aeabi_fmul+0x114>
 8000f64:	e75f      	b.n	8000e26 <__aeabi_fmul+0x15e>
 8000f66:	bf00      	nop

08000f68 <__gesf2>:
 8000f68:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f6c:	e006      	b.n	8000f7c <__cmpsf2+0x4>
 8000f6e:	bf00      	nop

08000f70 <__lesf2>:
 8000f70:	f04f 0c01 	mov.w	ip, #1
 8000f74:	e002      	b.n	8000f7c <__cmpsf2+0x4>
 8000f76:	bf00      	nop

08000f78 <__cmpsf2>:
 8000f78:	f04f 0c01 	mov.w	ip, #1
 8000f7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f8c:	bf18      	it	ne
 8000f8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f92:	d011      	beq.n	8000fb8 <__cmpsf2+0x40>
 8000f94:	b001      	add	sp, #4
 8000f96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f9a:	bf18      	it	ne
 8000f9c:	ea90 0f01 	teqne	r0, r1
 8000fa0:	bf58      	it	pl
 8000fa2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fa6:	bf88      	it	hi
 8000fa8:	17c8      	asrhi	r0, r1, #31
 8000faa:	bf38      	it	cc
 8000fac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fb0:	bf18      	it	ne
 8000fb2:	f040 0001 	orrne.w	r0, r0, #1
 8000fb6:	4770      	bx	lr
 8000fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fbc:	d102      	bne.n	8000fc4 <__cmpsf2+0x4c>
 8000fbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fc2:	d105      	bne.n	8000fd0 <__cmpsf2+0x58>
 8000fc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fc8:	d1e4      	bne.n	8000f94 <__cmpsf2+0x1c>
 8000fca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fce:	d0e1      	beq.n	8000f94 <__cmpsf2+0x1c>
 8000fd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_cfrcmple>:
 8000fd8:	4684      	mov	ip, r0
 8000fda:	4608      	mov	r0, r1
 8000fdc:	4661      	mov	r1, ip
 8000fde:	e7ff      	b.n	8000fe0 <__aeabi_cfcmpeq>

08000fe0 <__aeabi_cfcmpeq>:
 8000fe0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fe2:	f7ff ffc9 	bl	8000f78 <__cmpsf2>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	bf48      	it	mi
 8000fea:	f110 0f00 	cmnmi.w	r0, #0
 8000fee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ff0 <__aeabi_fcmpeq>:
 8000ff0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff4:	f7ff fff4 	bl	8000fe0 <__aeabi_cfcmpeq>
 8000ff8:	bf0c      	ite	eq
 8000ffa:	2001      	moveq	r0, #1
 8000ffc:	2000      	movne	r0, #0
 8000ffe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001002:	bf00      	nop

08001004 <__aeabi_fcmplt>:
 8001004:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001008:	f7ff ffea 	bl	8000fe0 <__aeabi_cfcmpeq>
 800100c:	bf34      	ite	cc
 800100e:	2001      	movcc	r0, #1
 8001010:	2000      	movcs	r0, #0
 8001012:	f85d fb08 	ldr.w	pc, [sp], #8
 8001016:	bf00      	nop

08001018 <__aeabi_fcmple>:
 8001018:	f84d ed08 	str.w	lr, [sp, #-8]!
 800101c:	f7ff ffe0 	bl	8000fe0 <__aeabi_cfcmpeq>
 8001020:	bf94      	ite	ls
 8001022:	2001      	movls	r0, #1
 8001024:	2000      	movhi	r0, #0
 8001026:	f85d fb08 	ldr.w	pc, [sp], #8
 800102a:	bf00      	nop

0800102c <__aeabi_fcmpge>:
 800102c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001030:	f7ff ffd2 	bl	8000fd8 <__aeabi_cfrcmple>
 8001034:	bf94      	ite	ls
 8001036:	2001      	movls	r0, #1
 8001038:	2000      	movhi	r0, #0
 800103a:	f85d fb08 	ldr.w	pc, [sp], #8
 800103e:	bf00      	nop

08001040 <__aeabi_fcmpgt>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff ffc8 	bl	8000fd8 <__aeabi_cfrcmple>
 8001048:	bf34      	ite	cc
 800104a:	2001      	movcc	r0, #1
 800104c:	2000      	movcs	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_fcmpun>:
 8001054:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001058:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800105c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001060:	d102      	bne.n	8001068 <__aeabi_fcmpun+0x14>
 8001062:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001066:	d108      	bne.n	800107a <__aeabi_fcmpun+0x26>
 8001068:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800106c:	d102      	bne.n	8001074 <__aeabi_fcmpun+0x20>
 800106e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001072:	d102      	bne.n	800107a <__aeabi_fcmpun+0x26>
 8001074:	f04f 0000 	mov.w	r0, #0
 8001078:	4770      	bx	lr
 800107a:	f04f 0001 	mov.w	r0, #1
 800107e:	4770      	bx	lr

08001080 <__aeabi_f2iz>:
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001088:	d30f      	bcc.n	80010aa <__aeabi_f2iz+0x2a>
 800108a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001092:	d90d      	bls.n	80010b0 <__aeabi_f2iz+0x30>
 8001094:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800109c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010a0:	fa23 f002 	lsr.w	r0, r3, r2
 80010a4:	bf18      	it	ne
 80010a6:	4240      	negne	r0, r0
 80010a8:	4770      	bx	lr
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	4770      	bx	lr
 80010b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010b4:	d101      	bne.n	80010ba <__aeabi_f2iz+0x3a>
 80010b6:	0242      	lsls	r2, r0, #9
 80010b8:	d105      	bne.n	80010c6 <__aeabi_f2iz+0x46>
 80010ba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010be:	bf08      	it	eq
 80010c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010c4:	4770      	bx	lr
 80010c6:	f04f 0000 	mov.w	r0, #0
 80010ca:	4770      	bx	lr

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b096      	sub	sp, #88	; 0x58
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------USB_MESSAGE_SIZE------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d2:	f000 fec7 	bl	8001e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d6:	f000 f8af 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010da:	f000 f937 	bl	800134c <MX_GPIO_Init>
  MX_I2C1_Init();
 80010de:	f000 f907 	bl	80012f0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80010e2:	f006 f983 	bl	80073ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_HAL_ERRORLED_t ErrLED = {0};
 80010e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
  ErrLED.GPIO_ErrorLedPort = LED_GPIO_Port;
 80010f0:	4b4a      	ldr	r3, [pc, #296]	; (800121c <main+0x150>)
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  ErrLED.GPIO_ErrorLedPin = LED_Pin;
 80010f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  mpu6050_hal_init(&ErrLED, &hi2c1, MPU6050_ACCEL_2G_SCALE, MPU6050_GYRO_250_SCALE);
 80010fc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001100:	4b47      	ldr	r3, [pc, #284]	; (8001220 <main+0x154>)
 8001102:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001106:	4947      	ldr	r1, [pc, #284]	; (8001224 <main+0x158>)
 8001108:	f000 fa42 	bl	8001590 <mpu6050_hal_init>

  MPU6050_HAL_ACCEL_t accelAngle;
  MPU6050_HAL_GYRO_t gyro/*, gyroAngle*/;


  uint32_t previosTime = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t currentTime = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	657b      	str	r3, [r7, #84]	; 0x54
  float elapsedTime = 0.0f;
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	647b      	str	r3, [r7, #68]	; 0x44

  float angleX = 0.0f;
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	653b      	str	r3, [r7, #80]	; 0x50
  float angleY = 0.0f;
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	64fb      	str	r3, [r7, #76]	; 0x4c

  // \033[2J
  uint8_t message[USB_MESSAGE_SIZE] = "X: 0000.00 Y: 0000.00\n\r";
 8001126:	4b40      	ldr	r3, [pc, #256]	; (8001228 <main+0x15c>)
 8001128:	1d3c      	adds	r4, r7, #4
 800112a:	461d      	mov	r5, r3
 800112c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001130:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001134:	e884 0003 	stmia.w	r4, {r0, r1}
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	809a      	strh	r2, [r3, #4]

  calibrationAccel();
 8001142:	f000 fc37 	bl	80019b4 <calibrationAccel>
  calibrationGyro();
 8001146:	f000 fcd9 	bl	8001afc <calibrationGyro>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getAngleAcceleration(&accelAngle);
 800114a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114e:	4618      	mov	r0, r3
 8001150:	f000 faea 	bl	8001728 <getAngleAcceleration>
	  previosTime = currentTime;
 8001154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001156:	64bb      	str	r3, [r7, #72]	; 0x48
	  currentTime = HAL_GetTick();
 8001158:	f000 fedc 	bl	8001f14 <HAL_GetTick>
 800115c:	6578      	str	r0, [r7, #84]	; 0x54
	  elapsedTime = (currentTime - previosTime) / 1000.0f; // get seconds
 800115e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fd57 	bl	8000c18 <__aeabi_ui2f>
 800116a:	4603      	mov	r3, r0
 800116c:	492f      	ldr	r1, [pc, #188]	; (800122c <main+0x160>)
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fe5e 	bl	8000e30 <__aeabi_fdiv>
 8001174:	4603      	mov	r3, r0
 8001176:	647b      	str	r3, [r7, #68]	; 0x44

	  getAngleGyroscope(&gyro);
 8001178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fbab 	bl	80018d8 <getAngleGyroscope>

	  angleX = GYRO_PART * (angleX + (gyro.X * elapsedTime)) + ACC_PART * accelAngle.X;
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fd9e 	bl	8000cc8 <__aeabi_fmul>
 800118c:	4603      	mov	r3, r0
 800118e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fc91 	bl	8000ab8 <__addsf3>
 8001196:	4603      	mov	r3, r0
 8001198:	4925      	ldr	r1, [pc, #148]	; (8001230 <main+0x164>)
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fd94 	bl	8000cc8 <__aeabi_fmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461c      	mov	r4, r3
 80011a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a6:	4923      	ldr	r1, [pc, #140]	; (8001234 <main+0x168>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fd8d 	bl	8000cc8 <__aeabi_fmul>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4619      	mov	r1, r3
 80011b2:	4620      	mov	r0, r4
 80011b4:	f7ff fc80 	bl	8000ab8 <__addsf3>
 80011b8:	4603      	mov	r3, r0
 80011ba:	653b      	str	r3, [r7, #80]	; 0x50
	  angleY = GYRO_PART * (angleY + (gyro.Y * elapsedTime)) + ACC_PART * accelAngle.Y;
 80011bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fd81 	bl	8000cc8 <__aeabi_fmul>
 80011c6:	4603      	mov	r3, r0
 80011c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fc74 	bl	8000ab8 <__addsf3>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4917      	ldr	r1, [pc, #92]	; (8001230 <main+0x164>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fd77 	bl	8000cc8 <__aeabi_fmul>
 80011da:	4603      	mov	r3, r0
 80011dc:	461c      	mov	r4, r3
 80011de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e0:	4914      	ldr	r1, [pc, #80]	; (8001234 <main+0x168>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fd70 	bl	8000cc8 <__aeabi_fmul>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4619      	mov	r1, r3
 80011ec:	4620      	mov	r0, r4
 80011ee:	f7ff fc63 	bl	8000ab8 <__addsf3>
 80011f2:	4603      	mov	r3, r0
 80011f4:	64fb      	str	r3, [r7, #76]	; 0x4c

	  //Print to USB(Virtual COM-Port)

	  addMessage(message, 3, angleX);
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011fa:	2103      	movs	r1, #3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 f8fd 	bl	80013fc <addMessage>
	  addMessage(message, 14, angleY);
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001206:	210e      	movs	r1, #14
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f8f7 	bl	80013fc <addMessage>

	  CDC_Transmit_FS(message, USB_MESSAGE_SIZE);
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	211e      	movs	r1, #30
 8001212:	4618      	mov	r0, r3
 8001214:	f006 f9a8 	bl	8007568 <CDC_Transmit_FS>
	  getAngleAcceleration(&accelAngle);
 8001218:	e797      	b.n	800114a <main+0x7e>
 800121a:	bf00      	nop
 800121c:	40011000 	.word	0x40011000
 8001220:	43030000 	.word	0x43030000
 8001224:	2000043c 	.word	0x2000043c
 8001228:	0800890c 	.word	0x0800890c
 800122c:	447a0000 	.word	0x447a0000
 8001230:	3f7eb852 	.word	0x3f7eb852
 8001234:	3ba3d70a 	.word	0x3ba3d70a

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	; 0x50
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001242:	2228      	movs	r2, #40	; 0x28
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f006 fd8a 	bl	8007d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001268:	2301      	movs	r3, #1
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800126c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001276:	2301      	movs	r3, #1
 8001278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127a:	2302      	movs	r3, #2
 800127c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001284:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001288:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128e:	4618      	mov	r0, r3
 8001290:	f002 ff38 	bl	8004104 <HAL_RCC_OscConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800129a:	f000 f907 	bl	80014ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129e:	230f      	movs	r3, #15
 80012a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2101      	movs	r1, #1
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 f9a2 	bl	8004604 <HAL_RCC_ClockConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012c6:	f000 f8f1 	bl	80014ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012ca:	2310      	movs	r3, #16
 80012cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80012ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012d2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 fb1c 	bl	8004914 <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012e2:	f000 f8e3 	bl	80014ac <Error_Handler>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3750      	adds	r7, #80	; 0x50
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_I2C1_Init+0x50>)
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <MX_I2C1_Init+0x54>)
 80012f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_I2C1_Init+0x50>)
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <MX_I2C1_Init+0x58>)
 80012fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_I2C1_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_I2C1_Init+0x50>)
 800130e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001312:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_I2C1_Init+0x50>)
 800132e:	f001 f89d 	bl	800246c <HAL_I2C_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001338:	f000 f8b8 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000043c 	.word	0x2000043c
 8001344:	40005400 	.word	0x40005400
 8001348:	000186a0 	.word	0x000186a0

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <MX_GPIO_Init+0xa8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <MX_GPIO_Init+0xa8>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <MX_GPIO_Init+0xa8>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <MX_GPIO_Init+0xa8>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <MX_GPIO_Init+0xa8>)
 800137e:	f043 0320 	orr.w	r3, r3, #32
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <MX_GPIO_Init+0xa8>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <MX_GPIO_Init+0xa8>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <MX_GPIO_Init+0xa8>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <MX_GPIO_Init+0xa8>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_GPIO_Init+0xa8>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a11      	ldr	r2, [pc, #68]	; (80013f4 <MX_GPIO_Init+0xa8>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_GPIO_Init+0xa8>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c6:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MX_GPIO_Init+0xac>)
 80013c8:	f001 f838 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2302      	movs	r3, #2
 80013dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	4619      	mov	r1, r3
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MX_GPIO_Init+0xac>)
 80013e6:	f000 fecf 	bl	8002188 <HAL_GPIO_Init>

}
 80013ea:	bf00      	nop
 80013ec:	3720      	adds	r7, #32
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40011000 	.word	0x40011000

080013fc <addMessage>:

/* USER CODE BEGIN 4 */
void addMessage(uint8_t *message, uint8_t position, float value){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	460b      	mov	r3, r1
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	72fb      	strb	r3, [r7, #11]

    int16_t divisional = (int16_t)((value - (int16_t) value)*100);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fe38 	bl	8001080 <__aeabi_f2iz>
 8001410:	4603      	mov	r3, r0
 8001412:	b21b      	sxth	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fc03 	bl	8000c20 <__aeabi_i2f>
 800141a:	4603      	mov	r3, r0
 800141c:	4619      	mov	r1, r3
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff fb48 	bl	8000ab4 <__aeabi_fsub>
 8001424:	4603      	mov	r3, r0
 8001426:	491f      	ldr	r1, [pc, #124]	; (80014a4 <addMessage+0xa8>)
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fc4d 	bl	8000cc8 <__aeabi_fmul>
 800142e:	4603      	mov	r3, r0
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fe25 	bl	8001080 <__aeabi_f2iz>
 8001436:	4603      	mov	r3, r0
 8001438:	83fb      	strh	r3, [r7, #30]
	  	  if (divisional < 0) divisional = divisional*(-1);
 800143a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800143e:	2b00      	cmp	r3, #0
 8001440:	da03      	bge.n	800144a <addMessage+0x4e>
 8001442:	8bfb      	ldrh	r3, [r7, #30]
 8001444:	425b      	negs	r3, r3
 8001446:	b29b      	uxth	r3, r3
 8001448:	83fb      	strh	r3, [r7, #30]

    uint8_t mes[8];
    sprintf((char*)mes, "%4d.%02d", (int16_t) value, divisional);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff fe18 	bl	8001080 <__aeabi_f2iz>
 8001450:	4603      	mov	r3, r0
 8001452:	b21b      	sxth	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	f107 0014 	add.w	r0, r7, #20
 800145e:	4912      	ldr	r1, [pc, #72]	; (80014a8 <addMessage+0xac>)
 8001460:	f006 fc86 	bl	8007d70 <siprintf>

    uint8_t len = strlen((char*)mes);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe fe71 	bl	8000150 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	773b      	strb	r3, [r7, #28]
    uint8_t i = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	777b      	strb	r3, [r7, #29]

    while (i<len)
 8001476:	e00d      	b.n	8001494 <addMessage+0x98>
    {
        *(message+position+i) = *(mes+i);
 8001478:	7f7b      	ldrb	r3, [r7, #29]
 800147a:	f107 0214 	add.w	r2, r7, #20
 800147e:	441a      	add	r2, r3
 8001480:	7af9      	ldrb	r1, [r7, #11]
 8001482:	7f7b      	ldrb	r3, [r7, #29]
 8001484:	440b      	add	r3, r1
 8001486:	68f9      	ldr	r1, [r7, #12]
 8001488:	440b      	add	r3, r1
 800148a:	7812      	ldrb	r2, [r2, #0]
 800148c:	701a      	strb	r2, [r3, #0]
        i++;
 800148e:	7f7b      	ldrb	r3, [r7, #29]
 8001490:	3301      	adds	r3, #1
 8001492:	777b      	strb	r3, [r7, #29]
    while (i<len)
 8001494:	7f7a      	ldrb	r2, [r7, #29]
 8001496:	7f3b      	ldrb	r3, [r7, #28]
 8001498:	429a      	cmp	r2, r3
 800149a:	d3ed      	bcc.n	8001478 <addMessage+0x7c>
    }

}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	42c80000 	.word	0x42c80000
 80014a8:	0800892c 	.word	0x0800892c

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <I2C_WriteBuffer>:
MPU6050_HAL_ACCEL_t accelCalibData;
MPU6050_HAL_GYRO_t gyroCalibData;
float accelScale;
float gyroScale;

void I2C_WriteBuffer(uint8_t i2c_address, uint8_t *aTxBuffer, uint8_t txBufferSize){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af02      	add	r7, sp, #8
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
 80014c4:	4613      	mov	r3, r2
 80014c6:	71bb      	strb	r3, [r7, #6]
	errorLedOff();
 80014c8:	f000 f91c 	bl	8001704 <errorLedOff>
	  while(HAL_I2C_Master_Transmit(hi2c1, (uint16_t) i2c_address<<1, aTxBuffer, (uint16_t)txBufferSize, (uint32_t)1000)){
 80014cc:	e009      	b.n	80014e2 <I2C_WriteBuffer+0x2a>
		  if(HAL_I2C_GetState(hi2c1) != HAL_I2C_ERROR_AF){
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <I2C_WriteBuffer+0x68>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 fc1e 	bl	8002d14 <HAL_I2C_GetState>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d001      	beq.n	80014e2 <I2C_WriteBuffer+0x2a>
			  errorLedOn();
 80014de:	f000 f901 	bl	80016e4 <errorLedOn>
	  while(HAL_I2C_Master_Transmit(hi2c1, (uint16_t) i2c_address<<1, aTxBuffer, (uint16_t)txBufferSize, (uint32_t)1000)){
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <I2C_WriteBuffer+0x68>)
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	b299      	uxth	r1, r3
 80014ee:	79bb      	ldrb	r3, [r7, #6]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	f001 f8de 	bl	80026bc <HAL_I2C_Master_Transmit>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1e3      	bne.n	80014ce <I2C_WriteBuffer+0x16>
		  }
	  }
	  while(HAL_I2C_GetState(hi2c1) != HAL_I2C_STATE_READY){}
 8001506:	bf00      	nop
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <I2C_WriteBuffer+0x68>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f001 fc01 	bl	8002d14 <HAL_I2C_GetState>
 8001512:	4603      	mov	r3, r0
 8001514:	2b20      	cmp	r3, #32
 8001516:	d1f7      	bne.n	8001508 <I2C_WriteBuffer+0x50>
  }
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000200 	.word	0x20000200

08001524 <I2C_ReadBuffer>:

void I2C_ReadBuffer(uint8_t i2c_address, uint8_t regAddr, uint8_t *aRxBuffer, uint8_t rxBufferSize){
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af02      	add	r7, sp, #8
 800152a:	603a      	str	r2, [r7, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
 8001532:	460b      	mov	r3, r1
 8001534:	71bb      	strb	r3, [r7, #6]
 8001536:	4613      	mov	r3, r2
 8001538:	717b      	strb	r3, [r7, #5]
	errorLedOff();
 800153a:	f000 f8e3 	bl	8001704 <errorLedOff>
  	  I2C_WriteBuffer(i2c_address, &regAddr, 1);
 800153e:	1db9      	adds	r1, r7, #6
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2201      	movs	r2, #1
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ffb7 	bl	80014b8 <I2C_WriteBuffer>
  	  while(HAL_I2C_Master_Receive(hi2c1, (uint16_t) i2c_address<<1, aRxBuffer, (uint16_t)rxBufferSize, (uint32_t)1000)){
 800154a:	e009      	b.n	8001560 <I2C_ReadBuffer+0x3c>
  	  		  if(HAL_I2C_GetState(hi2c1) != HAL_I2C_ERROR_AF){
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <I2C_ReadBuffer+0x68>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f001 fbdf 	bl	8002d14 <HAL_I2C_GetState>
 8001556:	4603      	mov	r3, r0
 8001558:	2b04      	cmp	r3, #4
 800155a:	d001      	beq.n	8001560 <I2C_ReadBuffer+0x3c>
  	  			  errorLedOn();
 800155c:	f000 f8c2 	bl	80016e4 <errorLedOn>
  	  while(HAL_I2C_Master_Receive(hi2c1, (uint16_t) i2c_address<<1, aRxBuffer, (uint16_t)rxBufferSize, (uint32_t)1000)){
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <I2C_ReadBuffer+0x68>)
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	b29b      	uxth	r3, r3
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	b299      	uxth	r1, r3
 800156c:	797b      	ldrb	r3, [r7, #5]
 800156e:	b29a      	uxth	r2, r3
 8001570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	4613      	mov	r3, r2
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	f001 f99d 	bl	80028b8 <HAL_I2C_Master_Receive>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e3      	bne.n	800154c <I2C_ReadBuffer+0x28>
  	  		  }
  	  	  }
    }
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000200 	.word	0x20000200

08001590 <mpu6050_hal_init>:

void mpu6050_hal_init(MPU6050_HAL_ERRORLED_t *led,
						I2C_HandleTypeDef *phi2c1,
						float aScale,
						float gScale){
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
	HAL_Delay(100);
 800159e:	2064      	movs	r0, #100	; 0x64
 80015a0:	f000 fcc2 	bl	8001f28 <HAL_Delay>
	errorLed = led;
 80015a4:	4a48      	ldr	r2, [pc, #288]	; (80016c8 <mpu6050_hal_init+0x138>)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6013      	str	r3, [r2, #0]
	hi2c1 = phi2c1;
 80015aa:	4a48      	ldr	r2, [pc, #288]	; (80016cc <mpu6050_hal_init+0x13c>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	6013      	str	r3, [r2, #0]
	accelScale = aScale;
 80015b0:	4a47      	ldr	r2, [pc, #284]	; (80016d0 <mpu6050_hal_init+0x140>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6013      	str	r3, [r2, #0]
	gyroScale = gScale;
 80015b6:	4a47      	ldr	r2, [pc, #284]	; (80016d4 <mpu6050_hal_init+0x144>)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	6013      	str	r3, [r2, #0]

	buffer[0] = MPU6050_PWR_MGMT_1;
 80015bc:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <mpu6050_hal_init+0x148>)
 80015be:	226b      	movs	r2, #107	; 0x6b
 80015c0:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x00;
 80015c2:	4b45      	ldr	r3, [pc, #276]	; (80016d8 <mpu6050_hal_init+0x148>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	705a      	strb	r2, [r3, #1]
	I2C_WriteBuffer(MPU6050_I2C_ADDRESS, buffer, 2);
 80015c8:	2202      	movs	r2, #2
 80015ca:	4943      	ldr	r1, [pc, #268]	; (80016d8 <mpu6050_hal_init+0x148>)
 80015cc:	2068      	movs	r0, #104	; 0x68
 80015ce:	f7ff ff73 	bl	80014b8 <I2C_WriteBuffer>

	//Init scale!!!
	buffer[0] = MPU6050_ACCEL_CONFIG;
 80015d2:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <mpu6050_hal_init+0x148>)
 80015d4:	221c      	movs	r2, #28
 80015d6:	701a      	strb	r2, [r3, #0]
	if (aScale == MPU6050_ACCEL_2G_SCALE) buffer[1] = MPU6050_ACCEL_CFG_AFS_SEL2;
 80015d8:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fd07 	bl	8000ff0 <__aeabi_fcmpeq>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <mpu6050_hal_init+0x5e>
 80015e8:	4b3b      	ldr	r3, [pc, #236]	; (80016d8 <mpu6050_hal_init+0x148>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	705a      	strb	r2, [r3, #1]
	if (aScale == MPU6050_ACCEL_4G_SCALE) buffer[1] = MPU6050_ACCEL_CFG_AFS_SEL4;
 80015ee:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fcfc 	bl	8000ff0 <__aeabi_fcmpeq>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <mpu6050_hal_init+0x74>
 80015fe:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <mpu6050_hal_init+0x148>)
 8001600:	2208      	movs	r2, #8
 8001602:	705a      	strb	r2, [r3, #1]
	if (aScale == MPU6050_ACCEL_8G_SCALE) buffer[1] = MPU6050_ACCEL_CFG_AFS_SEL8;
 8001604:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fcf1 	bl	8000ff0 <__aeabi_fcmpeq>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <mpu6050_hal_init+0x8a>
 8001614:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <mpu6050_hal_init+0x148>)
 8001616:	2210      	movs	r2, #16
 8001618:	705a      	strb	r2, [r3, #1]
	if (aScale == MPU6050_ACCEL_16G_SCALE) buffer[1] = MPU6050_ACCEL_CFG_AFS_SEL16;
 800161a:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fce6 	bl	8000ff0 <__aeabi_fcmpeq>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d002      	beq.n	8001630 <mpu6050_hal_init+0xa0>
 800162a:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <mpu6050_hal_init+0x148>)
 800162c:	2218      	movs	r2, #24
 800162e:	705a      	strb	r2, [r3, #1]
	I2C_WriteBuffer(MPU6050_I2C_ADDRESS, buffer, 2);
 8001630:	2202      	movs	r2, #2
 8001632:	4929      	ldr	r1, [pc, #164]	; (80016d8 <mpu6050_hal_init+0x148>)
 8001634:	2068      	movs	r0, #104	; 0x68
 8001636:	f7ff ff3f 	bl	80014b8 <I2C_WriteBuffer>

	buffer[0] = MPU6050_GYRO_CONFIG;
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <mpu6050_hal_init+0x148>)
 800163c:	221b      	movs	r2, #27
 800163e:	701a      	strb	r2, [r3, #0]
	if (aScale == MPU6050_GYRO_250_SCALE) buffer[1] = MPU6050_GYRO_CFG_FS_SEL250;
 8001640:	4926      	ldr	r1, [pc, #152]	; (80016dc <mpu6050_hal_init+0x14c>)
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fcd4 	bl	8000ff0 <__aeabi_fcmpeq>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d002      	beq.n	8001654 <mpu6050_hal_init+0xc4>
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <mpu6050_hal_init+0x148>)
 8001650:	2200      	movs	r2, #0
 8001652:	705a      	strb	r2, [r3, #1]
	if (aScale == MPU6050_GYRO_500_SCALE) buffer[1] = MPU6050_GYRO_CFG_FS_SEL500;
 8001654:	4922      	ldr	r1, [pc, #136]	; (80016e0 <mpu6050_hal_init+0x150>)
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fcca 	bl	8000ff0 <__aeabi_fcmpeq>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <mpu6050_hal_init+0xd8>
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <mpu6050_hal_init+0x148>)
 8001664:	2208      	movs	r2, #8
 8001666:	705a      	strb	r2, [r3, #1]
	if (aScale == MPU6050_GYRO_1000_SCALE) buffer[1] = MPU6050_GYRO_CFG_FS_SEL1000;
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7fe fedd 	bl	8000428 <__aeabi_f2d>
 800166e:	a312      	add	r3, pc, #72	; (adr r3, 80016b8 <mpu6050_hal_init+0x128>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	f7ff f998 	bl	80009a8 <__aeabi_dcmpeq>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <mpu6050_hal_init+0xf4>
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <mpu6050_hal_init+0x148>)
 8001680:	2210      	movs	r2, #16
 8001682:	705a      	strb	r2, [r3, #1]
	if (aScale == MPU6050_GYRO_2000_SCALE) buffer[1] = MPU6050_GYRO_CFG_FS_SEL2000;
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7fe fecf 	bl	8000428 <__aeabi_f2d>
 800168a:	a30d      	add	r3, pc, #52	; (adr r3, 80016c0 <mpu6050_hal_init+0x130>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7ff f98a 	bl	80009a8 <__aeabi_dcmpeq>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <mpu6050_hal_init+0x110>
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <mpu6050_hal_init+0x148>)
 800169c:	2218      	movs	r2, #24
 800169e:	705a      	strb	r2, [r3, #1]
	I2C_WriteBuffer(MPU6050_I2C_ADDRESS, buffer, 2);
 80016a0:	2202      	movs	r2, #2
 80016a2:	490d      	ldr	r1, [pc, #52]	; (80016d8 <mpu6050_hal_init+0x148>)
 80016a4:	2068      	movs	r0, #104	; 0x68
 80016a6:	f7ff ff07 	bl	80014b8 <I2C_WriteBuffer>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	f3af 8000 	nop.w
 80016b8:	66666666 	.word	0x66666666
 80016bc:	40406666 	.word	0x40406666
 80016c0:	66666666 	.word	0x66666666
 80016c4:	40306666 	.word	0x40306666
 80016c8:	200004ac 	.word	0x200004ac
 80016cc:	20000200 	.word	0x20000200
 80016d0:	200004b0 	.word	0x200004b0
 80016d4:	2000049c 	.word	0x2000049c
 80016d8:	20000204 	.word	0x20000204
 80016dc:	43030000 	.word	0x43030000
 80016e0:	42830000 	.word	0x42830000

080016e4 <errorLedOn>:

void errorLedOn(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(errorLed->GPIO_ErrorLedPort, errorLed->GPIO_ErrorLedPin, GPIO_PIN_RESET);
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <errorLedOn+0x1c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <errorLedOn+0x1c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	889b      	ldrh	r3, [r3, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	4619      	mov	r1, r3
 80016f8:	f000 fea0 	bl	800243c <HAL_GPIO_WritePin>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200004ac 	.word	0x200004ac

08001704 <errorLedOff>:

void errorLedOff(void){
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(errorLed->GPIO_ErrorLedPort, errorLed->GPIO_ErrorLedPin, GPIO_PIN_SET);
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <errorLedOff+0x1c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <errorLedOff+0x1c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	889b      	ldrh	r3, [r3, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	4619      	mov	r1, r3
 8001718:	f000 fe90 	bl	800243c <HAL_GPIO_WritePin>
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200004ac 	.word	0x200004ac
 8001724:	00000000 	.word	0x00000000

08001728 <getAngleAcceleration>:


void getAngleAcceleration(MPU6050_HAL_ACCEL_t *accel){
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	I2C_ReadBuffer(MPU6050_I2C_ADDRESS, MPU6050_ACCEL_XOUT_H, buffer, 6);
 8001730:	2306      	movs	r3, #6
 8001732:	4a65      	ldr	r2, [pc, #404]	; (80018c8 <getAngleAcceleration+0x1a0>)
 8001734:	213b      	movs	r1, #59	; 0x3b
 8001736:	2068      	movs	r0, #104	; 0x68
 8001738:	f7ff fef4 	bl	8001524 <I2C_ReadBuffer>
	float ax = (((int16_t)(buffer[0] << 8)|buffer[1])-accelCalibData.X) / accelScale;
 800173c:	4b62      	ldr	r3, [pc, #392]	; (80018c8 <getAngleAcceleration+0x1a0>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b21b      	sxth	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	4b60      	ldr	r3, [pc, #384]	; (80018c8 <getAngleAcceleration+0x1a0>)
 8001748:	785b      	ldrb	r3, [r3, #1]
 800174a:	4313      	orrs	r3, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fa67 	bl	8000c20 <__aeabi_i2f>
 8001752:	4602      	mov	r2, r0
 8001754:	4b5d      	ldr	r3, [pc, #372]	; (80018cc <getAngleAcceleration+0x1a4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	4610      	mov	r0, r2
 800175c:	f7ff f9aa 	bl	8000ab4 <__aeabi_fsub>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	4b5a      	ldr	r3, [pc, #360]	; (80018d0 <getAngleAcceleration+0x1a8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f7ff fb60 	bl	8000e30 <__aeabi_fdiv>
 8001770:	4603      	mov	r3, r0
 8001772:	617b      	str	r3, [r7, #20]
	float ay = (((int16_t)(buffer[2] << 8)|buffer[3])-accelCalibData.Y) / accelScale;
 8001774:	4b54      	ldr	r3, [pc, #336]	; (80018c8 <getAngleAcceleration+0x1a0>)
 8001776:	789b      	ldrb	r3, [r3, #2]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	b21b      	sxth	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	4b52      	ldr	r3, [pc, #328]	; (80018c8 <getAngleAcceleration+0x1a0>)
 8001780:	78db      	ldrb	r3, [r3, #3]
 8001782:	4313      	orrs	r3, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fa4b 	bl	8000c20 <__aeabi_i2f>
 800178a:	4602      	mov	r2, r0
 800178c:	4b4f      	ldr	r3, [pc, #316]	; (80018cc <getAngleAcceleration+0x1a4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4619      	mov	r1, r3
 8001792:	4610      	mov	r0, r2
 8001794:	f7ff f98e 	bl	8000ab4 <__aeabi_fsub>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	4b4c      	ldr	r3, [pc, #304]	; (80018d0 <getAngleAcceleration+0x1a8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4610      	mov	r0, r2
 80017a4:	f7ff fb44 	bl	8000e30 <__aeabi_fdiv>
 80017a8:	4603      	mov	r3, r0
 80017aa:	613b      	str	r3, [r7, #16]
	float az = (((int16_t)(buffer[4] << 8)|buffer[5])-accelCalibData.Z) / accelScale;
 80017ac:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <getAngleAcceleration+0x1a0>)
 80017ae:	791b      	ldrb	r3, [r3, #4]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <getAngleAcceleration+0x1a0>)
 80017b8:	795b      	ldrb	r3, [r3, #5]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fa2f 	bl	8000c20 <__aeabi_i2f>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <getAngleAcceleration+0x1a4>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f7ff f972 	bl	8000ab4 <__aeabi_fsub>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <getAngleAcceleration+0x1a8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	4610      	mov	r0, r2
 80017dc:	f7ff fb28 	bl	8000e30 <__aeabi_fdiv>
 80017e0:	4603      	mov	r3, r0
 80017e2:	60fb      	str	r3, [r7, #12]

	accel->X = (float)(atanf(ay/sqrtf(ax*ax + az*az))) * 180.0f / PI;
 80017e4:	6979      	ldr	r1, [r7, #20]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff fa6e 	bl	8000cc8 <__aeabi_fmul>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461c      	mov	r4, r3
 80017f0:	68f9      	ldr	r1, [r7, #12]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f7ff fa68 	bl	8000cc8 <__aeabi_fmul>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4619      	mov	r1, r3
 80017fc:	4620      	mov	r0, r4
 80017fe:	f7ff f95b 	bl	8000ab8 <__addsf3>
 8001802:	4603      	mov	r3, r0
 8001804:	4618      	mov	r0, r3
 8001806:	f006 ffd5 	bl	80087b4 <sqrtf>
 800180a:	4603      	mov	r3, r0
 800180c:	4619      	mov	r1, r3
 800180e:	6938      	ldr	r0, [r7, #16]
 8001810:	f7ff fb0e 	bl	8000e30 <__aeabi_fdiv>
 8001814:	4603      	mov	r3, r0
 8001816:	4618      	mov	r0, r3
 8001818:	f006 febc 	bl	8008594 <atanf>
 800181c:	4603      	mov	r3, r0
 800181e:	492d      	ldr	r1, [pc, #180]	; (80018d4 <getAngleAcceleration+0x1ac>)
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fa51 	bl	8000cc8 <__aeabi_fmul>
 8001826:	4603      	mov	r3, r0
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fdfd 	bl	8000428 <__aeabi_f2d>
 800182e:	a324      	add	r3, pc, #144	; (adr r3, 80018c0 <getAngleAcceleration+0x198>)
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	f7fe ff7a 	bl	800072c <__aeabi_ddiv>
 8001838:	4603      	mov	r3, r0
 800183a:	460c      	mov	r4, r1
 800183c:	4618      	mov	r0, r3
 800183e:	4621      	mov	r1, r4
 8001840:	f7ff f8e4 	bl	8000a0c <__aeabi_d2f>
 8001844:	4602      	mov	r2, r0
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	601a      	str	r2, [r3, #0]
	accel->Y = (float)(atanf(ax/sqrtf(ay*ay + az*az))) * 180.0f / PI;
 800184a:	6939      	ldr	r1, [r7, #16]
 800184c:	6938      	ldr	r0, [r7, #16]
 800184e:	f7ff fa3b 	bl	8000cc8 <__aeabi_fmul>
 8001852:	4603      	mov	r3, r0
 8001854:	461c      	mov	r4, r3
 8001856:	68f9      	ldr	r1, [r7, #12]
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f7ff fa35 	bl	8000cc8 <__aeabi_fmul>
 800185e:	4603      	mov	r3, r0
 8001860:	4619      	mov	r1, r3
 8001862:	4620      	mov	r0, r4
 8001864:	f7ff f928 	bl	8000ab8 <__addsf3>
 8001868:	4603      	mov	r3, r0
 800186a:	4618      	mov	r0, r3
 800186c:	f006 ffa2 	bl	80087b4 <sqrtf>
 8001870:	4603      	mov	r3, r0
 8001872:	4619      	mov	r1, r3
 8001874:	6978      	ldr	r0, [r7, #20]
 8001876:	f7ff fadb 	bl	8000e30 <__aeabi_fdiv>
 800187a:	4603      	mov	r3, r0
 800187c:	4618      	mov	r0, r3
 800187e:	f006 fe89 	bl	8008594 <atanf>
 8001882:	4603      	mov	r3, r0
 8001884:	4913      	ldr	r1, [pc, #76]	; (80018d4 <getAngleAcceleration+0x1ac>)
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fa1e 	bl	8000cc8 <__aeabi_fmul>
 800188c:	4603      	mov	r3, r0
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fdca 	bl	8000428 <__aeabi_f2d>
 8001894:	a30a      	add	r3, pc, #40	; (adr r3, 80018c0 <getAngleAcceleration+0x198>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe ff47 	bl	800072c <__aeabi_ddiv>
 800189e:	4603      	mov	r3, r0
 80018a0:	460c      	mov	r4, r1
 80018a2:	4618      	mov	r0, r3
 80018a4:	4621      	mov	r1, r4
 80018a6:	f7ff f8b1 	bl	8000a0c <__aeabi_d2f>
 80018aa:	4602      	mov	r2, r0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	605a      	str	r2, [r3, #4]

	//accel->X = (float)(atan2(ay, az)) * 180.0f / PI;
	//accel->Y = (float)(atan2(-1 * ax, sqrt(ay*ay + az*az))) * 180.0f / PI;
	accel->Z = 0;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
}
 80018b8:	bf00      	nop
 80018ba:	371c      	adds	r7, #28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd90      	pop	{r4, r7, pc}
 80018c0:	54442d18 	.word	0x54442d18
 80018c4:	400921fb 	.word	0x400921fb
 80018c8:	20000204 	.word	0x20000204
 80018cc:	20000490 	.word	0x20000490
 80018d0:	200004b0 	.word	0x200004b0
 80018d4:	43340000 	.word	0x43340000

080018d8 <getAngleGyroscope>:

void getAngleGyroscope(MPU6050_HAL_GYRO_t *gyro){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	I2C_ReadBuffer(MPU6050_I2C_ADDRESS, MPU6050_GYRO_XOUT_H, buffer, 6);
 80018e0:	2306      	movs	r3, #6
 80018e2:	4a31      	ldr	r2, [pc, #196]	; (80019a8 <getAngleGyroscope+0xd0>)
 80018e4:	2143      	movs	r1, #67	; 0x43
 80018e6:	2068      	movs	r0, #104	; 0x68
 80018e8:	f7ff fe1c 	bl	8001524 <I2C_ReadBuffer>

	gyro->X = (((int16_t)(buffer[0] << 8)|buffer[1]) - gyroCalibData.X) / gyroScale;
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <getAngleGyroscope+0xd0>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <getAngleGyroscope+0xd0>)
 80018f8:	785b      	ldrb	r3, [r3, #1]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f98f 	bl	8000c20 <__aeabi_i2f>
 8001902:	4602      	mov	r2, r0
 8001904:	4b29      	ldr	r3, [pc, #164]	; (80019ac <getAngleGyroscope+0xd4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	4610      	mov	r0, r2
 800190c:	f7ff f8d2 	bl	8000ab4 <__aeabi_fsub>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <getAngleGyroscope+0xd8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	4610      	mov	r0, r2
 800191c:	f7ff fa88 	bl	8000e30 <__aeabi_fdiv>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	601a      	str	r2, [r3, #0]
	gyro->Y = (((int16_t)(buffer[2] << 8)|buffer[3]) - gyroCalibData.Y) / gyroScale;
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <getAngleGyroscope+0xd0>)
 800192a:	789b      	ldrb	r3, [r3, #2]
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	b21b      	sxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <getAngleGyroscope+0xd0>)
 8001934:	78db      	ldrb	r3, [r3, #3]
 8001936:	4313      	orrs	r3, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff f971 	bl	8000c20 <__aeabi_i2f>
 800193e:	4602      	mov	r2, r0
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <getAngleGyroscope+0xd4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4619      	mov	r1, r3
 8001946:	4610      	mov	r0, r2
 8001948:	f7ff f8b4 	bl	8000ab4 <__aeabi_fsub>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <getAngleGyroscope+0xd8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	4610      	mov	r0, r2
 8001958:	f7ff fa6a 	bl	8000e30 <__aeabi_fdiv>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	605a      	str	r2, [r3, #4]
	gyro->Z = (((int16_t)(buffer[4] << 8)|buffer[5]) - gyroCalibData.Z) / gyroScale;
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <getAngleGyroscope+0xd0>)
 8001966:	791b      	ldrb	r3, [r3, #4]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b21b      	sxth	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <getAngleGyroscope+0xd0>)
 8001970:	795b      	ldrb	r3, [r3, #5]
 8001972:	4313      	orrs	r3, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f953 	bl	8000c20 <__aeabi_i2f>
 800197a:	4602      	mov	r2, r0
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <getAngleGyroscope+0xd4>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4619      	mov	r1, r3
 8001982:	4610      	mov	r0, r2
 8001984:	f7ff f896 	bl	8000ab4 <__aeabi_fsub>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <getAngleGyroscope+0xd8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	4610      	mov	r0, r2
 8001994:	f7ff fa4c 	bl	8000e30 <__aeabi_fdiv>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	609a      	str	r2, [r3, #8]
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000204 	.word	0x20000204
 80019ac:	200004a0 	.word	0x200004a0
 80019b0:	2000049c 	.word	0x2000049c

080019b4 <calibrationAccel>:

void calibrationAccel(void){
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0

	uint32_t cycle = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
	while (cycle < MPU6050_CALIB_CYCLES){
 80019be:	e04d      	b.n	8001a5c <calibrationAccel+0xa8>
		I2C_ReadBuffer(MPU6050_I2C_ADDRESS, MPU6050_ACCEL_XOUT_H, buffer, 6);
 80019c0:	2306      	movs	r3, #6
 80019c2:	4a4a      	ldr	r2, [pc, #296]	; (8001aec <calibrationAccel+0x138>)
 80019c4:	213b      	movs	r1, #59	; 0x3b
 80019c6:	2068      	movs	r0, #104	; 0x68
 80019c8:	f7ff fdac 	bl	8001524 <I2C_ReadBuffer>
		accelCalibData.X += (float)((int16_t)(buffer[0] << 8)|buffer[1]);
 80019cc:	4b48      	ldr	r3, [pc, #288]	; (8001af0 <calibrationAccel+0x13c>)
 80019ce:	681c      	ldr	r4, [r3, #0]
 80019d0:	4b46      	ldr	r3, [pc, #280]	; (8001aec <calibrationAccel+0x138>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	4b44      	ldr	r3, [pc, #272]	; (8001aec <calibrationAccel+0x138>)
 80019dc:	785b      	ldrb	r3, [r3, #1]
 80019de:	4313      	orrs	r3, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f91d 	bl	8000c20 <__aeabi_i2f>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4619      	mov	r1, r3
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff f864 	bl	8000ab8 <__addsf3>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b3e      	ldr	r3, [pc, #248]	; (8001af0 <calibrationAccel+0x13c>)
 80019f6:	601a      	str	r2, [r3, #0]
		accelCalibData.Y += (float)((int16_t)(buffer[2] << 8)|buffer[3]);
 80019f8:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <calibrationAccel+0x13c>)
 80019fa:	685c      	ldr	r4, [r3, #4]
 80019fc:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <calibrationAccel+0x138>)
 80019fe:	789b      	ldrb	r3, [r3, #2]
 8001a00:	021b      	lsls	r3, r3, #8
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b39      	ldr	r3, [pc, #228]	; (8001aec <calibrationAccel+0x138>)
 8001a08:	78db      	ldrb	r3, [r3, #3]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f907 	bl	8000c20 <__aeabi_i2f>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4619      	mov	r1, r3
 8001a16:	4620      	mov	r0, r4
 8001a18:	f7ff f84e 	bl	8000ab8 <__addsf3>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <calibrationAccel+0x13c>)
 8001a22:	605a      	str	r2, [r3, #4]
		accelCalibData.Z += (float)((int16_t)(buffer[4] << 8)|buffer[5]);
 8001a24:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <calibrationAccel+0x13c>)
 8001a26:	689c      	ldr	r4, [r3, #8]
 8001a28:	4b30      	ldr	r3, [pc, #192]	; (8001aec <calibrationAccel+0x138>)
 8001a2a:	791b      	ldrb	r3, [r3, #4]
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <calibrationAccel+0x138>)
 8001a34:	795b      	ldrb	r3, [r3, #5]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff f8f1 	bl	8000c20 <__aeabi_i2f>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4619      	mov	r1, r3
 8001a42:	4620      	mov	r0, r4
 8001a44:	f7ff f838 	bl	8000ab8 <__addsf3>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <calibrationAccel+0x13c>)
 8001a4e:	609a      	str	r2, [r3, #8]
		HAL_Delay(1);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f000 fa69 	bl	8001f28 <HAL_Delay>
		cycle++;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	607b      	str	r3, [r7, #4]
	while (cycle < MPU6050_CALIB_CYCLES){
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2bc7      	cmp	r3, #199	; 0xc7
 8001a60:	d9ae      	bls.n	80019c0 <calibrationAccel+0xc>
	}

	accelCalibData.X = accelCalibData.X / MPU6050_CALIB_CYCLES;
 8001a62:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <calibrationAccel+0x13c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4923      	ldr	r1, [pc, #140]	; (8001af4 <calibrationAccel+0x140>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff f9e1 	bl	8000e30 <__aeabi_fdiv>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <calibrationAccel+0x13c>)
 8001a74:	601a      	str	r2, [r3, #0]
	accelCalibData.Y = accelCalibData.Y / MPU6050_CALIB_CYCLES;
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <calibrationAccel+0x13c>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	491e      	ldr	r1, [pc, #120]	; (8001af4 <calibrationAccel+0x140>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff f9d7 	bl	8000e30 <__aeabi_fdiv>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <calibrationAccel+0x13c>)
 8001a88:	605a      	str	r2, [r3, #4]
	accelCalibData.Z = accelCalibData.Z / MPU6050_CALIB_CYCLES;
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <calibrationAccel+0x13c>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	4919      	ldr	r1, [pc, #100]	; (8001af4 <calibrationAccel+0x140>)
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f9cd 	bl	8000e30 <__aeabi_fdiv>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <calibrationAccel+0x13c>)
 8001a9c:	609a      	str	r2, [r3, #8]
	if (accelCalibData.Z < 0) {
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <calibrationAccel+0x13c>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff faac 	bl	8001004 <__aeabi_fcmplt>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00c      	beq.n	8001acc <calibrationAccel+0x118>
		accelCalibData.Z += accelScale;
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <calibrationAccel+0x13c>)
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <calibrationAccel+0x144>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4619      	mov	r1, r3
 8001abc:	4610      	mov	r0, r2
 8001abe:	f7fe fffb 	bl	8000ab8 <__addsf3>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <calibrationAccel+0x13c>)
 8001ac8:	609a      	str	r2, [r3, #8]
	} else {
		accelCalibData.Z -= accelScale;
	}
}
 8001aca:	e00b      	b.n	8001ae4 <calibrationAccel+0x130>
		accelCalibData.Z -= accelScale;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <calibrationAccel+0x13c>)
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <calibrationAccel+0x144>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f7fe ffec 	bl	8000ab4 <__aeabi_fsub>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <calibrationAccel+0x13c>)
 8001ae2:	609a      	str	r2, [r3, #8]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd90      	pop	{r4, r7, pc}
 8001aec:	20000204 	.word	0x20000204
 8001af0:	20000490 	.word	0x20000490
 8001af4:	43480000 	.word	0x43480000
 8001af8:	200004b0 	.word	0x200004b0

08001afc <calibrationGyro>:

void calibrationGyro(void){
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
	uint32_t cycle = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
	while (cycle < MPU6050_CALIB_CYCLES){
 8001b06:	e04d      	b.n	8001ba4 <calibrationGyro+0xa8>
		I2C_ReadBuffer(MPU6050_I2C_ADDRESS, MPU6050_GYRO_XOUT_H, buffer, 6);
 8001b08:	2306      	movs	r3, #6
 8001b0a:	4a39      	ldr	r2, [pc, #228]	; (8001bf0 <calibrationGyro+0xf4>)
 8001b0c:	2143      	movs	r1, #67	; 0x43
 8001b0e:	2068      	movs	r0, #104	; 0x68
 8001b10:	f7ff fd08 	bl	8001524 <I2C_ReadBuffer>
		gyroCalibData.X += (float)((int16_t)(buffer[0] << 8)|buffer[1]);
 8001b14:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <calibrationGyro+0xf8>)
 8001b16:	681c      	ldr	r4, [r3, #0]
 8001b18:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <calibrationGyro+0xf4>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <calibrationGyro+0xf4>)
 8001b24:	785b      	ldrb	r3, [r3, #1]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff f879 	bl	8000c20 <__aeabi_i2f>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4619      	mov	r1, r3
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7fe ffc0 	bl	8000ab8 <__addsf3>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <calibrationGyro+0xf8>)
 8001b3e:	601a      	str	r2, [r3, #0]
		gyroCalibData.Y += (float)((int16_t)(buffer[2] << 8)|buffer[3]);
 8001b40:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <calibrationGyro+0xf8>)
 8001b42:	685c      	ldr	r4, [r3, #4]
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <calibrationGyro+0xf4>)
 8001b46:	789b      	ldrb	r3, [r3, #2]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <calibrationGyro+0xf4>)
 8001b50:	78db      	ldrb	r3, [r3, #3]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff f863 	bl	8000c20 <__aeabi_i2f>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7fe ffaa 	bl	8000ab8 <__addsf3>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <calibrationGyro+0xf8>)
 8001b6a:	605a      	str	r2, [r3, #4]
		gyroCalibData.Z += (float)((int16_t)(buffer[4] << 8)|buffer[5]);
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <calibrationGyro+0xf8>)
 8001b6e:	689c      	ldr	r4, [r3, #8]
 8001b70:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <calibrationGyro+0xf4>)
 8001b72:	791b      	ldrb	r3, [r3, #4]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <calibrationGyro+0xf4>)
 8001b7c:	795b      	ldrb	r3, [r3, #5]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f84d 	bl	8000c20 <__aeabi_i2f>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7fe ff94 	bl	8000ab8 <__addsf3>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <calibrationGyro+0xf8>)
 8001b96:	609a      	str	r2, [r3, #8]
		HAL_Delay(1);
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f000 f9c5 	bl	8001f28 <HAL_Delay>
		cycle++;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
	while (cycle < MPU6050_CALIB_CYCLES){
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2bc7      	cmp	r3, #199	; 0xc7
 8001ba8:	d9ae      	bls.n	8001b08 <calibrationGyro+0xc>
	}

	gyroCalibData.X = gyroCalibData.X / MPU6050_CALIB_CYCLES;
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <calibrationGyro+0xf8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4912      	ldr	r1, [pc, #72]	; (8001bf8 <calibrationGyro+0xfc>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f93d 	bl	8000e30 <__aeabi_fdiv>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <calibrationGyro+0xf8>)
 8001bbc:	601a      	str	r2, [r3, #0]
	gyroCalibData.Y = gyroCalibData.Y / MPU6050_CALIB_CYCLES;
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <calibrationGyro+0xf8>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	490d      	ldr	r1, [pc, #52]	; (8001bf8 <calibrationGyro+0xfc>)
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f933 	bl	8000e30 <__aeabi_fdiv>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <calibrationGyro+0xf8>)
 8001bd0:	605a      	str	r2, [r3, #4]
	gyroCalibData.Z = gyroCalibData.Z / MPU6050_CALIB_CYCLES;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <calibrationGyro+0xf8>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4908      	ldr	r1, [pc, #32]	; (8001bf8 <calibrationGyro+0xfc>)
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff f929 	bl	8000e30 <__aeabi_fdiv>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <calibrationGyro+0xf8>)
 8001be4:	609a      	str	r2, [r3, #8]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd90      	pop	{r4, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000204 	.word	0x20000204
 8001bf4:	200004a0 	.word	0x200004a0
 8001bf8:	43480000 	.word	0x43480000

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_MspInit+0x5c>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <HAL_MspInit+0x5c>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6193      	str	r3, [r2, #24]
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_MspInit+0x5c>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_MspInit+0x5c>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <HAL_MspInit+0x5c>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	61d3      	str	r3, [r2, #28]
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_MspInit+0x5c>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_MspInit+0x60>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_MspInit+0x60>)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010000 	.word	0x40010000

08001c60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a15      	ldr	r2, [pc, #84]	; (8001cd0 <HAL_I2C_MspInit+0x70>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d123      	bne.n	8001cc8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_I2C_MspInit+0x74>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a13      	ldr	r2, [pc, #76]	; (8001cd4 <HAL_I2C_MspInit+0x74>)
 8001c86:	f043 0308 	orr.w	r3, r3, #8
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_I2C_MspInit+0x74>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c98:	23c0      	movs	r3, #192	; 0xc0
 8001c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c9c:	2312      	movs	r3, #18
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480b      	ldr	r0, [pc, #44]	; (8001cd8 <HAL_I2C_MspInit+0x78>)
 8001cac:	f000 fa6c 	bl	8002188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_I2C_MspInit+0x74>)
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_I2C_MspInit+0x74>)
 8001cb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cba:	61d3      	str	r3, [r2, #28]
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_I2C_MspInit+0x74>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40005400 	.word	0x40005400
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010c00 	.word	0x40010c00

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf2:	4802      	ldr	r0, [pc, #8]	; (8001cfc <HardFault_Handler+0x14>)
 8001cf4:	f000 fba2 	bl	800243c <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <HardFault_Handler+0x10>
 8001cfa:	bf00      	nop
 8001cfc:	40011000 	.word	0x40011000

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <MemManage_Handler+0x4>

08001d06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <BusFault_Handler+0x4>

08001d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <UsageFault_Handler+0x4>

08001d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d3a:	f000 f8d9 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d4a:	f001 fc00 	bl	800354e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000114c 	.word	0x2000114c

08001d58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <_sbrk+0x50>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x16>
		heap_end = &end;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <_sbrk+0x50>)
 8001d6a:	4a10      	ldr	r2, [pc, #64]	; (8001dac <_sbrk+0x54>)
 8001d6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <_sbrk+0x50>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <_sbrk+0x50>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	466a      	mov	r2, sp
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d907      	bls.n	8001d92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d82:	f005 ffc3 	bl	8007d0c <__errno>
 8001d86:	4602      	mov	r2, r0
 8001d88:	230c      	movs	r3, #12
 8001d8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d90:	e006      	b.n	8001da0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <_sbrk+0x50>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a03      	ldr	r2, [pc, #12]	; (8001da8 <_sbrk+0x50>)
 8001d9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	2000020c 	.word	0x2000020c
 8001dac:	200013c0 	.word	0x200013c0

08001db0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <SystemInit+0x5c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <SystemInit+0x5c>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <SystemInit+0x5c>)
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4911      	ldr	r1, [pc, #68]	; (8001e0c <SystemInit+0x5c>)
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <SystemInit+0x60>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <SystemInit+0x5c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <SystemInit+0x5c>)
 8001dd2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dda:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <SystemInit+0x5c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <SystemInit+0x5c>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <SystemInit+0x5c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <SystemInit+0x5c>)
 8001dee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001df2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <SystemInit+0x5c>)
 8001df6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001dfa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <SystemInit+0x64>)
 8001dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e02:	609a      	str	r2, [r3, #8]
#endif 
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	f8ff0000 	.word	0xf8ff0000
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e18:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e1a:	e003      	b.n	8001e24 <LoopCopyDataInit>

08001e1c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e1e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e20:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e22:	3104      	adds	r1, #4

08001e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e24:	480a      	ldr	r0, [pc, #40]	; (8001e50 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e28:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e2a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e2c:	d3f6      	bcc.n	8001e1c <CopyDataInit>
  ldr r2, =_sbss
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e30:	e002      	b.n	8001e38 <LoopFillZerobss>

08001e32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e34:	f842 3b04 	str.w	r3, [r2], #4

08001e38 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e3a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e3c:	d3f9      	bcc.n	8001e32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e3e:	f7ff ffb7 	bl	8001db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f005 ff69 	bl	8007d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e46:	f7ff f941 	bl	80010cc <main>
  bx lr
 8001e4a:	4770      	bx	lr
  ldr r3, =_sidata
 8001e4c:	08008a10 	.word	0x08008a10
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e54:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8001e58:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8001e5c:	200013bc 	.word	0x200013bc

08001e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e60:	e7fe      	b.n	8001e60 <ADC1_2_IRQHandler>
	...

08001e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_Init+0x28>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_Init+0x28>)
 8001e6e:	f043 0310 	orr.w	r3, r3, #16
 8001e72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 f945 	bl	8002104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f808 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff febc 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40022000 	.word	0x40022000

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_InitTick+0x54>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_InitTick+0x58>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f95d 	bl	800216e <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00e      	b.n	8001edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d80a      	bhi.n	8001eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ecc:	f000 f925 	bl	800211a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed0:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_InitTick+0x5c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	20000004 	.word	0x20000004

08001ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_IncTick+0x1c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_IncTick+0x20>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <HAL_IncTick+0x20>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	200004b4 	.word	0x200004b4

08001f14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return uwTick;
 8001f18:	4b02      	ldr	r3, [pc, #8]	; (8001f24 <HAL_GetTick+0x10>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	200004b4 	.word	0x200004b4

08001f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff fff0 	bl	8001f14 <HAL_GetTick>
 8001f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f40:	d005      	beq.n	8001f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_Delay+0x40>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f4e:	bf00      	nop
 8001f50:	f7ff ffe0 	bl	8001f14 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d8f7      	bhi.n	8001f50 <HAL_Delay+0x28>
  {
  }
}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000008 	.word	0x20000008

08001f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <__NVIC_GetPriorityGrouping+0x18>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	f003 0307 	and.w	r3, r3, #7
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	db0b      	blt.n	8001ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4906      	ldr	r1, [pc, #24]	; (8002004 <__NVIC_EnableIRQ+0x34>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100

08002008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db0a      	blt.n	8002032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	490c      	ldr	r1, [pc, #48]	; (8002054 <__NVIC_SetPriority+0x4c>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	0112      	lsls	r2, r2, #4
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	440b      	add	r3, r1
 800202c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002030:	e00a      	b.n	8002048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4908      	ldr	r1, [pc, #32]	; (8002058 <__NVIC_SetPriority+0x50>)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	3b04      	subs	r3, #4
 8002040:	0112      	lsls	r2, r2, #4
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	440b      	add	r3, r1
 8002046:	761a      	strb	r2, [r3, #24]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000e100 	.word	0xe000e100
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f1c3 0307 	rsb	r3, r3, #7
 8002076:	2b04      	cmp	r3, #4
 8002078:	bf28      	it	cs
 800207a:	2304      	movcs	r3, #4
 800207c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3304      	adds	r3, #4
 8002082:	2b06      	cmp	r3, #6
 8002084:	d902      	bls.n	800208c <NVIC_EncodePriority+0x30>
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3b03      	subs	r3, #3
 800208a:	e000      	b.n	800208e <NVIC_EncodePriority+0x32>
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	401a      	ands	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43d9      	mvns	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	4313      	orrs	r3, r2
         );
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d0:	d301      	bcc.n	80020d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00f      	b.n	80020f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <SysTick_Config+0x40>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020de:	210f      	movs	r1, #15
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020e4:	f7ff ff90 	bl	8002008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <SysTick_Config+0x40>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <SysTick_Config+0x40>)
 80020f0:	2207      	movs	r2, #7
 80020f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	e000e010 	.word	0xe000e010

08002104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff2d 	bl	8001f6c <__NVIC_SetPriorityGrouping>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800212c:	f7ff ff42 	bl	8001fb4 <__NVIC_GetPriorityGrouping>
 8002130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f7ff ff90 	bl	800205c <NVIC_EncodePriority>
 800213c:	4602      	mov	r2, r0
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff5f 	bl	8002008 <__NVIC_SetPriority>
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff35 	bl	8001fd0 <__NVIC_EnableIRQ>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ffa2 	bl	80020c0 <SysTick_Config>
 800217c:	4603      	mov	r3, r0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	b480      	push	{r7}
 800218a:	b08b      	sub	sp, #44	; 0x2c
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219a:	e127      	b.n	80023ec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800219c:	2201      	movs	r2, #1
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	f040 8116 	bne.w	80023e6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b12      	cmp	r3, #18
 80021c0:	d034      	beq.n	800222c <HAL_GPIO_Init+0xa4>
 80021c2:	2b12      	cmp	r3, #18
 80021c4:	d80d      	bhi.n	80021e2 <HAL_GPIO_Init+0x5a>
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d02b      	beq.n	8002222 <HAL_GPIO_Init+0x9a>
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d804      	bhi.n	80021d8 <HAL_GPIO_Init+0x50>
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d031      	beq.n	8002236 <HAL_GPIO_Init+0xae>
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d01c      	beq.n	8002210 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021d6:	e048      	b.n	800226a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d043      	beq.n	8002264 <HAL_GPIO_Init+0xdc>
 80021dc:	2b11      	cmp	r3, #17
 80021de:	d01b      	beq.n	8002218 <HAL_GPIO_Init+0x90>
          break;
 80021e0:	e043      	b.n	800226a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021e2:	4a89      	ldr	r2, [pc, #548]	; (8002408 <HAL_GPIO_Init+0x280>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d026      	beq.n	8002236 <HAL_GPIO_Init+0xae>
 80021e8:	4a87      	ldr	r2, [pc, #540]	; (8002408 <HAL_GPIO_Init+0x280>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d806      	bhi.n	80021fc <HAL_GPIO_Init+0x74>
 80021ee:	4a87      	ldr	r2, [pc, #540]	; (800240c <HAL_GPIO_Init+0x284>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d020      	beq.n	8002236 <HAL_GPIO_Init+0xae>
 80021f4:	4a86      	ldr	r2, [pc, #536]	; (8002410 <HAL_GPIO_Init+0x288>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01d      	beq.n	8002236 <HAL_GPIO_Init+0xae>
          break;
 80021fa:	e036      	b.n	800226a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021fc:	4a85      	ldr	r2, [pc, #532]	; (8002414 <HAL_GPIO_Init+0x28c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d019      	beq.n	8002236 <HAL_GPIO_Init+0xae>
 8002202:	4a85      	ldr	r2, [pc, #532]	; (8002418 <HAL_GPIO_Init+0x290>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d016      	beq.n	8002236 <HAL_GPIO_Init+0xae>
 8002208:	4a84      	ldr	r2, [pc, #528]	; (800241c <HAL_GPIO_Init+0x294>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_GPIO_Init+0xae>
          break;
 800220e:	e02c      	b.n	800226a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	623b      	str	r3, [r7, #32]
          break;
 8002216:	e028      	b.n	800226a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	3304      	adds	r3, #4
 800221e:	623b      	str	r3, [r7, #32]
          break;
 8002220:	e023      	b.n	800226a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	3308      	adds	r3, #8
 8002228:	623b      	str	r3, [r7, #32]
          break;
 800222a:	e01e      	b.n	800226a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	330c      	adds	r3, #12
 8002232:	623b      	str	r3, [r7, #32]
          break;
 8002234:	e019      	b.n	800226a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800223e:	2304      	movs	r3, #4
 8002240:	623b      	str	r3, [r7, #32]
          break;
 8002242:	e012      	b.n	800226a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d105      	bne.n	8002258 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800224c:	2308      	movs	r3, #8
 800224e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	611a      	str	r2, [r3, #16]
          break;
 8002256:	e008      	b.n	800226a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002258:	2308      	movs	r3, #8
 800225a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	615a      	str	r2, [r3, #20]
          break;
 8002262:	e002      	b.n	800226a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
          break;
 8002268:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2bff      	cmp	r3, #255	; 0xff
 800226e:	d801      	bhi.n	8002274 <HAL_GPIO_Init+0xec>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	e001      	b.n	8002278 <HAL_GPIO_Init+0xf0>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3304      	adds	r3, #4
 8002278:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2bff      	cmp	r3, #255	; 0xff
 800227e:	d802      	bhi.n	8002286 <HAL_GPIO_Init+0xfe>
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	e002      	b.n	800228c <HAL_GPIO_Init+0x104>
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	3b08      	subs	r3, #8
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	210f      	movs	r1, #15
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	401a      	ands	r2, r3
 800229e:	6a39      	ldr	r1, [r7, #32]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	431a      	orrs	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8096 	beq.w	80023e6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022ba:	4b59      	ldr	r3, [pc, #356]	; (8002420 <HAL_GPIO_Init+0x298>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	4a58      	ldr	r2, [pc, #352]	; (8002420 <HAL_GPIO_Init+0x298>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6193      	str	r3, [r2, #24]
 80022c6:	4b56      	ldr	r3, [pc, #344]	; (8002420 <HAL_GPIO_Init+0x298>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022d2:	4a54      	ldr	r2, [pc, #336]	; (8002424 <HAL_GPIO_Init+0x29c>)
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	089b      	lsrs	r3, r3, #2
 80022d8:	3302      	adds	r3, #2
 80022da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022de:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	220f      	movs	r2, #15
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4013      	ands	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4b      	ldr	r2, [pc, #300]	; (8002428 <HAL_GPIO_Init+0x2a0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_GPIO_Init+0x19e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4a      	ldr	r2, [pc, #296]	; (800242c <HAL_GPIO_Init+0x2a4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00d      	beq.n	8002322 <HAL_GPIO_Init+0x19a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a49      	ldr	r2, [pc, #292]	; (8002430 <HAL_GPIO_Init+0x2a8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <HAL_GPIO_Init+0x196>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a48      	ldr	r2, [pc, #288]	; (8002434 <HAL_GPIO_Init+0x2ac>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_GPIO_Init+0x192>
 8002316:	2303      	movs	r3, #3
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x1a0>
 800231a:	2304      	movs	r3, #4
 800231c:	e004      	b.n	8002328 <HAL_GPIO_Init+0x1a0>
 800231e:	2302      	movs	r3, #2
 8002320:	e002      	b.n	8002328 <HAL_GPIO_Init+0x1a0>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_GPIO_Init+0x1a0>
 8002326:	2300      	movs	r3, #0
 8002328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232a:	f002 0203 	and.w	r2, r2, #3
 800232e:	0092      	lsls	r2, r2, #2
 8002330:	4093      	lsls	r3, r2
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002338:	493a      	ldr	r1, [pc, #232]	; (8002424 <HAL_GPIO_Init+0x29c>)
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	089b      	lsrs	r3, r3, #2
 800233e:	3302      	adds	r3, #2
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002352:	4b39      	ldr	r3, [pc, #228]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4938      	ldr	r1, [pc, #224]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
 800235e:	e006      	b.n	800236e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002360:	4b35      	ldr	r3, [pc, #212]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	43db      	mvns	r3, r3
 8002368:	4933      	ldr	r1, [pc, #204]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 800236a:	4013      	ands	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d006      	beq.n	8002388 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800237a:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	492e      	ldr	r1, [pc, #184]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
 8002386:	e006      	b.n	8002396 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002388:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	43db      	mvns	r3, r3
 8002390:	4929      	ldr	r1, [pc, #164]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 8002392:	4013      	ands	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023a2:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	4924      	ldr	r1, [pc, #144]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
 80023ae:	e006      	b.n	80023be <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	491f      	ldr	r1, [pc, #124]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023ca:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	491a      	ldr	r1, [pc, #104]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60cb      	str	r3, [r1, #12]
 80023d6:	e006      	b.n	80023e6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	43db      	mvns	r3, r3
 80023e0:	4915      	ldr	r1, [pc, #84]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	3301      	adds	r3, #1
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	fa22 f303 	lsr.w	r3, r2, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f47f aed0 	bne.w	800219c <HAL_GPIO_Init+0x14>
  }
}
 80023fc:	bf00      	nop
 80023fe:	372c      	adds	r7, #44	; 0x2c
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	10210000 	.word	0x10210000
 800240c:	10110000 	.word	0x10110000
 8002410:	10120000 	.word	0x10120000
 8002414:	10310000 	.word	0x10310000
 8002418:	10320000 	.word	0x10320000
 800241c:	10220000 	.word	0x10220000
 8002420:	40021000 	.word	0x40021000
 8002424:	40010000 	.word	0x40010000
 8002428:	40010800 	.word	0x40010800
 800242c:	40010c00 	.word	0x40010c00
 8002430:	40011000 	.word	0x40011000
 8002434:	40011400 	.word	0x40011400
 8002438:	40010400 	.word	0x40010400

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800244c:	787b      	ldrb	r3, [r7, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002458:	e003      	b.n	8002462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	041a      	lsls	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	611a      	str	r2, [r3, #16]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e10f      	b.n	800269e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff fbe4 	bl	8001c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	; 0x24
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024b0:	f002 f9fe 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 80024b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a7b      	ldr	r2, [pc, #492]	; (80026a8 <HAL_I2C_Init+0x23c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d807      	bhi.n	80024d0 <HAL_I2C_Init+0x64>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a7a      	ldr	r2, [pc, #488]	; (80026ac <HAL_I2C_Init+0x240>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	bf94      	ite	ls
 80024c8:	2301      	movls	r3, #1
 80024ca:	2300      	movhi	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e006      	b.n	80024de <HAL_I2C_Init+0x72>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a77      	ldr	r2, [pc, #476]	; (80026b0 <HAL_I2C_Init+0x244>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	bf94      	ite	ls
 80024d8:	2301      	movls	r3, #1
 80024da:	2300      	movhi	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0db      	b.n	800269e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a72      	ldr	r2, [pc, #456]	; (80026b4 <HAL_I2C_Init+0x248>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9b      	lsrs	r3, r3, #18
 80024f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a64      	ldr	r2, [pc, #400]	; (80026a8 <HAL_I2C_Init+0x23c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d802      	bhi.n	8002520 <HAL_I2C_Init+0xb4>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3301      	adds	r3, #1
 800251e:	e009      	b.n	8002534 <HAL_I2C_Init+0xc8>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	4a63      	ldr	r2, [pc, #396]	; (80026b8 <HAL_I2C_Init+0x24c>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	3301      	adds	r3, #1
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002546:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4956      	ldr	r1, [pc, #344]	; (80026a8 <HAL_I2C_Init+0x23c>)
 8002550:	428b      	cmp	r3, r1
 8002552:	d80d      	bhi.n	8002570 <HAL_I2C_Init+0x104>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e59      	subs	r1, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002568:	2b04      	cmp	r3, #4
 800256a:	bf38      	it	cc
 800256c:	2304      	movcc	r3, #4
 800256e:	e04f      	b.n	8002610 <HAL_I2C_Init+0x1a4>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d111      	bne.n	800259c <HAL_I2C_Init+0x130>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1e58      	subs	r0, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	440b      	add	r3, r1
 8002586:	fbb0 f3f3 	udiv	r3, r0, r3
 800258a:	3301      	adds	r3, #1
 800258c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	e012      	b.n	80025c2 <HAL_I2C_Init+0x156>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1e58      	subs	r0, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	0099      	lsls	r1, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_I2C_Init+0x15e>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e022      	b.n	8002610 <HAL_I2C_Init+0x1a4>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10e      	bne.n	80025f0 <HAL_I2C_Init+0x184>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1e58      	subs	r0, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	440b      	add	r3, r1
 80025e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e4:	3301      	adds	r3, #1
 80025e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ee:	e00f      	b.n	8002610 <HAL_I2C_Init+0x1a4>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1e58      	subs	r0, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	0099      	lsls	r1, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	fbb0 f3f3 	udiv	r3, r0, r3
 8002606:	3301      	adds	r3, #1
 8002608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	6809      	ldr	r1, [r1, #0]
 8002614:	4313      	orrs	r3, r2
 8002616:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800263e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6911      	ldr	r1, [r2, #16]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68d2      	ldr	r2, [r2, #12]
 800264a:	4311      	orrs	r1, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	430b      	orrs	r3, r1
 8002652:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	000186a0 	.word	0x000186a0
 80026ac:	001e847f 	.word	0x001e847f
 80026b0:	003d08ff 	.word	0x003d08ff
 80026b4:	431bde83 	.word	0x431bde83
 80026b8:	10624dd3 	.word	0x10624dd3

080026bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	461a      	mov	r2, r3
 80026c8:	460b      	mov	r3, r1
 80026ca:	817b      	strh	r3, [r7, #10]
 80026cc:	4613      	mov	r3, r2
 80026ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff fc20 	bl	8001f14 <HAL_GetTick>
 80026d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b20      	cmp	r3, #32
 80026e0:	f040 80e0 	bne.w	80028a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	2319      	movs	r3, #25
 80026ea:	2201      	movs	r2, #1
 80026ec:	4970      	ldr	r1, [pc, #448]	; (80028b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fc4a 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026fa:	2302      	movs	r3, #2
 80026fc:	e0d3      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_I2C_Master_Transmit+0x50>
 8002708:	2302      	movs	r3, #2
 800270a:	e0cc      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d007      	beq.n	8002732 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002740:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2221      	movs	r2, #33	; 0x21
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2210      	movs	r2, #16
 800274e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	893a      	ldrh	r2, [r7, #8]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4a50      	ldr	r2, [pc, #320]	; (80028b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002772:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002774:	8979      	ldrh	r1, [r7, #10]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	6a3a      	ldr	r2, [r7, #32]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fad8 	bl	8002d30 <I2C_MasterRequestWrite>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e08d      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027a0:	e066      	b.n	8002870 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	6a39      	ldr	r1, [r7, #32]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fcc4 	bl	8003134 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00d      	beq.n	80027ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d107      	bne.n	80027ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e06b      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b04      	cmp	r3, #4
 800280a:	d11b      	bne.n	8002844 <HAL_I2C_Master_Transmit+0x188>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d017      	beq.n	8002844 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	6a39      	ldr	r1, [r7, #32]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fcb4 	bl	80031b6 <I2C_WaitOnBTFFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00d      	beq.n	8002870 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	2b04      	cmp	r3, #4
 800285a:	d107      	bne.n	800286c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e01a      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d194      	bne.n	80027a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
  }
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	00100002 	.word	0x00100002
 80028b4:	ffff0000 	.word	0xffff0000

080028b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	; 0x30
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	461a      	mov	r2, r3
 80028c4:	460b      	mov	r3, r1
 80028c6:	817b      	strh	r3, [r7, #10]
 80028c8:	4613      	mov	r3, r2
 80028ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff fb22 	bl	8001f14 <HAL_GetTick>
 80028d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b20      	cmp	r3, #32
 80028dc:	f040 8213 	bne.w	8002d06 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2319      	movs	r3, #25
 80028e6:	2201      	movs	r2, #1
 80028e8:	497e      	ldr	r1, [pc, #504]	; (8002ae4 <HAL_I2C_Master_Receive+0x22c>)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fb4c 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
 80028f8:	e206      	b.n	8002d08 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_I2C_Master_Receive+0x50>
 8002904:	2302      	movs	r3, #2
 8002906:	e1ff      	b.n	8002d08 <HAL_I2C_Master_Receive+0x450>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b01      	cmp	r3, #1
 800291c:	d007      	beq.n	800292e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800293c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2222      	movs	r2, #34	; 0x22
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2210      	movs	r2, #16
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	893a      	ldrh	r2, [r7, #8]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4a5e      	ldr	r2, [pc, #376]	; (8002ae8 <HAL_I2C_Master_Receive+0x230>)
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002970:	8979      	ldrh	r1, [r7, #10]
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fa50 	bl	8002e1c <I2C_MasterRequestRead>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e1c0      	b.n	8002d08 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	2b00      	cmp	r3, #0
 800298c:	d113      	bne.n	80029b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	623b      	str	r3, [r7, #32]
 80029a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e194      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d11d      	bne.n	80029fa <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029cc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029ce:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029f6:	b662      	cpsie	i
 80029f8:	e172      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d11d      	bne.n	8002a3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a12:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a3a:	b662      	cpsie	i
 8002a3c:	e150      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a64:	e13c      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	f200 80f5 	bhi.w	8002c5a <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d123      	bne.n	8002ac0 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 fbdb 	bl	8003238 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e13d      	b.n	8002d08 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002abe:	e10f      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d150      	bne.n	8002b6a <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	2200      	movs	r2, #0
 8002ad0:	4906      	ldr	r1, [pc, #24]	; (8002aec <HAL_I2C_Master_Receive+0x234>)
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fa58 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e112      	b.n	8002d08 <HAL_I2C_Master_Receive+0x450>
 8002ae2:	bf00      	nop
 8002ae4:	00100002 	.word	0x00100002
 8002ae8:	ffff0000 	.word	0xffff0000
 8002aec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002af0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b00:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b34:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b68:	e0ba      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	2200      	movs	r2, #0
 8002b72:	4967      	ldr	r1, [pc, #412]	; (8002d10 <HAL_I2C_Master_Receive+0x458>)
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fa07 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0c1      	b.n	8002d08 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b94:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	2200      	movs	r2, #0
 8002bd0:	494f      	ldr	r1, [pc, #316]	; (8002d10 <HAL_I2C_Master_Receive+0x458>)
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f9d8 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e092      	b.n	8002d08 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c24:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c58:	e042      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 faea 	bl	8003238 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e04c      	b.n	8002d08 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d118      	bne.n	8002ce0 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f47f aebe 	bne.w	8002a66 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3728      	adds	r7, #40	; 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	00010004 	.word	0x00010004

08002d14 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d22:	b2db      	uxtb	r3, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
	...

08002d30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d006      	beq.n	8002d5a <I2C_MasterRequestWrite+0x2a>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d003      	beq.n	8002d5a <I2C_MasterRequestWrite+0x2a>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d58:	d108      	bne.n	8002d6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e00b      	b.n	8002d84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	2b12      	cmp	r3, #18
 8002d72:	d107      	bne.n	8002d84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f8f9 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e035      	b.n	8002e0c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da8:	d108      	bne.n	8002dbc <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002daa:	897b      	ldrh	r3, [r7, #10]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002db8:	611a      	str	r2, [r3, #16]
 8002dba:	e01b      	b.n	8002df4 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dbc:	897b      	ldrh	r3, [r7, #10]
 8002dbe:	11db      	asrs	r3, r3, #7
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 0306 	and.w	r3, r3, #6
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f063 030f 	orn	r3, r3, #15
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	490e      	ldr	r1, [pc, #56]	; (8002e14 <I2C_MasterRequestWrite+0xe4>)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f92b 	bl	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e010      	b.n	8002e0c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dea:	897b      	ldrh	r3, [r7, #10]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4907      	ldr	r1, [pc, #28]	; (8002e18 <I2C_MasterRequestWrite+0xe8>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f91b 	bl	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	00010008 	.word	0x00010008
 8002e18:	00010002 	.word	0x00010002

08002e1c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e40:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d006      	beq.n	8002e56 <I2C_MasterRequestRead+0x3a>
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d003      	beq.n	8002e56 <I2C_MasterRequestRead+0x3a>
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e54:	d108      	bne.n	8002e68 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	e00b      	b.n	8002e80 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	2b11      	cmp	r3, #17
 8002e6e:	d107      	bne.n	8002e80 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f87b 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e06d      	b.n	8002f78 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea4:	d108      	bne.n	8002eb8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ea6:	897b      	ldrh	r3, [r7, #10]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	611a      	str	r2, [r3, #16]
 8002eb6:	e053      	b.n	8002f60 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002eb8:	897b      	ldrh	r3, [r7, #10]
 8002eba:	11db      	asrs	r3, r3, #7
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f003 0306 	and.w	r3, r3, #6
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f063 030f 	orn	r3, r3, #15
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	492a      	ldr	r1, [pc, #168]	; (8002f80 <I2C_MasterRequestRead+0x164>)
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f8ad 	bl	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e048      	b.n	8002f78 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ee6:	897b      	ldrh	r3, [r7, #10]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4923      	ldr	r1, [pc, #140]	; (8002f84 <I2C_MasterRequestRead+0x168>)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f89d 	bl	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e038      	b.n	8002f78 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f825 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e017      	b.n	8002f78 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f48:	897b      	ldrh	r3, [r7, #10]
 8002f4a:	11db      	asrs	r3, r3, #7
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f003 0306 	and.w	r3, r3, #6
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f063 030e 	orn	r3, r3, #14
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4907      	ldr	r1, [pc, #28]	; (8002f84 <I2C_MasterRequestRead+0x168>)
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f865 	bl	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	00010008 	.word	0x00010008
 8002f84:	00010002 	.word	0x00010002

08002f88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f98:	e025      	b.n	8002fe6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa0:	d021      	beq.n	8002fe6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa2:	f7fe ffb7 	bl	8001f14 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d302      	bcc.n	8002fb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d116      	bne.n	8002fe6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f043 0220 	orr.w	r2, r3, #32
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e023      	b.n	800302e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	0c1b      	lsrs	r3, r3, #16
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d10d      	bne.n	800300c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	e00c      	b.n	8003026 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4013      	ands	r3, r2
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	bf0c      	ite	eq
 800301e:	2301      	moveq	r3, #1
 8003020:	2300      	movne	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	429a      	cmp	r2, r3
 800302a:	d0b6      	beq.n	8002f9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003044:	e051      	b.n	80030ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003054:	d123      	bne.n	800309e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003064:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800306e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f043 0204 	orr.w	r2, r3, #4
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e046      	b.n	800312c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030a4:	d021      	beq.n	80030ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a6:	f7fe ff35 	bl	8001f14 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d302      	bcc.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d116      	bne.n	80030ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f043 0220 	orr.w	r2, r3, #32
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e020      	b.n	800312c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	0c1b      	lsrs	r3, r3, #16
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d10c      	bne.n	800310e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	43da      	mvns	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4013      	ands	r3, r2
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	bf14      	ite	ne
 8003106:	2301      	movne	r3, #1
 8003108:	2300      	moveq	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	e00b      	b.n	8003126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	43da      	mvns	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4013      	ands	r3, r2
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d18d      	bne.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003140:	e02d      	b.n	800319e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f8ce 	bl	80032e4 <I2C_IsAcknowledgeFailed>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e02d      	b.n	80031ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003158:	d021      	beq.n	800319e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7fe fedb 	bl	8001f14 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	429a      	cmp	r2, r3
 8003168:	d302      	bcc.n	8003170 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d116      	bne.n	800319e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f043 0220 	orr.w	r2, r3, #32
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e007      	b.n	80031ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	2b80      	cmp	r3, #128	; 0x80
 80031aa:	d1ca      	bne.n	8003142 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031c2:	e02d      	b.n	8003220 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f88d 	bl	80032e4 <I2C_IsAcknowledgeFailed>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e02d      	b.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031da:	d021      	beq.n	8003220 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031dc:	f7fe fe9a 	bl	8001f14 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d302      	bcc.n	80031f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d116      	bne.n	8003220 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f043 0220 	orr.w	r2, r3, #32
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e007      	b.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b04      	cmp	r3, #4
 800322c:	d1ca      	bne.n	80031c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003244:	e042      	b.n	80032cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b10      	cmp	r3, #16
 8003252:	d119      	bne.n	8003288 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0210 	mvn.w	r2, #16
 800325c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e029      	b.n	80032dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003288:	f7fe fe44 	bl	8001f14 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	429a      	cmp	r2, r3
 8003296:	d302      	bcc.n	800329e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d116      	bne.n	80032cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e007      	b.n	80032dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d1b5      	bne.n	8003246 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fa:	d11b      	bne.n	8003334 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003304:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f043 0204 	orr.w	r2, r3, #4
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003342:	b08b      	sub	sp, #44	; 0x2c
 8003344:	af06      	add	r7, sp, #24
 8003346:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0d3      	b.n	80034fa <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f004 fa32 	bl	80077d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2203      	movs	r2, #3
 8003370:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f001 fba8 	bl	8004ace <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	687e      	ldr	r6, [r7, #4]
 8003386:	466d      	mov	r5, sp
 8003388:	f106 0410 	add.w	r4, r6, #16
 800338c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800338e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	602b      	str	r3, [r5, #0]
 8003394:	1d33      	adds	r3, r6, #4
 8003396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003398:	6838      	ldr	r0, [r7, #0]
 800339a:	f001 fb71 	bl	8004a80 <USB_CoreInit>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0a4      	b.n	80034fa <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 fba5 	bl	8004b06 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033bc:	2300      	movs	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]
 80033c0:	e035      	b.n	800342e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	015b      	lsls	r3, r3, #5
 80033c8:	4413      	add	r3, r2
 80033ca:	3329      	adds	r3, #41	; 0x29
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	015b      	lsls	r3, r3, #5
 80033d6:	4413      	add	r3, r2
 80033d8:	3328      	adds	r3, #40	; 0x28
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	7bfa      	ldrb	r2, [r7, #15]
 80033e2:	b291      	uxth	r1, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	015b      	lsls	r3, r3, #5
 80033e8:	4413      	add	r3, r2
 80033ea:	3336      	adds	r3, #54	; 0x36
 80033ec:	460a      	mov	r2, r1
 80033ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	015b      	lsls	r3, r3, #5
 80033f6:	4413      	add	r3, r2
 80033f8:	332b      	adds	r3, #43	; 0x2b
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	015b      	lsls	r3, r3, #5
 8003404:	4413      	add	r3, r2
 8003406:	3338      	adds	r3, #56	; 0x38
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	015b      	lsls	r3, r3, #5
 8003412:	4413      	add	r3, r2
 8003414:	333c      	adds	r3, #60	; 0x3c
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	3302      	adds	r3, #2
 8003420:	015b      	lsls	r3, r3, #5
 8003422:	4413      	add	r3, r2
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	3301      	adds	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	429a      	cmp	r2, r3
 8003436:	d3c4      	bcc.n	80033c2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	e031      	b.n	80034a2 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	015b      	lsls	r3, r3, #5
 8003444:	4413      	add	r3, r2
 8003446:	f203 1329 	addw	r3, r3, #297	; 0x129
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	015b      	lsls	r3, r3, #5
 8003454:	4413      	add	r3, r2
 8003456:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	015b      	lsls	r3, r3, #5
 8003464:	4413      	add	r3, r2
 8003466:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	015b      	lsls	r3, r3, #5
 8003474:	4413      	add	r3, r2
 8003476:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	015b      	lsls	r3, r3, #5
 8003484:	4413      	add	r3, r2
 8003486:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	330a      	adds	r3, #10
 8003494:	015b      	lsls	r3, r3, #5
 8003496:	4413      	add	r3, r2
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	3301      	adds	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d3c8      	bcc.n	800343e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	687e      	ldr	r6, [r7, #4]
 80034b4:	466d      	mov	r5, sp
 80034b6:	f106 0410 	add.w	r4, r6, #16
 80034ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	602b      	str	r3, [r5, #0]
 80034c2:	1d33      	adds	r3, r6, #4
 80034c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c6:	6838      	ldr	r0, [r7, #0]
 80034c8:	f001 fb29 	bl	8004b1e <USB_DevInit>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e00d      	b.n	80034fa <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f002 fb67 	bl	8005bc6 <USB_DevDisconnect>

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003502 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_PCD_Start+0x16>
 8003514:	2302      	movs	r3, #2
 8003516:	e016      	b.n	8003546 <HAL_PCD_Start+0x44>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003520:	2101      	movs	r1, #1
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f004 fbbb 	bl	8007c9e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f002 fb40 	bl	8005bb2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f001 fab2 	bl	8004aa0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f002 fb3d 	bl	8005bda <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356a:	d102      	bne.n	8003572 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 faf3 	bl	8003b58 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f002 fb2f 	bl	8005bda <USB_ReadInterrupts>
 800357c:	4603      	mov	r3, r0
 800357e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003586:	d112      	bne.n	80035ae <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003590:	b29a      	uxth	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359a:	b292      	uxth	r2, r2
 800359c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f004 f98a 	bl	80078ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80035a6:	2100      	movs	r1, #0
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f8de 	bl	800376a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f002 fb11 	bl	8005bda <USB_ReadInterrupts>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035c2:	d10b      	bne.n	80035dc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035d6:	b292      	uxth	r2, r2
 80035d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f002 fafa 	bl	8005bda <USB_ReadInterrupts>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f0:	d10b      	bne.n	800360a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003604:	b292      	uxth	r2, r2
 8003606:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f002 fae3 	bl	8005bda <USB_ReadInterrupts>
 8003614:	4603      	mov	r3, r0
 8003616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800361a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361e:	d126      	bne.n	800366e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0204 	bic.w	r2, r2, #4
 8003632:	b292      	uxth	r2, r2
 8003634:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0208 	bic.w	r2, r2, #8
 800364a:	b292      	uxth	r2, r2
 800364c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f004 f96b 	bl	800792c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800365e:	b29a      	uxth	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003668:	b292      	uxth	r2, r2
 800366a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f002 fab1 	bl	8005bda <USB_ReadInterrupts>
 8003678:	4603      	mov	r3, r0
 800367a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003682:	d13d      	bne.n	8003700 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800368c:	b29a      	uxth	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0208 	orr.w	r2, r2, #8
 8003696:	b292      	uxth	r2, r2
 8003698:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ae:	b292      	uxth	r2, r2
 80036b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036bc:	b29a      	uxth	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0204 	orr.w	r2, r2, #4
 80036c6:	b292      	uxth	r2, r2
 80036c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f002 fa82 	bl	8005bda <USB_ReadInterrupts>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e0:	d10b      	bne.n	80036fa <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036f4:	b292      	uxth	r2, r2
 80036f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f004 f8fc 	bl	80078f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f002 fa68 	bl	8005bda <USB_ReadInterrupts>
 800370a:	4603      	mov	r3, r0
 800370c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003714:	d10e      	bne.n	8003734 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800371e:	b29a      	uxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003728:	b292      	uxth	r2, r2
 800372a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f004 f8b5 	bl	800789e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f002 fa4e 	bl	8005bda <USB_ReadInterrupts>
 800373e:	4603      	mov	r3, r0
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003748:	d10b      	bne.n	8003762 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800375c:	b292      	uxth	r2, r2
 800375e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	460b      	mov	r3, r1
 8003774:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_PCD_SetAddress+0x1a>
 8003780:	2302      	movs	r3, #2
 8003782:	e013      	b.n	80037ac <HAL_PCD_SetAddress+0x42>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f002 f9f5 	bl	8005b8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	4608      	mov	r0, r1
 80037be:	4611      	mov	r1, r2
 80037c0:	461a      	mov	r2, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	70fb      	strb	r3, [r7, #3]
 80037c6:	460b      	mov	r3, r1
 80037c8:	803b      	strh	r3, [r7, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	da0b      	bge.n	80037f2 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	015b      	lsls	r3, r3, #5
 80037e2:	3328      	adds	r3, #40	; 0x28
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4413      	add	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	705a      	strb	r2, [r3, #1]
 80037f0:	e00b      	b.n	800380a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	015b      	lsls	r3, r3, #5
 80037fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003816:	883a      	ldrh	r2, [r7, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	78ba      	ldrb	r2, [r7, #2]
 8003820:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	785b      	ldrb	r3, [r3, #1]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003834:	78bb      	ldrb	r3, [r7, #2]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d102      	bne.n	8003840 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_PCD_EP_Open+0x9a>
 800384a:	2302      	movs	r3, #2
 800384c:	e00e      	b.n	800386c <HAL_PCD_EP_Open+0xb8>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68f9      	ldr	r1, [r7, #12]
 800385c:	4618      	mov	r0, r3
 800385e:	f001 f983 	bl	8004b68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800386a:	7afb      	ldrb	r3, [r7, #11]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003880:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003884:	2b00      	cmp	r3, #0
 8003886:	da0b      	bge.n	80038a0 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	015b      	lsls	r3, r3, #5
 8003890:	3328      	adds	r3, #40	; 0x28
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	705a      	strb	r2, [r3, #1]
 800389e:	e00b      	b.n	80038b8 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	015b      	lsls	r3, r3, #5
 80038a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	4413      	add	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_PCD_EP_Close+0x5e>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e00e      	b.n	80038f0 <HAL_PCD_EP_Close+0x7c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 fc2f 	bl	8005144 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	460b      	mov	r3, r1
 8003906:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003908:	7afb      	ldrb	r3, [r7, #11]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	015b      	lsls	r3, r3, #5
 8003910:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2200      	movs	r2, #0
 8003930:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003932:	7afb      	ldrb	r3, [r7, #11]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	b2da      	uxtb	r2, r3
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800393e:	7afb      	ldrb	r3, [r7, #11]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	2b00      	cmp	r3, #0
 8003946:	d106      	bne.n	8003956 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6979      	ldr	r1, [r7, #20]
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fd8e 	bl	8005470 <USB_EPStartXfer>
 8003954:	e005      	b.n	8003962 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6979      	ldr	r1, [r7, #20]
 800395c:	4618      	mov	r0, r3
 800395e:	f001 fd87 	bl	8005470 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	330a      	adds	r3, #10
 8003982:	015b      	lsls	r3, r3, #5
 8003984:	4413      	add	r3, r2
 8003986:	3304      	adds	r3, #4
 8003988:	681b      	ldr	r3, [r3, #0]
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	460b      	mov	r3, r1
 80039a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039a4:	7afb      	ldrb	r3, [r7, #11]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	015b      	lsls	r3, r3, #5
 80039ac:	3328      	adds	r3, #40	; 0x28
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4413      	add	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2200      	movs	r2, #0
 80039c4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2201      	movs	r2, #1
 80039ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039cc:	7afb      	ldrb	r3, [r7, #11]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039d8:	7afb      	ldrb	r3, [r7, #11]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6979      	ldr	r1, [r7, #20]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 fd41 	bl	8005470 <USB_EPStartXfer>
 80039ee:	e005      	b.n	80039fc <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6979      	ldr	r1, [r7, #20]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 fd3a 	bl	8005470 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 0207 	and.w	r2, r3, #7
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d901      	bls.n	8003a24 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e046      	b.n	8003ab2 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	da0b      	bge.n	8003a44 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	015b      	lsls	r3, r3, #5
 8003a34:	3328      	adds	r3, #40	; 0x28
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	705a      	strb	r2, [r3, #1]
 8003a42:	e009      	b.n	8003a58 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	015b      	lsls	r3, r3, #5
 8003a48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	4413      	add	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_PCD_EP_SetStall+0x72>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e01c      	b.n	8003ab2 <HAL_PCD_EP_SetStall+0xac>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68f9      	ldr	r1, [r7, #12]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 ffaa 	bl	80059e0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d108      	bne.n	8003aa8 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	f002 f8a8 	bl	8005bf8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	f003 020f 	and.w	r2, r3, #15
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d901      	bls.n	8003ad8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e03a      	b.n	8003b4e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	da0b      	bge.n	8003af8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	015b      	lsls	r3, r3, #5
 8003ae8:	3328      	adds	r3, #40	; 0x28
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	705a      	strb	r2, [r3, #1]
 8003af6:	e00b      	b.n	8003b10 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	015b      	lsls	r3, r3, #5
 8003b00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_PCD_EP_ClrStall+0x76>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e00e      	b.n	8003b4e <HAL_PCD_EP_ClrStall+0x94>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68f9      	ldr	r1, [r7, #12]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f001 ff90 	bl	8005a64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b58:	b590      	push	{r4, r7, lr}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b60:	e282      	b.n	8004068 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b6a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b6c:	8afb      	ldrh	r3, [r7, #22]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003b76:	7d7b      	ldrb	r3, [r7, #21]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f040 8142 	bne.w	8003e02 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b7e:	8afb      	ldrh	r3, [r7, #22]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d151      	bne.n	8003c2c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b98:	b29c      	uxth	r4, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3328      	adds	r3, #40	; 0x28
 8003bae:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	695a      	ldr	r2, [r3, #20]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	441a      	add	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003bea:	2100      	movs	r1, #0
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f003 fe3f 	bl	8007870 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 8234 	beq.w	8004068 <PCD_EP_ISR_Handler+0x510>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f040 822f 	bne.w	8004068 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c2a:	e21d      	b.n	8004068 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c32:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c3c:	8a7b      	ldrh	r3, [r7, #18]
 8003c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d033      	beq.n	8003cae <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	3306      	adds	r3, #6
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	f002 f806 	bl	8005c96 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c96:	4013      	ands	r3, r2
 8003c98:	b29c      	uxth	r4, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003ca2:	b292      	uxth	r2, r2
 8003ca4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f003 fdb8 	bl	800781c <HAL_PCD_SetupStageCallback>
 8003cac:	e1dc      	b.n	8004068 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003cae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f280 81d8 	bge.w	8004068 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	b29c      	uxth	r4, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003cd0:	b292      	uxth	r2, r2
 8003cd2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3306      	adds	r3, #6
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d019      	beq.n	8003d3c <PCD_EP_ISR_Handler+0x1e4>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d015      	beq.n	8003d3c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6959      	ldr	r1, [r3, #20]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	f001 ffb8 	bl	8005c96 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	441a      	add	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d34:	2100      	movs	r1, #0
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f003 fd82 	bl	8007840 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	461c      	mov	r4, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	441c      	add	r4, r3
 8003d4e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8003d52:	461c      	mov	r4, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10e      	bne.n	8003d7a <PCD_EP_ISR_Handler+0x222>
 8003d5c:	8823      	ldrh	r3, [r4, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	8023      	strh	r3, [r4, #0]
 8003d68:	8823      	ldrh	r3, [r4, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	8023      	strh	r3, [r4, #0]
 8003d78:	e02d      	b.n	8003dd6 <PCD_EP_ISR_Handler+0x27e>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8003d80:	d812      	bhi.n	8003da8 <PCD_EP_ISR_Handler+0x250>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	085b      	lsrs	r3, r3, #1
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <PCD_EP_ISR_Handler+0x244>
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	029b      	lsls	r3, r3, #10
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	8023      	strh	r3, [r4, #0]
 8003da6:	e016      	b.n	8003dd6 <PCD_EP_ISR_Handler+0x27e>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <PCD_EP_ISR_Handler+0x26a>
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	029b      	lsls	r3, r3, #10
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	b29c      	uxth	r4, r3
 8003de8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003dec:	b29c      	uxth	r4, r3
 8003dee:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003df2:	b29c      	uxth	r4, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4ba2      	ldr	r3, [pc, #648]	; (8004084 <PCD_EP_ISR_Handler+0x52c>)
 8003dfa:	4323      	orrs	r3, r4
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	8013      	strh	r3, [r2, #0]
 8003e00:	e132      	b.n	8004068 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	7d7b      	ldrb	r3, [r7, #21]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f280 80d1 	bge.w	8003fbe <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	7d7b      	ldrb	r3, [r7, #21]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e30:	4013      	ands	r3, r2
 8003e32:	b29c      	uxth	r4, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	7d7b      	ldrb	r3, [r7, #21]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003e44:	b292      	uxth	r2, r2
 8003e46:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003e48:	7d7b      	ldrb	r3, [r7, #21]
 8003e4a:	015b      	lsls	r3, r3, #5
 8003e4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	7b1b      	ldrb	r3, [r3, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d121      	bne.n	8003ea2 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	3306      	adds	r3, #6
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e86:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003e88:	8bfb      	ldrh	r3, [r7, #30]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d072      	beq.n	8003f74 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6959      	ldr	r1, [r3, #20]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	88da      	ldrh	r2, [r3, #6]
 8003e9a:	8bfb      	ldrh	r3, [r7, #30]
 8003e9c:	f001 fefb 	bl	8005c96 <USB_ReadPMA>
 8003ea0:	e068      	b.n	8003f74 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d021      	beq.n	8003f00 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4413      	add	r3, r2
 8003ed0:	3302      	adds	r3, #2
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003ee6:	8bfb      	ldrh	r3, [r7, #30]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d02a      	beq.n	8003f42 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6959      	ldr	r1, [r3, #20]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	891a      	ldrh	r2, [r3, #8]
 8003ef8:	8bfb      	ldrh	r3, [r7, #30]
 8003efa:	f001 fecc 	bl	8005c96 <USB_ReadPMA>
 8003efe:	e020      	b.n	8003f42 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4413      	add	r3, r2
 8003f14:	3306      	adds	r3, #6
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f28:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003f2a:	8bfb      	ldrh	r3, [r7, #30]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6959      	ldr	r1, [r3, #20]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	895a      	ldrh	r2, [r3, #10]
 8003f3c:	8bfb      	ldrh	r3, [r7, #30]
 8003f3e:	f001 feaa 	bl	8005c96 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5c:	b29c      	uxth	r4, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	441a      	add	r2, r3
 8003f6c:	4b46      	ldr	r3, [pc, #280]	; (8004088 <PCD_EP_ISR_Handler+0x530>)
 8003f6e:	4323      	orrs	r3, r4
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	8bfb      	ldrh	r3, [r7, #30]
 8003f7a:	441a      	add	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	8bfb      	ldrh	r3, [r7, #30]
 8003f86:	441a      	add	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <PCD_EP_ISR_Handler+0x446>
 8003f94:	8bfa      	ldrh	r2, [r7, #30]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d206      	bcs.n	8003fac <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f003 fc4b 	bl	8007840 <HAL_PCD_DataOutStageCallback>
 8003faa:	e008      	b.n	8003fbe <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	7819      	ldrb	r1, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff fc9d 	bl	80038f8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003fbe:	8a7b      	ldrh	r3, [r7, #18]
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d04f      	beq.n	8004068 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8003fc8:	7d7b      	ldrb	r3, [r7, #21]
 8003fca:	015b      	lsls	r3, r3, #5
 8003fcc:	3328      	adds	r3, #40	; 0x28
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	7d7b      	ldrb	r3, [r7, #21]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fec:	b29c      	uxth	r4, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	7d7b      	ldrb	r3, [r7, #21]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	441a      	add	r2, r3
 8003ffa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004002:	b29b      	uxth	r3, r3
 8004004:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800400e:	b29b      	uxth	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4413      	add	r3, r2
 800401a:	3302      	adds	r3, #2
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	441a      	add	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f003 fc0e 	bl	8007870 <HAL_PCD_DataInStageCallback>
 8004054:	e008      	b.n	8004068 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	7819      	ldrb	r1, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fc96 	bl	8003994 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004070:	b29b      	uxth	r3, r3
 8004072:	b21b      	sxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	f6ff ad74 	blt.w	8003b62 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3724      	adds	r7, #36	; 0x24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd90      	pop	{r4, r7, pc}
 8004084:	ffff8080 	.word	0xffff8080
 8004088:	ffff80c0 	.word	0xffff80c0

0800408c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	460b      	mov	r3, r1
 8004098:	817b      	strh	r3, [r7, #10]
 800409a:	4613      	mov	r3, r2
 800409c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800409e:	897b      	ldrh	r3, [r7, #10]
 80040a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040aa:	897b      	ldrh	r3, [r7, #10]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	015b      	lsls	r3, r3, #5
 80040b2:	3328      	adds	r3, #40	; 0x28
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e006      	b.n	80040ca <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040bc:	897b      	ldrh	r3, [r7, #10]
 80040be:	015b      	lsls	r3, r3, #5
 80040c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80040ca:	893b      	ldrh	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d107      	bne.n	80040e0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2200      	movs	r2, #0
 80040d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	b29a      	uxth	r2, r3
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	80da      	strh	r2, [r3, #6]
 80040de:	e00b      	b.n	80040f8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2201      	movs	r2, #1
 80040e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	0c1b      	lsrs	r3, r3, #16
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e26c      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8087 	beq.w	8004232 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004124:	4b92      	ldr	r3, [pc, #584]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 030c 	and.w	r3, r3, #12
 800412c:	2b04      	cmp	r3, #4
 800412e:	d00c      	beq.n	800414a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004130:	4b8f      	ldr	r3, [pc, #572]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 030c 	and.w	r3, r3, #12
 8004138:	2b08      	cmp	r3, #8
 800413a:	d112      	bne.n	8004162 <HAL_RCC_OscConfig+0x5e>
 800413c:	4b8c      	ldr	r3, [pc, #560]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004148:	d10b      	bne.n	8004162 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414a:	4b89      	ldr	r3, [pc, #548]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d06c      	beq.n	8004230 <HAL_RCC_OscConfig+0x12c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d168      	bne.n	8004230 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e246      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416a:	d106      	bne.n	800417a <HAL_RCC_OscConfig+0x76>
 800416c:	4b80      	ldr	r3, [pc, #512]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a7f      	ldr	r2, [pc, #508]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 8004172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	e02e      	b.n	80041d8 <HAL_RCC_OscConfig+0xd4>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10c      	bne.n	800419c <HAL_RCC_OscConfig+0x98>
 8004182:	4b7b      	ldr	r3, [pc, #492]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a7a      	ldr	r2, [pc, #488]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 8004188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4b78      	ldr	r3, [pc, #480]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a77      	ldr	r2, [pc, #476]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 8004194:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e01d      	b.n	80041d8 <HAL_RCC_OscConfig+0xd4>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCC_OscConfig+0xbc>
 80041a6:	4b72      	ldr	r3, [pc, #456]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a71      	ldr	r2, [pc, #452]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	4b6f      	ldr	r3, [pc, #444]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a6e      	ldr	r2, [pc, #440]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e00b      	b.n	80041d8 <HAL_RCC_OscConfig+0xd4>
 80041c0:	4b6b      	ldr	r3, [pc, #428]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a6a      	ldr	r2, [pc, #424]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 80041c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	4b68      	ldr	r3, [pc, #416]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a67      	ldr	r2, [pc, #412]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 80041d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d013      	beq.n	8004208 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e0:	f7fd fe98 	bl	8001f14 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e8:	f7fd fe94 	bl	8001f14 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	; 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e1fa      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fa:	4b5d      	ldr	r3, [pc, #372]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0xe4>
 8004206:	e014      	b.n	8004232 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fd fe84 	bl	8001f14 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004210:	f7fd fe80 	bl	8001f14 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	; 0x64
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e1e6      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004222:	4b53      	ldr	r3, [pc, #332]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x10c>
 800422e:	e000      	b.n	8004232 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d063      	beq.n	8004306 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800423e:	4b4c      	ldr	r3, [pc, #304]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00b      	beq.n	8004262 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800424a:	4b49      	ldr	r3, [pc, #292]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f003 030c 	and.w	r3, r3, #12
 8004252:	2b08      	cmp	r3, #8
 8004254:	d11c      	bne.n	8004290 <HAL_RCC_OscConfig+0x18c>
 8004256:	4b46      	ldr	r3, [pc, #280]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d116      	bne.n	8004290 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004262:	4b43      	ldr	r3, [pc, #268]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d005      	beq.n	800427a <HAL_RCC_OscConfig+0x176>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d001      	beq.n	800427a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e1ba      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800427a:	4b3d      	ldr	r3, [pc, #244]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	4939      	ldr	r1, [pc, #228]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800428e:	e03a      	b.n	8004306 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d020      	beq.n	80042da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004298:	4b36      	ldr	r3, [pc, #216]	; (8004374 <HAL_RCC_OscConfig+0x270>)
 800429a:	2201      	movs	r2, #1
 800429c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429e:	f7fd fe39 	bl	8001f14 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a6:	f7fd fe35 	bl	8001f14 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e19b      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b8:	4b2d      	ldr	r3, [pc, #180]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c4:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4927      	ldr	r1, [pc, #156]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	600b      	str	r3, [r1, #0]
 80042d8:	e015      	b.n	8004306 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042da:	4b26      	ldr	r3, [pc, #152]	; (8004374 <HAL_RCC_OscConfig+0x270>)
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e0:	f7fd fe18 	bl	8001f14 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e8:	f7fd fe14 	bl	8001f14 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e17a      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fa:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d03a      	beq.n	8004388 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d019      	beq.n	800434e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800431a:	4b17      	ldr	r3, [pc, #92]	; (8004378 <HAL_RCC_OscConfig+0x274>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004320:	f7fd fdf8 	bl	8001f14 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004328:	f7fd fdf4 	bl	8001f14 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e15a      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <HAL_RCC_OscConfig+0x26c>)
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004346:	2001      	movs	r0, #1
 8004348:	f000 fac6 	bl	80048d8 <RCC_Delay>
 800434c:	e01c      	b.n	8004388 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <HAL_RCC_OscConfig+0x274>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004354:	f7fd fdde 	bl	8001f14 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800435a:	e00f      	b.n	800437c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800435c:	f7fd fdda 	bl	8001f14 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d908      	bls.n	800437c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e140      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000
 8004374:	42420000 	.word	0x42420000
 8004378:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800437c:	4b9e      	ldr	r3, [pc, #632]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e9      	bne.n	800435c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80a6 	beq.w	80044e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004396:	2300      	movs	r3, #0
 8004398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800439a:	4b97      	ldr	r3, [pc, #604]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10d      	bne.n	80043c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a6:	4b94      	ldr	r3, [pc, #592]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	4a93      	ldr	r2, [pc, #588]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 80043ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b0:	61d3      	str	r3, [r2, #28]
 80043b2:	4b91      	ldr	r3, [pc, #580]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043be:	2301      	movs	r3, #1
 80043c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c2:	4b8e      	ldr	r3, [pc, #568]	; (80045fc <HAL_RCC_OscConfig+0x4f8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d118      	bne.n	8004400 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ce:	4b8b      	ldr	r3, [pc, #556]	; (80045fc <HAL_RCC_OscConfig+0x4f8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a8a      	ldr	r2, [pc, #552]	; (80045fc <HAL_RCC_OscConfig+0x4f8>)
 80043d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043da:	f7fd fd9b 	bl	8001f14 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e2:	f7fd fd97 	bl	8001f14 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b64      	cmp	r3, #100	; 0x64
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e0fd      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f4:	4b81      	ldr	r3, [pc, #516]	; (80045fc <HAL_RCC_OscConfig+0x4f8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d106      	bne.n	8004416 <HAL_RCC_OscConfig+0x312>
 8004408:	4b7b      	ldr	r3, [pc, #492]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	4a7a      	ldr	r2, [pc, #488]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	6213      	str	r3, [r2, #32]
 8004414:	e02d      	b.n	8004472 <HAL_RCC_OscConfig+0x36e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0x334>
 800441e:	4b76      	ldr	r3, [pc, #472]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	4a75      	ldr	r2, [pc, #468]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	6213      	str	r3, [r2, #32]
 800442a:	4b73      	ldr	r3, [pc, #460]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	4a72      	ldr	r2, [pc, #456]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 8004430:	f023 0304 	bic.w	r3, r3, #4
 8004434:	6213      	str	r3, [r2, #32]
 8004436:	e01c      	b.n	8004472 <HAL_RCC_OscConfig+0x36e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	2b05      	cmp	r3, #5
 800443e:	d10c      	bne.n	800445a <HAL_RCC_OscConfig+0x356>
 8004440:	4b6d      	ldr	r3, [pc, #436]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	4a6c      	ldr	r2, [pc, #432]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 8004446:	f043 0304 	orr.w	r3, r3, #4
 800444a:	6213      	str	r3, [r2, #32]
 800444c:	4b6a      	ldr	r3, [pc, #424]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	4a69      	ldr	r2, [pc, #420]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	6213      	str	r3, [r2, #32]
 8004458:	e00b      	b.n	8004472 <HAL_RCC_OscConfig+0x36e>
 800445a:	4b67      	ldr	r3, [pc, #412]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	4a66      	ldr	r2, [pc, #408]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6213      	str	r3, [r2, #32]
 8004466:	4b64      	ldr	r3, [pc, #400]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	4a63      	ldr	r2, [pc, #396]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 800446c:	f023 0304 	bic.w	r3, r3, #4
 8004470:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d015      	beq.n	80044a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447a:	f7fd fd4b 	bl	8001f14 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004480:	e00a      	b.n	8004498 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004482:	f7fd fd47 	bl	8001f14 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004490:	4293      	cmp	r3, r2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e0ab      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004498:	4b57      	ldr	r3, [pc, #348]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ee      	beq.n	8004482 <HAL_RCC_OscConfig+0x37e>
 80044a4:	e014      	b.n	80044d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a6:	f7fd fd35 	bl	8001f14 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ac:	e00a      	b.n	80044c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ae:	f7fd fd31 	bl	8001f14 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044bc:	4293      	cmp	r3, r2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e095      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c4:	4b4c      	ldr	r3, [pc, #304]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ee      	bne.n	80044ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044d0:	7dfb      	ldrb	r3, [r7, #23]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d6:	4b48      	ldr	r3, [pc, #288]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	4a47      	ldr	r2, [pc, #284]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 80044dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8081 	beq.w	80045ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ec:	4b42      	ldr	r3, [pc, #264]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d061      	beq.n	80045bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d146      	bne.n	800458e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004500:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <HAL_RCC_OscConfig+0x4fc>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004506:	f7fd fd05 	bl	8001f14 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450e:	f7fd fd01 	bl	8001f14 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e067      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004520:	4b35      	ldr	r3, [pc, #212]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f0      	bne.n	800450e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004534:	d108      	bne.n	8004548 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004536:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	492d      	ldr	r1, [pc, #180]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 8004544:	4313      	orrs	r3, r2
 8004546:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004548:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a19      	ldr	r1, [r3, #32]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	430b      	orrs	r3, r1
 800455a:	4927      	ldr	r1, [pc, #156]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 800455c:	4313      	orrs	r3, r2
 800455e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004560:	4b27      	ldr	r3, [pc, #156]	; (8004600 <HAL_RCC_OscConfig+0x4fc>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004566:	f7fd fcd5 	bl	8001f14 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800456e:	f7fd fcd1 	bl	8001f14 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e037      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004580:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <HAL_RCC_OscConfig+0x46a>
 800458c:	e02f      	b.n	80045ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458e:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <HAL_RCC_OscConfig+0x4fc>)
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7fd fcbe 	bl	8001f14 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459c:	f7fd fcba 	bl	8001f14 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e020      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x498>
 80045ba:	e018      	b.n	80045ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e013      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_RCC_OscConfig+0x4f4>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d106      	bne.n	80045ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d001      	beq.n	80045ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40007000 	.word	0x40007000
 8004600:	42420060 	.word	0x42420060

08004604 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0d0      	b.n	80047ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004618:	4b6a      	ldr	r3, [pc, #424]	; (80047c4 <HAL_RCC_ClockConfig+0x1c0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d910      	bls.n	8004648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004626:	4b67      	ldr	r3, [pc, #412]	; (80047c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 0207 	bic.w	r2, r3, #7
 800462e:	4965      	ldr	r1, [pc, #404]	; (80047c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	4313      	orrs	r3, r2
 8004634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004636:	4b63      	ldr	r3, [pc, #396]	; (80047c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d001      	beq.n	8004648 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0b8      	b.n	80047ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d020      	beq.n	8004696 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004660:	4b59      	ldr	r3, [pc, #356]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4a58      	ldr	r2, [pc, #352]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004666:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800466a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004678:	4b53      	ldr	r3, [pc, #332]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	4a52      	ldr	r2, [pc, #328]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 800467e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004682:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004684:	4b50      	ldr	r3, [pc, #320]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	494d      	ldr	r1, [pc, #308]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004692:	4313      	orrs	r3, r2
 8004694:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d040      	beq.n	8004724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d107      	bne.n	80046ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046aa:	4b47      	ldr	r3, [pc, #284]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d115      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e07f      	b.n	80047ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d107      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c2:	4b41      	ldr	r3, [pc, #260]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e073      	b.n	80047ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d2:	4b3d      	ldr	r3, [pc, #244]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e06b      	b.n	80047ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e2:	4b39      	ldr	r3, [pc, #228]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f023 0203 	bic.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	4936      	ldr	r1, [pc, #216]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f4:	f7fd fc0e 	bl	8001f14 <HAL_GetTick>
 80046f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fa:	e00a      	b.n	8004712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046fc:	f7fd fc0a 	bl	8001f14 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	; 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e053      	b.n	80047ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004712:	4b2d      	ldr	r3, [pc, #180]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 020c 	and.w	r2, r3, #12
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	429a      	cmp	r2, r3
 8004722:	d1eb      	bne.n	80046fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004724:	4b27      	ldr	r3, [pc, #156]	; (80047c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d210      	bcs.n	8004754 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004732:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 0207 	bic.w	r2, r3, #7
 800473a:	4922      	ldr	r1, [pc, #136]	; (80047c4 <HAL_RCC_ClockConfig+0x1c0>)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	4313      	orrs	r3, r2
 8004740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004742:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e032      	b.n	80047ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004760:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4916      	ldr	r1, [pc, #88]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 800476e:	4313      	orrs	r3, r2
 8004770:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	490e      	ldr	r1, [pc, #56]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 800478e:	4313      	orrs	r3, r2
 8004790:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004792:	f000 f821 	bl	80047d8 <HAL_RCC_GetSysClockFreq>
 8004796:	4601      	mov	r1, r0
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 80047a4:	5cd3      	ldrb	r3, [r2, r3]
 80047a6:	fa21 f303 	lsr.w	r3, r1, r3
 80047aa:	4a09      	ldr	r2, [pc, #36]	; (80047d0 <HAL_RCC_ClockConfig+0x1cc>)
 80047ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047ae:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <HAL_RCC_ClockConfig+0x1d0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fd fb6c 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40022000 	.word	0x40022000
 80047c8:	40021000 	.word	0x40021000
 80047cc:	08008994 	.word	0x08008994
 80047d0:	20000000 	.word	0x20000000
 80047d4:	20000004 	.word	0x20000004

080047d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d8:	b490      	push	{r4, r7}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80047de:	4b2a      	ldr	r3, [pc, #168]	; (8004888 <HAL_RCC_GetSysClockFreq+0xb0>)
 80047e0:	1d3c      	adds	r4, r7, #4
 80047e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80047e8:	4b28      	ldr	r3, [pc, #160]	; (800488c <HAL_RCC_GetSysClockFreq+0xb4>)
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	2300      	movs	r3, #0
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	2300      	movs	r3, #0
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004802:	4b23      	ldr	r3, [pc, #140]	; (8004890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 030c 	and.w	r3, r3, #12
 800480e:	2b04      	cmp	r3, #4
 8004810:	d002      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x40>
 8004812:	2b08      	cmp	r3, #8
 8004814:	d003      	beq.n	800481e <HAL_RCC_GetSysClockFreq+0x46>
 8004816:	e02d      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004818:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <HAL_RCC_GetSysClockFreq+0xbc>)
 800481a:	623b      	str	r3, [r7, #32]
      break;
 800481c:	e02d      	b.n	800487a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	0c9b      	lsrs	r3, r3, #18
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800482a:	4413      	add	r3, r2
 800482c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004830:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d013      	beq.n	8004864 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800483c:	4b14      	ldr	r3, [pc, #80]	; (8004890 <HAL_RCC_GetSysClockFreq+0xb8>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	0c5b      	lsrs	r3, r3, #17
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800484a:	4413      	add	r3, r2
 800484c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004850:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	4a0f      	ldr	r2, [pc, #60]	; (8004894 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004856:	fb02 f203 	mul.w	r2, r2, r3
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
 8004862:	e004      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	4a0c      	ldr	r2, [pc, #48]	; (8004898 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004868:	fb02 f303 	mul.w	r3, r2, r3
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	623b      	str	r3, [r7, #32]
      break;
 8004872:	e002      	b.n	800487a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004874:	4b07      	ldr	r3, [pc, #28]	; (8004894 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004876:	623b      	str	r3, [r7, #32]
      break;
 8004878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800487a:	6a3b      	ldr	r3, [r7, #32]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3728      	adds	r7, #40	; 0x28
 8004880:	46bd      	mov	sp, r7
 8004882:	bc90      	pop	{r4, r7}
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	08008938 	.word	0x08008938
 800488c:	08008948 	.word	0x08008948
 8004890:	40021000 	.word	0x40021000
 8004894:	007a1200 	.word	0x007a1200
 8004898:	003d0900 	.word	0x003d0900

0800489c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048a0:	4b02      	ldr	r3, [pc, #8]	; (80048ac <HAL_RCC_GetHCLKFreq+0x10>)
 80048a2:	681b      	ldr	r3, [r3, #0]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr
 80048ac:	20000000 	.word	0x20000000

080048b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048b4:	f7ff fff2 	bl	800489c <HAL_RCC_GetHCLKFreq>
 80048b8:	4601      	mov	r1, r0
 80048ba:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4a03      	ldr	r2, [pc, #12]	; (80048d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048c6:	5cd3      	ldrb	r3, [r2, r3]
 80048c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40021000 	.word	0x40021000
 80048d4:	080089a4 	.word	0x080089a4

080048d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <RCC_Delay+0x34>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a0a      	ldr	r2, [pc, #40]	; (8004910 <RCC_Delay+0x38>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	0a5b      	lsrs	r3, r3, #9
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	fb02 f303 	mul.w	r3, r2, r3
 80048f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048f4:	bf00      	nop
  }
  while (Delay --);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1e5a      	subs	r2, r3, #1
 80048fa:	60fa      	str	r2, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f9      	bne.n	80048f4 <RCC_Delay+0x1c>
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000000 	.word	0x20000000
 8004910:	10624dd3 	.word	0x10624dd3

08004914 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d07d      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004930:	2300      	movs	r3, #0
 8004932:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004934:	4b4f      	ldr	r3, [pc, #316]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10d      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004940:	4b4c      	ldr	r3, [pc, #304]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	4a4b      	ldr	r2, [pc, #300]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494a:	61d3      	str	r3, [r2, #28]
 800494c:	4b49      	ldr	r3, [pc, #292]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004958:	2301      	movs	r3, #1
 800495a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495c:	4b46      	ldr	r3, [pc, #280]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d118      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004968:	4b43      	ldr	r3, [pc, #268]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a42      	ldr	r2, [pc, #264]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800496e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004972:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004974:	f7fd face 	bl	8001f14 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497a:	e008      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800497c:	f7fd faca 	bl	8001f14 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b64      	cmp	r3, #100	; 0x64
 8004988:	d901      	bls.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e06d      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498e:	4b3a      	ldr	r3, [pc, #232]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800499a:	4b36      	ldr	r3, [pc, #216]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d02e      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d027      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049b8:	4b2e      	ldr	r3, [pc, #184]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049c2:	4b2e      	ldr	r3, [pc, #184]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049c8:	4b2c      	ldr	r3, [pc, #176]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049ce:	4a29      	ldr	r2, [pc, #164]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d014      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049de:	f7fd fa99 	bl	8001f14 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e4:	e00a      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e6:	f7fd fa95 	bl	8001f14 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d901      	bls.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e036      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fc:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0ee      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a08:	4b1a      	ldr	r3, [pc, #104]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4917      	ldr	r1, [pc, #92]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d105      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a20:	4b14      	ldr	r3, [pc, #80]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a38:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	490b      	ldr	r1, [pc, #44]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a56:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	4904      	ldr	r1, [pc, #16]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40007000 	.word	0x40007000
 8004a7c:	42420440 	.word	0x42420440

08004a80 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a80:	b084      	sub	sp, #16
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	f107 0014 	add.w	r0, r7, #20
 8004a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	b004      	add	sp, #16
 8004a9e:	4770      	bx	lr

08004aa0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004aa8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004aac:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	89fb      	ldrh	r3, [r7, #14]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr

08004ace <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ad6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004ada:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	b21a      	sxth	r2, r3
 8004ae6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004aea:	43db      	mvns	r3, r3
 8004aec:	b21b      	sxth	r3, r3
 8004aee:	4013      	ands	r3, r2
 8004af0:	b21b      	sxth	r3, r3
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr

08004b06 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr

08004b1e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b1e:	b084      	sub	sp, #16
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	f107 0014 	add.w	r0, r7, #20
 8004b2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff ffa5 	bl	8004aa0 <USB_EnableGlobalInt>

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b62:	b004      	add	sp, #16
 8004b64:	4770      	bx	lr
	...

08004b68 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b68:	b490      	push	{r4, r7}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	78db      	ldrb	r3, [r3, #3]
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d819      	bhi.n	8004bca <USB_ActivateEndpoint+0x62>
 8004b96:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <USB_ActivateEndpoint+0x34>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bad 	.word	0x08004bad
 8004ba0:	08004bc1 	.word	0x08004bc1
 8004ba4:	08004bd1 	.word	0x08004bd1
 8004ba8:	08004bb7 	.word	0x08004bb7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004bac:	89bb      	ldrh	r3, [r7, #12]
 8004bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bb2:	81bb      	strh	r3, [r7, #12]
      break;
 8004bb4:	e00d      	b.n	8004bd2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004bb6:	89bb      	ldrh	r3, [r7, #12]
 8004bb8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004bbc:	81bb      	strh	r3, [r7, #12]
      break;
 8004bbe:	e008      	b.n	8004bd2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004bc0:	89bb      	ldrh	r3, [r7, #12]
 8004bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bc6:	81bb      	strh	r3, [r7, #12]
      break;
 8004bc8:	e003      	b.n	8004bd2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8004bce:	e000      	b.n	8004bd2 <USB_ActivateEndpoint+0x6a>
      break;
 8004bd0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	441a      	add	r2, r3
 8004bdc:	89bb      	ldrh	r3, [r7, #12]
 8004bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	4313      	orrs	r3, r2
 8004c12:	b29c      	uxth	r4, r3
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	441a      	add	r2, r3
 8004c1e:	4b8a      	ldr	r3, [pc, #552]	; (8004e48 <USB_ActivateEndpoint+0x2e0>)
 8004c20:	4323      	orrs	r3, r4
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	7b1b      	ldrb	r3, [r3, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f040 8112 	bne.w	8004e54 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	785b      	ldrb	r3, [r3, #1]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d067      	beq.n	8004d08 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c38:	687c      	ldr	r4, [r7, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	441c      	add	r4, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	4423      	add	r3, r4
 8004c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c50:	461c      	mov	r4, r3
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	88db      	ldrh	r3, [r3, #6]
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29c      	uxth	r4, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d014      	beq.n	8004ca2 <USB_ActivateEndpoint+0x13a>
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	b29c      	uxth	r4, r3
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	441a      	add	r2, r3
 8004c9a:	4b6c      	ldr	r3, [pc, #432]	; (8004e4c <USB_ActivateEndpoint+0x2e4>)
 8004c9c:	4323      	orrs	r3, r4
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	78db      	ldrb	r3, [r3, #3]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d018      	beq.n	8004cdc <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc0:	b29c      	uxth	r4, r3
 8004cc2:	f084 0320 	eor.w	r3, r4, #32
 8004cc6:	b29c      	uxth	r4, r3
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	441a      	add	r2, r3
 8004cd2:	4b5d      	ldr	r3, [pc, #372]	; (8004e48 <USB_ActivateEndpoint+0x2e0>)
 8004cd4:	4323      	orrs	r3, r4
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	8013      	strh	r3, [r2, #0]
 8004cda:	e22b      	b.n	8005134 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf2:	b29c      	uxth	r4, r3
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	441a      	add	r2, r3
 8004cfe:	4b52      	ldr	r3, [pc, #328]	; (8004e48 <USB_ActivateEndpoint+0x2e0>)
 8004d00:	4323      	orrs	r3, r4
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	8013      	strh	r3, [r2, #0]
 8004d06:	e215      	b.n	8005134 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d08:	687c      	ldr	r4, [r7, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	441c      	add	r4, r3
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	4423      	add	r3, r4
 8004d1c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004d20:	461c      	mov	r4, r3
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	88db      	ldrh	r3, [r3, #6]
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d30:	687c      	ldr	r4, [r7, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	441c      	add	r4, r3
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	4423      	add	r3, r4
 8004d44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d48:	461c      	mov	r4, r3
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10e      	bne.n	8004d70 <USB_ActivateEndpoint+0x208>
 8004d52:	8823      	ldrh	r3, [r4, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	8023      	strh	r3, [r4, #0]
 8004d5e:	8823      	ldrh	r3, [r4, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	8023      	strh	r3, [r4, #0]
 8004d6e:	e02d      	b.n	8004dcc <USB_ActivateEndpoint+0x264>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b3e      	cmp	r3, #62	; 0x3e
 8004d76:	d812      	bhi.n	8004d9e <USB_ActivateEndpoint+0x236>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	60bb      	str	r3, [r7, #8]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <USB_ActivateEndpoint+0x22a>
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	029b      	lsls	r3, r3, #10
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	8023      	strh	r3, [r4, #0]
 8004d9c:	e016      	b.n	8004dcc <USB_ActivateEndpoint+0x264>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 031f 	and.w	r3, r3, #31
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <USB_ActivateEndpoint+0x250>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	029b      	lsls	r3, r3, #10
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	b29c      	uxth	r4, r3
 8004dda:	4623      	mov	r3, r4
 8004ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d014      	beq.n	8004e0e <USB_ActivateEndpoint+0x2a6>
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfa:	b29c      	uxth	r4, r3
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	441a      	add	r2, r3
 8004e06:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <USB_ActivateEndpoint+0x2e8>)
 8004e08:	4323      	orrs	r3, r4
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e24:	b29c      	uxth	r4, r3
 8004e26:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004e2a:	b29c      	uxth	r4, r3
 8004e2c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004e30:	b29c      	uxth	r4, r3
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	441a      	add	r2, r3
 8004e3c:	4b02      	ldr	r3, [pc, #8]	; (8004e48 <USB_ActivateEndpoint+0x2e0>)
 8004e3e:	4323      	orrs	r3, r4
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	8013      	strh	r3, [r2, #0]
 8004e44:	e176      	b.n	8005134 <USB_ActivateEndpoint+0x5cc>
 8004e46:	bf00      	nop
 8004e48:	ffff8080 	.word	0xffff8080
 8004e4c:	ffff80c0 	.word	0xffff80c0
 8004e50:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	b29c      	uxth	r4, r3
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	4b96      	ldr	r3, [pc, #600]	; (80050d0 <USB_ActivateEndpoint+0x568>)
 8004e78:	4323      	orrs	r3, r4
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004e7e:	687c      	ldr	r4, [r7, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	441c      	add	r4, r3
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	4423      	add	r3, r4
 8004e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e96:	461c      	mov	r4, r3
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	891b      	ldrh	r3, [r3, #8]
 8004e9c:	085b      	lsrs	r3, r3, #1
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	8023      	strh	r3, [r4, #0]
 8004ea6:	687c      	ldr	r4, [r7, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	441c      	add	r4, r3
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	4423      	add	r3, r4
 8004eba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ebe:	461c      	mov	r4, r3
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	895b      	ldrh	r3, [r3, #10]
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f040 8088 	bne.w	8004fe8 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29c      	uxth	r4, r3
 8004ee6:	4623      	mov	r3, r4
 8004ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d014      	beq.n	8004f1a <USB_ActivateEndpoint+0x3b2>
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f06:	b29c      	uxth	r4, r3
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	441a      	add	r2, r3
 8004f12:	4b70      	ldr	r3, [pc, #448]	; (80050d4 <USB_ActivateEndpoint+0x56c>)
 8004f14:	4323      	orrs	r3, r4
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29c      	uxth	r4, r3
 8004f28:	4623      	mov	r3, r4
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d014      	beq.n	8004f5c <USB_ActivateEndpoint+0x3f4>
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f48:	b29c      	uxth	r4, r3
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	441a      	add	r2, r3
 8004f54:	4b60      	ldr	r3, [pc, #384]	; (80050d8 <USB_ActivateEndpoint+0x570>)
 8004f56:	4323      	orrs	r3, r4
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f72:	b29c      	uxth	r4, r3
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	441a      	add	r2, r3
 8004f7e:	4b56      	ldr	r3, [pc, #344]	; (80050d8 <USB_ActivateEndpoint+0x570>)
 8004f80:	4323      	orrs	r3, r4
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	b29c      	uxth	r4, r3
 8004f9e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004fa2:	b29c      	uxth	r4, r3
 8004fa4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004fa8:	b29c      	uxth	r4, r3
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	441a      	add	r2, r3
 8004fb4:	4b49      	ldr	r3, [pc, #292]	; (80050dc <USB_ActivateEndpoint+0x574>)
 8004fb6:	4323      	orrs	r3, r4
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd2:	b29c      	uxth	r4, r3
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	4b3f      	ldr	r3, [pc, #252]	; (80050dc <USB_ActivateEndpoint+0x574>)
 8004fe0:	4323      	orrs	r3, r4
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	8013      	strh	r3, [r2, #0]
 8004fe6:	e0a5      	b.n	8005134 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	b29c      	uxth	r4, r3
 8004ff6:	4623      	mov	r3, r4
 8004ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d014      	beq.n	800502a <USB_ActivateEndpoint+0x4c2>
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	b29b      	uxth	r3, r3
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	b29c      	uxth	r4, r3
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	441a      	add	r2, r3
 8005022:	4b2c      	ldr	r3, [pc, #176]	; (80050d4 <USB_ActivateEndpoint+0x56c>)
 8005024:	4323      	orrs	r3, r4
 8005026:	b29b      	uxth	r3, r3
 8005028:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29c      	uxth	r4, r3
 8005038:	4623      	mov	r3, r4
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d014      	beq.n	800506c <USB_ActivateEndpoint+0x504>
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005058:	b29c      	uxth	r4, r3
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	441a      	add	r2, r3
 8005064:	4b1c      	ldr	r3, [pc, #112]	; (80050d8 <USB_ActivateEndpoint+0x570>)
 8005066:	4323      	orrs	r3, r4
 8005068:	b29b      	uxth	r3, r3
 800506a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005082:	b29c      	uxth	r4, r3
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	441a      	add	r2, r3
 800508e:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <USB_ActivateEndpoint+0x56c>)
 8005090:	4323      	orrs	r3, r4
 8005092:	b29b      	uxth	r3, r3
 8005094:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	78db      	ldrb	r3, [r3, #3]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d020      	beq.n	80050e0 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b4:	b29c      	uxth	r4, r3
 80050b6:	f084 0320 	eor.w	r3, r4, #32
 80050ba:	b29c      	uxth	r4, r3
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <USB_ActivateEndpoint+0x574>)
 80050c8:	4323      	orrs	r3, r4
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	8013      	strh	r3, [r2, #0]
 80050ce:	e01c      	b.n	800510a <USB_ActivateEndpoint+0x5a2>
 80050d0:	ffff8180 	.word	0xffff8180
 80050d4:	ffffc080 	.word	0xffffc080
 80050d8:	ffff80c0 	.word	0xffff80c0
 80050dc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f6:	b29c      	uxth	r4, r3
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <USB_ActivateEndpoint+0x5d8>)
 8005104:	4323      	orrs	r3, r4
 8005106:	b29b      	uxth	r3, r3
 8005108:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800511c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005120:	b29c      	uxth	r4, r3
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	441a      	add	r2, r3
 800512c:	4b04      	ldr	r3, [pc, #16]	; (8005140 <USB_ActivateEndpoint+0x5d8>)
 800512e:	4323      	orrs	r3, r4
 8005130:	b29b      	uxth	r3, r3
 8005132:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bc90      	pop	{r4, r7}
 800513e:	4770      	bx	lr
 8005140:	ffff8080 	.word	0xffff8080

08005144 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005144:	b490      	push	{r4, r7}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	7b1b      	ldrb	r3, [r3, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d171      	bne.n	800523a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	785b      	ldrb	r3, [r3, #1]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d036      	beq.n	80051cc <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29c      	uxth	r4, r3
 800516c:	4623      	mov	r3, r4
 800516e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d014      	beq.n	80051a0 <USB_DeactivateEndpoint+0x5c>
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518c:	b29c      	uxth	r4, r3
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	4b6b      	ldr	r3, [pc, #428]	; (8005348 <USB_DeactivateEndpoint+0x204>)
 800519a:	4323      	orrs	r3, r4
 800519c:	b29b      	uxth	r3, r3
 800519e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b6:	b29c      	uxth	r4, r3
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	441a      	add	r2, r3
 80051c2:	4b62      	ldr	r3, [pc, #392]	; (800534c <USB_DeactivateEndpoint+0x208>)
 80051c4:	4323      	orrs	r3, r4
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	8013      	strh	r3, [r2, #0]
 80051ca:	e144      	b.n	8005456 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	b29c      	uxth	r4, r3
 80051da:	4623      	mov	r3, r4
 80051dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d014      	beq.n	800520e <USB_DeactivateEndpoint+0xca>
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	b29c      	uxth	r4, r3
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	441a      	add	r2, r3
 8005206:	4b52      	ldr	r3, [pc, #328]	; (8005350 <USB_DeactivateEndpoint+0x20c>)
 8005208:	4323      	orrs	r3, r4
 800520a:	b29b      	uxth	r3, r3
 800520c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29b      	uxth	r3, r3
 800521c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005224:	b29c      	uxth	r4, r3
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	441a      	add	r2, r3
 8005230:	4b46      	ldr	r3, [pc, #280]	; (800534c <USB_DeactivateEndpoint+0x208>)
 8005232:	4323      	orrs	r3, r4
 8005234:	b29b      	uxth	r3, r3
 8005236:	8013      	strh	r3, [r2, #0]
 8005238:	e10d      	b.n	8005456 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f040 8088 	bne.w	8005354 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29c      	uxth	r4, r3
 8005252:	4623      	mov	r3, r4
 8005254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d014      	beq.n	8005286 <USB_DeactivateEndpoint+0x142>
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	b29c      	uxth	r4, r3
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	441a      	add	r2, r3
 800527e:	4b34      	ldr	r3, [pc, #208]	; (8005350 <USB_DeactivateEndpoint+0x20c>)
 8005280:	4323      	orrs	r3, r4
 8005282:	b29b      	uxth	r3, r3
 8005284:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29c      	uxth	r4, r3
 8005294:	4623      	mov	r3, r4
 8005296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d014      	beq.n	80052c8 <USB_DeactivateEndpoint+0x184>
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b4:	b29c      	uxth	r4, r3
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	441a      	add	r2, r3
 80052c0:	4b21      	ldr	r3, [pc, #132]	; (8005348 <USB_DeactivateEndpoint+0x204>)
 80052c2:	4323      	orrs	r3, r4
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	b29c      	uxth	r4, r3
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	441a      	add	r2, r3
 80052ea:	4b17      	ldr	r3, [pc, #92]	; (8005348 <USB_DeactivateEndpoint+0x204>)
 80052ec:	4323      	orrs	r3, r4
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005308:	b29c      	uxth	r4, r3
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	441a      	add	r2, r3
 8005314:	4b0d      	ldr	r3, [pc, #52]	; (800534c <USB_DeactivateEndpoint+0x208>)
 8005316:	4323      	orrs	r3, r4
 8005318:	b29b      	uxth	r3, r3
 800531a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005332:	b29c      	uxth	r4, r3
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	441a      	add	r2, r3
 800533e:	4b03      	ldr	r3, [pc, #12]	; (800534c <USB_DeactivateEndpoint+0x208>)
 8005340:	4323      	orrs	r3, r4
 8005342:	b29b      	uxth	r3, r3
 8005344:	8013      	strh	r3, [r2, #0]
 8005346:	e086      	b.n	8005456 <USB_DeactivateEndpoint+0x312>
 8005348:	ffff80c0 	.word	0xffff80c0
 800534c:	ffff8080 	.word	0xffff8080
 8005350:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29c      	uxth	r4, r3
 8005362:	4623      	mov	r3, r4
 8005364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d014      	beq.n	8005396 <USB_DeactivateEndpoint+0x252>
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29b      	uxth	r3, r3
 800537a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	b29c      	uxth	r4, r3
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	441a      	add	r2, r3
 800538e:	4b35      	ldr	r3, [pc, #212]	; (8005464 <USB_DeactivateEndpoint+0x320>)
 8005390:	4323      	orrs	r3, r4
 8005392:	b29b      	uxth	r3, r3
 8005394:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29c      	uxth	r4, r3
 80053a4:	4623      	mov	r3, r4
 80053a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d014      	beq.n	80053d8 <USB_DeactivateEndpoint+0x294>
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c4:	b29c      	uxth	r4, r3
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	441a      	add	r2, r3
 80053d0:	4b25      	ldr	r3, [pc, #148]	; (8005468 <USB_DeactivateEndpoint+0x324>)
 80053d2:	4323      	orrs	r3, r4
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ee:	b29c      	uxth	r4, r3
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	441a      	add	r2, r3
 80053fa:	4b1a      	ldr	r3, [pc, #104]	; (8005464 <USB_DeactivateEndpoint+0x320>)
 80053fc:	4323      	orrs	r3, r4
 80053fe:	b29b      	uxth	r3, r3
 8005400:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29b      	uxth	r3, r3
 8005410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005418:	b29c      	uxth	r4, r3
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	441a      	add	r2, r3
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <USB_DeactivateEndpoint+0x328>)
 8005426:	4323      	orrs	r3, r4
 8005428:	b29b      	uxth	r3, r3
 800542a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	b29c      	uxth	r4, r3
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	441a      	add	r2, r3
 800544e:	4b07      	ldr	r3, [pc, #28]	; (800546c <USB_DeactivateEndpoint+0x328>)
 8005450:	4323      	orrs	r3, r4
 8005452:	b29b      	uxth	r3, r3
 8005454:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bc90      	pop	{r4, r7}
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	ffffc080 	.word	0xffffc080
 8005468:	ffff80c0 	.word	0xffff80c0
 800546c:	ffff8080 	.word	0xffff8080

08005470 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b08d      	sub	sp, #52	; 0x34
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	785b      	ldrb	r3, [r3, #1]
 800547e:	2b01      	cmp	r3, #1
 8005480:	f040 8160 	bne.w	8005744 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	699a      	ldr	r2, [r3, #24]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	429a      	cmp	r2, r3
 800548e:	d909      	bls.n	80054a4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	1ad2      	subs	r2, r2, r3
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	619a      	str	r2, [r3, #24]
 80054a2:	e005      	b.n	80054b0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2200      	movs	r2, #0
 80054ae:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	7b1b      	ldrb	r3, [r3, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d119      	bne.n	80054ec <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	6959      	ldr	r1, [r3, #20]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	88da      	ldrh	r2, [r3, #6]
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fba2 	bl	8005c0e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054ca:	687c      	ldr	r4, [r7, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	441c      	add	r4, r3
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	4423      	add	r3, r4
 80054de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054e2:	461c      	mov	r4, r3
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8023      	strh	r3, [r4, #0]
 80054ea:	e10f      	b.n	800570c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d065      	beq.n	80055ce <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005502:	687c      	ldr	r4, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	785b      	ldrb	r3, [r3, #1]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d148      	bne.n	800559e <USB_EPStartXfer+0x12e>
 800550c:	687c      	ldr	r4, [r7, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005514:	b29b      	uxth	r3, r3
 8005516:	441c      	add	r4, r3
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	4423      	add	r3, r4
 8005520:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005524:	461c      	mov	r4, r3
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10e      	bne.n	800554a <USB_EPStartXfer+0xda>
 800552c:	8823      	ldrh	r3, [r4, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005534:	b29b      	uxth	r3, r3
 8005536:	8023      	strh	r3, [r4, #0]
 8005538:	8823      	ldrh	r3, [r4, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005544:	b29b      	uxth	r3, r3
 8005546:	8023      	strh	r3, [r4, #0]
 8005548:	e03d      	b.n	80055c6 <USB_EPStartXfer+0x156>
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	2b3e      	cmp	r3, #62	; 0x3e
 800554e:	d810      	bhi.n	8005572 <USB_EPStartXfer+0x102>
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	085b      	lsrs	r3, r3, #1
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <USB_EPStartXfer+0xf6>
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	3301      	adds	r3, #1
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	b29b      	uxth	r3, r3
 800556a:	029b      	lsls	r3, r3, #10
 800556c:	b29b      	uxth	r3, r3
 800556e:	8023      	strh	r3, [r4, #0]
 8005570:	e029      	b.n	80055c6 <USB_EPStartXfer+0x156>
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	095b      	lsrs	r3, r3, #5
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	2b00      	cmp	r3, #0
 8005580:	d102      	bne.n	8005588 <USB_EPStartXfer+0x118>
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	3b01      	subs	r3, #1
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	b29b      	uxth	r3, r3
 800558c:	029b      	lsls	r3, r3, #10
 800558e:	b29b      	uxth	r3, r3
 8005590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005598:	b29b      	uxth	r3, r3
 800559a:	8023      	strh	r3, [r4, #0]
 800559c:	e013      	b.n	80055c6 <USB_EPStartXfer+0x156>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d10f      	bne.n	80055c6 <USB_EPStartXfer+0x156>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	441c      	add	r4, r3
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	4423      	add	r3, r4
 80055b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	895b      	ldrh	r3, [r3, #10]
 80055ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80055cc:	e063      	b.n	8005696 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	785b      	ldrb	r3, [r3, #1]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d148      	bne.n	8005668 <USB_EPStartXfer+0x1f8>
 80055d6:	687c      	ldr	r4, [r7, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055de:	b29b      	uxth	r3, r3
 80055e0:	441c      	add	r4, r3
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	4423      	add	r3, r4
 80055ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055ee:	461c      	mov	r4, r3
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10e      	bne.n	8005614 <USB_EPStartXfer+0x1a4>
 80055f6:	8823      	ldrh	r3, [r4, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055fe:	b29b      	uxth	r3, r3
 8005600:	8023      	strh	r3, [r4, #0]
 8005602:	8823      	ldrh	r3, [r4, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800560a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800560e:	b29b      	uxth	r3, r3
 8005610:	8023      	strh	r3, [r4, #0]
 8005612:	e03d      	b.n	8005690 <USB_EPStartXfer+0x220>
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	2b3e      	cmp	r3, #62	; 0x3e
 8005618:	d810      	bhi.n	800563c <USB_EPStartXfer+0x1cc>
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	085b      	lsrs	r3, r3, #1
 800561e:	623b      	str	r3, [r7, #32]
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <USB_EPStartXfer+0x1c0>
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	3301      	adds	r3, #1
 800562e:	623b      	str	r3, [r7, #32]
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	b29b      	uxth	r3, r3
 8005634:	029b      	lsls	r3, r3, #10
 8005636:	b29b      	uxth	r3, r3
 8005638:	8023      	strh	r3, [r4, #0]
 800563a:	e029      	b.n	8005690 <USB_EPStartXfer+0x220>
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	623b      	str	r3, [r7, #32]
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	2b00      	cmp	r3, #0
 800564a:	d102      	bne.n	8005652 <USB_EPStartXfer+0x1e2>
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	3b01      	subs	r3, #1
 8005650:	623b      	str	r3, [r7, #32]
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	b29b      	uxth	r3, r3
 8005656:	029b      	lsls	r3, r3, #10
 8005658:	b29b      	uxth	r3, r3
 800565a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005662:	b29b      	uxth	r3, r3
 8005664:	8023      	strh	r3, [r4, #0]
 8005666:	e013      	b.n	8005690 <USB_EPStartXfer+0x220>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d10f      	bne.n	8005690 <USB_EPStartXfer+0x220>
 8005670:	687c      	ldr	r4, [r7, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005678:	b29b      	uxth	r3, r3
 800567a:	441c      	add	r4, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	4423      	add	r3, r4
 8005684:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005688:	461c      	mov	r4, r3
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	b29b      	uxth	r3, r3
 800568e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	891b      	ldrh	r3, [r3, #8]
 8005694:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	6959      	ldr	r1, [r3, #20]
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	b29b      	uxth	r3, r3
 800569e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fab4 	bl	8005c0e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	785b      	ldrb	r3, [r3, #1]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d115      	bne.n	80056da <USB_EPStartXfer+0x26a>
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c4:	b29c      	uxth	r4, r3
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	441a      	add	r2, r3
 80056d0:	4b9a      	ldr	r3, [pc, #616]	; (800593c <USB_EPStartXfer+0x4cc>)
 80056d2:	4323      	orrs	r3, r4
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	8013      	strh	r3, [r2, #0]
 80056d8:	e018      	b.n	800570c <USB_EPStartXfer+0x29c>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	785b      	ldrb	r3, [r3, #1]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d114      	bne.n	800570c <USB_EPStartXfer+0x29c>
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f8:	b29c      	uxth	r4, r3
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	441a      	add	r2, r3
 8005704:	4b8e      	ldr	r3, [pc, #568]	; (8005940 <USB_EPStartXfer+0x4d0>)
 8005706:	4323      	orrs	r3, r4
 8005708:	b29b      	uxth	r3, r3
 800570a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005722:	b29c      	uxth	r4, r3
 8005724:	f084 0310 	eor.w	r3, r4, #16
 8005728:	b29c      	uxth	r4, r3
 800572a:	f084 0320 	eor.w	r3, r4, #32
 800572e:	b29c      	uxth	r4, r3
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	441a      	add	r2, r3
 800573a:	4b82      	ldr	r3, [pc, #520]	; (8005944 <USB_EPStartXfer+0x4d4>)
 800573c:	4323      	orrs	r3, r4
 800573e:	b29b      	uxth	r3, r3
 8005740:	8013      	strh	r3, [r2, #0]
 8005742:	e146      	b.n	80059d2 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	699a      	ldr	r2, [r3, #24]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	429a      	cmp	r2, r3
 800574e:	d909      	bls.n	8005764 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	1ad2      	subs	r2, r2, r3
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	619a      	str	r2, [r3, #24]
 8005762:	e005      	b.n	8005770 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2200      	movs	r2, #0
 800576e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	7b1b      	ldrb	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d148      	bne.n	800580a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005778:	687c      	ldr	r4, [r7, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005780:	b29b      	uxth	r3, r3
 8005782:	441c      	add	r4, r3
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	4423      	add	r3, r4
 800578c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005790:	461c      	mov	r4, r3
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10e      	bne.n	80057b6 <USB_EPStartXfer+0x346>
 8005798:	8823      	ldrh	r3, [r4, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	8023      	strh	r3, [r4, #0]
 80057a4:	8823      	ldrh	r3, [r4, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	8023      	strh	r3, [r4, #0]
 80057b4:	e0f2      	b.n	800599c <USB_EPStartXfer+0x52c>
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	2b3e      	cmp	r3, #62	; 0x3e
 80057ba:	d810      	bhi.n	80057de <USB_EPStartXfer+0x36e>
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <USB_EPStartXfer+0x362>
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	3301      	adds	r3, #1
 80057d0:	61fb      	str	r3, [r7, #28]
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	029b      	lsls	r3, r3, #10
 80057d8:	b29b      	uxth	r3, r3
 80057da:	8023      	strh	r3, [r4, #0]
 80057dc:	e0de      	b.n	800599c <USB_EPStartXfer+0x52c>
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e6:	f003 031f 	and.w	r3, r3, #31
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <USB_EPStartXfer+0x384>
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	61fb      	str	r3, [r7, #28]
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005804:	b29b      	uxth	r3, r3
 8005806:	8023      	strh	r3, [r4, #0]
 8005808:	e0c8      	b.n	800599c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	785b      	ldrb	r3, [r3, #1]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d148      	bne.n	80058a4 <USB_EPStartXfer+0x434>
 8005812:	687c      	ldr	r4, [r7, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800581a:	b29b      	uxth	r3, r3
 800581c:	441c      	add	r4, r3
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	4423      	add	r3, r4
 8005826:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800582a:	461c      	mov	r4, r3
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10e      	bne.n	8005850 <USB_EPStartXfer+0x3e0>
 8005832:	8823      	ldrh	r3, [r4, #0]
 8005834:	b29b      	uxth	r3, r3
 8005836:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800583a:	b29b      	uxth	r3, r3
 800583c:	8023      	strh	r3, [r4, #0]
 800583e:	8823      	ldrh	r3, [r4, #0]
 8005840:	b29b      	uxth	r3, r3
 8005842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584a:	b29b      	uxth	r3, r3
 800584c:	8023      	strh	r3, [r4, #0]
 800584e:	e03d      	b.n	80058cc <USB_EPStartXfer+0x45c>
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	2b3e      	cmp	r3, #62	; 0x3e
 8005854:	d810      	bhi.n	8005878 <USB_EPStartXfer+0x408>
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	085b      	lsrs	r3, r3, #1
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <USB_EPStartXfer+0x3fc>
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	3301      	adds	r3, #1
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	b29b      	uxth	r3, r3
 8005870:	029b      	lsls	r3, r3, #10
 8005872:	b29b      	uxth	r3, r3
 8005874:	8023      	strh	r3, [r4, #0]
 8005876:	e029      	b.n	80058cc <USB_EPStartXfer+0x45c>
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	f003 031f 	and.w	r3, r3, #31
 8005884:	2b00      	cmp	r3, #0
 8005886:	d102      	bne.n	800588e <USB_EPStartXfer+0x41e>
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	3b01      	subs	r3, #1
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	b29b      	uxth	r3, r3
 8005892:	029b      	lsls	r3, r3, #10
 8005894:	b29b      	uxth	r3, r3
 8005896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800589a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800589e:	b29b      	uxth	r3, r3
 80058a0:	8023      	strh	r3, [r4, #0]
 80058a2:	e013      	b.n	80058cc <USB_EPStartXfer+0x45c>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	785b      	ldrb	r3, [r3, #1]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d10f      	bne.n	80058cc <USB_EPStartXfer+0x45c>
 80058ac:	687c      	ldr	r4, [r7, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	441c      	add	r4, r3
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	4423      	add	r3, r4
 80058c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058c4:	461c      	mov	r4, r3
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	8023      	strh	r3, [r4, #0]
 80058cc:	687c      	ldr	r4, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d14e      	bne.n	8005974 <USB_EPStartXfer+0x504>
 80058d6:	687c      	ldr	r4, [r7, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058de:	b29b      	uxth	r3, r3
 80058e0:	441c      	add	r4, r3
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	4423      	add	r3, r4
 80058ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058ee:	461c      	mov	r4, r3
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10e      	bne.n	8005914 <USB_EPStartXfer+0x4a4>
 80058f6:	8823      	ldrh	r3, [r4, #0]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058fe:	b29b      	uxth	r3, r3
 8005900:	8023      	strh	r3, [r4, #0]
 8005902:	8823      	ldrh	r3, [r4, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590e:	b29b      	uxth	r3, r3
 8005910:	8023      	strh	r3, [r4, #0]
 8005912:	e043      	b.n	800599c <USB_EPStartXfer+0x52c>
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	2b3e      	cmp	r3, #62	; 0x3e
 8005918:	d816      	bhi.n	8005948 <USB_EPStartXfer+0x4d8>
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	085b      	lsrs	r3, r3, #1
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <USB_EPStartXfer+0x4c0>
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	3301      	adds	r3, #1
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	b29b      	uxth	r3, r3
 8005934:	029b      	lsls	r3, r3, #10
 8005936:	b29b      	uxth	r3, r3
 8005938:	8023      	strh	r3, [r4, #0]
 800593a:	e02f      	b.n	800599c <USB_EPStartXfer+0x52c>
 800593c:	ffff80c0 	.word	0xffff80c0
 8005940:	ffffc080 	.word	0xffffc080
 8005944:	ffff8080 	.word	0xffff8080
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	f003 031f 	and.w	r3, r3, #31
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <USB_EPStartXfer+0x4ee>
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	3b01      	subs	r3, #1
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	b29b      	uxth	r3, r3
 8005962:	029b      	lsls	r3, r3, #10
 8005964:	b29b      	uxth	r3, r3
 8005966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800596a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596e:	b29b      	uxth	r3, r3
 8005970:	8023      	strh	r3, [r4, #0]
 8005972:	e013      	b.n	800599c <USB_EPStartXfer+0x52c>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d10f      	bne.n	800599c <USB_EPStartXfer+0x52c>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005982:	b29b      	uxth	r3, r3
 8005984:	441c      	add	r4, r3
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	4423      	add	r3, r4
 800598e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	b29a      	uxth	r2, r3
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b2:	b29c      	uxth	r4, r3
 80059b4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80059b8:	b29c      	uxth	r4, r3
 80059ba:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80059be:	b29c      	uxth	r4, r3
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	441a      	add	r2, r3
 80059ca:	4b04      	ldr	r3, [pc, #16]	; (80059dc <USB_EPStartXfer+0x56c>)
 80059cc:	4323      	orrs	r3, r4
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3734      	adds	r7, #52	; 0x34
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd90      	pop	{r4, r7, pc}
 80059dc:	ffff8080 	.word	0xffff8080

080059e0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059e0:	b490      	push	{r4, r7}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	785b      	ldrb	r3, [r3, #1]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d018      	beq.n	8005a24 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a08:	b29c      	uxth	r4, r3
 8005a0a:	f084 0310 	eor.w	r3, r4, #16
 8005a0e:	b29c      	uxth	r4, r3
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <USB_EPSetStall+0x80>)
 8005a1c:	4323      	orrs	r3, r4
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	8013      	strh	r3, [r2, #0]
 8005a22:	e017      	b.n	8005a54 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	b29c      	uxth	r4, r3
 8005a3c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005a40:	b29c      	uxth	r4, r3
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	441a      	add	r2, r3
 8005a4c:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <USB_EPSetStall+0x80>)
 8005a4e:	4323      	orrs	r3, r4
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc90      	pop	{r4, r7}
 8005a5e:	4770      	bx	lr
 8005a60:	ffff8080 	.word	0xffff8080

08005a64 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a64:	b490      	push	{r4, r7}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	7b1b      	ldrb	r3, [r3, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d17d      	bne.n	8005b72 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d03d      	beq.n	8005afa <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29c      	uxth	r4, r3
 8005a8c:	4623      	mov	r3, r4
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d014      	beq.n	8005ac0 <USB_EPClearStall+0x5c>
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aac:	b29c      	uxth	r4, r3
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	441a      	add	r2, r3
 8005ab8:	4b31      	ldr	r3, [pc, #196]	; (8005b80 <USB_EPClearStall+0x11c>)
 8005aba:	4323      	orrs	r3, r4
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	78db      	ldrb	r3, [r3, #3]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d054      	beq.n	8005b72 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ade:	b29c      	uxth	r4, r3
 8005ae0:	f084 0320 	eor.w	r3, r4, #32
 8005ae4:	b29c      	uxth	r4, r3
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	441a      	add	r2, r3
 8005af0:	4b24      	ldr	r3, [pc, #144]	; (8005b84 <USB_EPClearStall+0x120>)
 8005af2:	4323      	orrs	r3, r4
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	8013      	strh	r3, [r2, #0]
 8005af8:	e03b      	b.n	8005b72 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b29c      	uxth	r4, r3
 8005b08:	4623      	mov	r3, r4
 8005b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d014      	beq.n	8005b3c <USB_EPClearStall+0xd8>
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b28:	b29c      	uxth	r4, r3
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	441a      	add	r2, r3
 8005b34:	4b14      	ldr	r3, [pc, #80]	; (8005b88 <USB_EPClearStall+0x124>)
 8005b36:	4323      	orrs	r3, r4
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	b29c      	uxth	r4, r3
 8005b54:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005b58:	b29c      	uxth	r4, r3
 8005b5a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005b5e:	b29c      	uxth	r4, r3
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	441a      	add	r2, r3
 8005b6a:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <USB_EPClearStall+0x120>)
 8005b6c:	4323      	orrs	r3, r4
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc90      	pop	{r4, r7}
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	ffff80c0 	.word	0xffff80c0
 8005b84:	ffff8080 	.word	0xffff8080
 8005b88:	ffffc080 	.word	0xffffc080

08005b8c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d103      	bne.n	8005ba6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2280      	movs	r2, #128	; 0x80
 8005ba2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr

08005bb2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr

08005bc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr

08005bda <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005bec:	68fb      	ldr	r3, [r7, #12]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bc80      	pop	{r7}
 8005c0c:	4770      	bx	lr

08005c0e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b08d      	sub	sp, #52	; 0x34
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	4611      	mov	r1, r2
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	80fb      	strh	r3, [r7, #6]
 8005c20:	4613      	mov	r3, r2
 8005c22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005c24:	88bb      	ldrh	r3, [r7, #4]
 8005c26:	3301      	adds	r3, #1
 8005c28:	085b      	lsrs	r3, r3, #1
 8005c2a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005c34:	88fb      	ldrh	r3, [r7, #6]
 8005c36:	005a      	lsls	r2, r3, #1
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c40:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c46:	e01e      	b.n	8005c86 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	3301      	adds	r3, #1
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	3302      	adds	r3, #2
 8005c72:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	3302      	adds	r3, #2
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	3b01      	subs	r3, #1
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1dd      	bne.n	8005c48 <USB_WritePMA+0x3a>
  }
}
 8005c8c:	bf00      	nop
 8005c8e:	3734      	adds	r7, #52	; 0x34
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc80      	pop	{r7}
 8005c94:	4770      	bx	lr

08005c96 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b08b      	sub	sp, #44	; 0x2c
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	80fb      	strh	r3, [r7, #6]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005cac:	88bb      	ldrh	r3, [r7, #4]
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	005a      	lsls	r2, r3, #1
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cc8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cce:	e01b      	b.n	8005d08 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	3302      	adds	r3, #2
 8005cdc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	0a1b      	lsrs	r3, r3, #8
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	3302      	adds	r3, #2
 8005d00:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	3b01      	subs	r3, #1
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1e0      	bne.n	8005cd0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005d0e:	88bb      	ldrh	r3, [r7, #4]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d007      	beq.n	8005d2a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	701a      	strb	r2, [r3, #0]
  }
}
 8005d2a:	bf00      	nop
 8005d2c:	372c      	adds	r7, #44	; 0x2c
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	7c1b      	ldrb	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d115      	bne.n	8005d78 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d50:	2202      	movs	r2, #2
 8005d52:	2181      	movs	r1, #129	; 0x81
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f001 fe6c 	bl	8007a32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d64:	2202      	movs	r2, #2
 8005d66:	2101      	movs	r1, #1
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f001 fe62 	bl	8007a32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005d76:	e012      	b.n	8005d9e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d78:	2340      	movs	r3, #64	; 0x40
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	2181      	movs	r1, #129	; 0x81
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f001 fe57 	bl	8007a32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d8a:	2340      	movs	r3, #64	; 0x40
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	2101      	movs	r1, #1
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f001 fe4e 	bl	8007a32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d9e:	2308      	movs	r3, #8
 8005da0:	2203      	movs	r2, #3
 8005da2:	2182      	movs	r1, #130	; 0x82
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 fe44 	bl	8007a32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005db0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005db4:	f001 ff5e 	bl	8007c74 <USBD_static_malloc>
 8005db8:	4602      	mov	r2, r0
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d102      	bne.n	8005dd0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
 8005dce:	e026      	b.n	8005e1e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	7c1b      	ldrb	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e04:	2101      	movs	r1, #1
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fefd 	bl	8007c06 <USBD_LL_PrepareReceive>
 8005e0c:	e007      	b.n	8005e1e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e14:	2340      	movs	r3, #64	; 0x40
 8005e16:	2101      	movs	r1, #1
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f001 fef4 	bl	8007c06 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005e38:	2181      	movs	r1, #129	; 0x81
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f001 fe1f 	bl	8007a7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005e46:	2101      	movs	r1, #1
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f001 fe18 	bl	8007a7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005e56:	2182      	movs	r1, #130	; 0x82
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f001 fe10 	bl	8007a7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00e      	beq.n	8005e8c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f001 ff04 	bl	8007c8c <USBD_static_free>
    pdev->pClassData = NULL;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b086      	sub	sp, #24
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d039      	beq.n	8005f34 <USBD_CDC_Setup+0x9e>
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d17c      	bne.n	8005fbe <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	88db      	ldrh	r3, [r3, #6]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d029      	beq.n	8005f20 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	b25b      	sxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	da11      	bge.n	8005efa <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005ee2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	88d2      	ldrh	r2, [r2, #6]
 8005ee8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005eea:	6939      	ldr	r1, [r7, #16]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	88db      	ldrh	r3, [r3, #6]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f001 f9f6 	bl	80072e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005ef8:	e068      	b.n	8005fcc <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	785a      	ldrb	r2, [r3, #1]
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	88db      	ldrh	r3, [r3, #6]
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005f10:	6939      	ldr	r1, [r7, #16]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	88db      	ldrh	r3, [r3, #6]
 8005f16:	461a      	mov	r2, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 fa11 	bl	8007340 <USBD_CtlPrepareRx>
      break;
 8005f1e:	e055      	b.n	8005fcc <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	7850      	ldrb	r0, [r2, #1]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	4798      	blx	r3
      break;
 8005f32:	e04b      	b.n	8005fcc <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	2b0a      	cmp	r3, #10
 8005f3a:	d017      	beq.n	8005f6c <USBD_CDC_Setup+0xd6>
 8005f3c:	2b0b      	cmp	r3, #11
 8005f3e:	d029      	beq.n	8005f94 <USBD_CDC_Setup+0xfe>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d133      	bne.n	8005fac <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d107      	bne.n	8005f5e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005f4e:	f107 030c 	add.w	r3, r7, #12
 8005f52:	2202      	movs	r2, #2
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f001 f9c4 	bl	80072e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f5c:	e02e      	b.n	8005fbc <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f001 f955 	bl	8007210 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f66:	2302      	movs	r3, #2
 8005f68:	75fb      	strb	r3, [r7, #23]
          break;
 8005f6a:	e027      	b.n	8005fbc <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d107      	bne.n	8005f86 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f76:	f107 030f 	add.w	r3, r7, #15
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f001 f9b0 	bl	80072e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f84:	e01a      	b.n	8005fbc <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 f941 	bl	8007210 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f8e:	2302      	movs	r3, #2
 8005f90:	75fb      	strb	r3, [r7, #23]
          break;
 8005f92:	e013      	b.n	8005fbc <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d00d      	beq.n	8005fba <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f001 f935 	bl	8007210 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005faa:	e006      	b.n	8005fba <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f001 f92e 	bl	8007210 <USBD_CtlError>
          ret = USBD_FAIL;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	75fb      	strb	r3, [r7, #23]
          break;
 8005fb8:	e000      	b.n	8005fbc <USBD_CDC_Setup+0x126>
          break;
 8005fba:	bf00      	nop
      }
      break;
 8005fbc:	e006      	b.n	8005fcc <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005fbe:	6839      	ldr	r1, [r7, #0]
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 f925 	bl	8007210 <USBD_CtlError>
      ret = USBD_FAIL;
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8005fca:	bf00      	nop
  }

  return ret;
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ff0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d037      	beq.n	800606c <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005ffc:	78fa      	ldrb	r2, [r7, #3]
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	440b      	add	r3, r1
 800600a:	331c      	adds	r3, #28
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d026      	beq.n	8006060 <USBD_CDC_DataIn+0x8a>
 8006012:	78fa      	ldrb	r2, [r7, #3]
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	331c      	adds	r3, #28
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	78fa      	ldrb	r2, [r7, #3]
 8006026:	68b9      	ldr	r1, [r7, #8]
 8006028:	0152      	lsls	r2, r2, #5
 800602a:	440a      	add	r2, r1
 800602c:	3238      	adds	r2, #56	; 0x38
 800602e:	6812      	ldr	r2, [r2, #0]
 8006030:	fbb3 f1f2 	udiv	r1, r3, r2
 8006034:	fb02 f201 	mul.w	r2, r2, r1
 8006038:	1a9b      	subs	r3, r3, r2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d110      	bne.n	8006060 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800603e:	78fa      	ldrb	r2, [r7, #3]
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	440b      	add	r3, r1
 800604c:	331c      	adds	r3, #28
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006052:	78f9      	ldrb	r1, [r7, #3]
 8006054:	2300      	movs	r3, #0
 8006056:	2200      	movs	r2, #0
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f001 fdb1 	bl	8007bc0 <USBD_LL_Transmit>
 800605e:	e003      	b.n	8006068 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	e000      	b.n	800606e <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 800606c:	2302      	movs	r3, #2
  }
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	460b      	mov	r3, r1
 8006080:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006088:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 fddc 	bl	8007c4c <USBD_LL_GetRxDataSize>
 8006094:	4602      	mov	r2, r0
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00d      	beq.n	80060c2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80060ba:	4611      	mov	r1, r2
 80060bc:	4798      	blx	r3

    return USBD_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	e000      	b.n	80060c4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80060c2:	2302      	movs	r3, #2
  }
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060da:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d015      	beq.n	8006112 <USBD_CDC_EP0_RxReady+0x46>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80060ec:	2bff      	cmp	r3, #255	; 0xff
 80060ee:	d010      	beq.n	8006112 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80060fe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006106:	b292      	uxth	r2, r2
 8006108:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	22ff      	movs	r2, #255	; 0xff
 800610e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2243      	movs	r2, #67	; 0x43
 8006128:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800612a:	4b03      	ldr	r3, [pc, #12]	; (8006138 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	bc80      	pop	{r7}
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	20000094 	.word	0x20000094

0800613c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2243      	movs	r2, #67	; 0x43
 8006148:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800614a:	4b03      	ldr	r3, [pc, #12]	; (8006158 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	20000050 	.word	0x20000050

0800615c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2243      	movs	r2, #67	; 0x43
 8006168:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800616a:	4b03      	ldr	r3, [pc, #12]	; (8006178 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	bc80      	pop	{r7}
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	200000d8 	.word	0x200000d8

0800617c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	220a      	movs	r2, #10
 8006188:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800618a:	4b03      	ldr	r3, [pc, #12]	; (8006198 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	2000000c 	.word	0x2000000c

0800619c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80061a6:	2302      	movs	r3, #2
 80061a8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bc80      	pop	{r7}
 80061c6:	4770      	bx	lr

080061c8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061dc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80061e6:	88fa      	ldrh	r2, [r7, #6]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bc80      	pop	{r7}
 80061f8:	4770      	bx	lr

080061fa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	bc80      	pop	{r7}
 800621e:	4770      	bx	lr

08006220 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800622e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01c      	beq.n	8006274 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006240:	2b00      	cmp	r3, #0
 8006242:	d115      	bne.n	8006270 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006262:	b29b      	uxth	r3, r3
 8006264:	2181      	movs	r1, #129	; 0x81
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f001 fcaa 	bl	8007bc0 <USBD_LL_Transmit>

      return USBD_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	e002      	b.n	8006276 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006274:	2302      	movs	r3, #2
  }
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d017      	beq.n	80062c8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	7c1b      	ldrb	r3, [r3, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d109      	bne.n	80062b4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062aa:	2101      	movs	r1, #1
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 fcaa 	bl	8007c06 <USBD_LL_PrepareReceive>
 80062b2:	e007      	b.n	80062c4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062ba:	2340      	movs	r3, #64	; 0x40
 80062bc:	2101      	movs	r1, #1
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f001 fca1 	bl	8007c06 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	e000      	b.n	80062ca <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80062c8:	2302      	movs	r3, #2
  }
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	4613      	mov	r3, r2
 80062de:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80062e6:	2302      	movs	r3, #2
 80062e8:	e01a      	b.n	8006320 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	79fa      	ldrb	r2, [r7, #7]
 8006316:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f001 fb15 	bl	8007948 <USBD_LL_Init>

  return USBD_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d006      	beq.n	800634a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	73fb      	strb	r3, [r7, #15]
 8006348:	e001      	b.n	800634e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800634a:	2302      	movs	r3, #2
 800634c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800634e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr

0800635a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b082      	sub	sp, #8
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 fb4a 	bl	80079fc <USBD_LL_Start>

  return USBD_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	bc80      	pop	{r7}
 8006384:	4770      	bx	lr

08006386 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006392:	2302      	movs	r3, #2
 8006394:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00c      	beq.n	80063ba <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	78fa      	ldrb	r2, [r7, #3]
 80063aa:	4611      	mov	r1, r2
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	78fa      	ldrb	r2, [r7, #3]
 80063da:	4611      	mov	r1, r2
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3

  return USBD_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fecb 	bl	8007198 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006410:	461a      	mov	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800641e:	f003 031f 	and.w	r3, r3, #31
 8006422:	2b01      	cmp	r3, #1
 8006424:	d00c      	beq.n	8006440 <USBD_LL_SetupStage+0x56>
 8006426:	2b01      	cmp	r3, #1
 8006428:	d302      	bcc.n	8006430 <USBD_LL_SetupStage+0x46>
 800642a:	2b02      	cmp	r3, #2
 800642c:	d010      	beq.n	8006450 <USBD_LL_SetupStage+0x66>
 800642e:	e017      	b.n	8006460 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f9cb 	bl	80067d4 <USBD_StdDevReq>
      break;
 800643e:	e01a      	b.n	8006476 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fa2d 	bl	80068a8 <USBD_StdItfReq>
      break;
 800644e:	e012      	b.n	8006476 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fa6b 	bl	8006934 <USBD_StdEPReq>
      break;
 800645e:	e00a      	b.n	8006476 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006466:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800646a:	b2db      	uxtb	r3, r3
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f001 fb24 	bl	8007abc <USBD_LL_StallEP>
      break;
 8006474:	bf00      	nop
  }

  return USBD_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	460b      	mov	r3, r1
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800648e:	7afb      	ldrb	r3, [r7, #11]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d14b      	bne.n	800652c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800649a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d134      	bne.n	8006510 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d919      	bls.n	80064e6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	1ad2      	subs	r2, r2, r3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d203      	bcs.n	80064d4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	e002      	b.n	80064da <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80064d8:	b29b      	uxth	r3, r3
 80064da:	461a      	mov	r2, r3
 80064dc:	6879      	ldr	r1, [r7, #4]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 ff4c 	bl	800737c <USBD_CtlContinueRx>
 80064e4:	e038      	b.n	8006558 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d105      	bne.n	8006508 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 ff49 	bl	80073a0 <USBD_CtlSendStatus>
 800650e:	e023      	b.n	8006558 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006516:	2b05      	cmp	r3, #5
 8006518:	d11e      	bne.n	8006558 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006522:	2100      	movs	r1, #0
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f001 fac9 	bl	8007abc <USBD_LL_StallEP>
 800652a:	e015      	b.n	8006558 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00d      	beq.n	8006554 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800653e:	2b03      	cmp	r3, #3
 8006540:	d108      	bne.n	8006554 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	7afa      	ldrb	r2, [r7, #11]
 800654c:	4611      	mov	r1, r2
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	4798      	blx	r3
 8006552:	e001      	b.n	8006558 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006554:	2302      	movs	r3, #2
 8006556:	e000      	b.n	800655a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b086      	sub	sp, #24
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	460b      	mov	r3, r1
 800656c:	607a      	str	r2, [r7, #4]
 800656e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006570:	7afb      	ldrb	r3, [r7, #11]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d17f      	bne.n	8006676 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	3314      	adds	r3, #20
 800657a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006582:	2b02      	cmp	r3, #2
 8006584:	d15c      	bne.n	8006640 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	429a      	cmp	r2, r3
 8006590:	d915      	bls.n	80065be <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	1ad2      	subs	r2, r2, r3
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 feb6 	bl	800731c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065b0:	2300      	movs	r3, #0
 80065b2:	2200      	movs	r2, #0
 80065b4:	2100      	movs	r1, #0
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f001 fb25 	bl	8007c06 <USBD_LL_PrepareReceive>
 80065bc:	e04e      	b.n	800665c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	6912      	ldr	r2, [r2, #16]
 80065c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80065ca:	fb02 f201 	mul.w	r2, r2, r1
 80065ce:	1a9b      	subs	r3, r3, r2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d11c      	bne.n	800660e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80065dc:	429a      	cmp	r2, r3
 80065de:	d316      	bcc.n	800660e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d20f      	bcs.n	800660e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065ee:	2200      	movs	r2, #0
 80065f0:	2100      	movs	r1, #0
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 fe92 	bl	800731c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006600:	2300      	movs	r3, #0
 8006602:	2200      	movs	r2, #0
 8006604:	2100      	movs	r1, #0
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f001 fafd 	bl	8007c06 <USBD_LL_PrepareReceive>
 800660c:	e026      	b.n	800665c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006620:	2b03      	cmp	r3, #3
 8006622:	d105      	bne.n	8006630 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006630:	2180      	movs	r1, #128	; 0x80
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f001 fa42 	bl	8007abc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 fec4 	bl	80073c6 <USBD_CtlReceiveStatus>
 800663e:	e00d      	b.n	800665c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006646:	2b04      	cmp	r3, #4
 8006648:	d004      	beq.n	8006654 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006650:	2b00      	cmp	r3, #0
 8006652:	d103      	bne.n	800665c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006654:	2180      	movs	r1, #128	; 0x80
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f001 fa30 	bl	8007abc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006662:	2b01      	cmp	r3, #1
 8006664:	d11d      	bne.n	80066a2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f7ff fe83 	bl	8006372 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006674:	e015      	b.n	80066a2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00d      	beq.n	800669e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006688:	2b03      	cmp	r3, #3
 800668a:	d108      	bne.n	800669e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	7afa      	ldrb	r2, [r7, #11]
 8006696:	4611      	mov	r1, r2
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	4798      	blx	r3
 800669c:	e001      	b.n	80066a2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800669e:	2302      	movs	r3, #2
 80066a0:	e000      	b.n	80066a4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066b4:	2340      	movs	r3, #64	; 0x40
 80066b6:	2200      	movs	r2, #0
 80066b8:	2100      	movs	r1, #0
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 f9b9 	bl	8007a32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2240      	movs	r2, #64	; 0x40
 80066cc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066d0:	2340      	movs	r3, #64	; 0x40
 80066d2:	2200      	movs	r2, #0
 80066d4:	2180      	movs	r1, #128	; 0x80
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 f9ab 	bl	8007a32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2240      	movs	r2, #64	; 0x40
 80066e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670c:	2b00      	cmp	r3, #0
 800670e:	d009      	beq.n	8006724 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6852      	ldr	r2, [r2, #4]
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	4611      	mov	r1, r2
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	4798      	blx	r3
  }

  return USBD_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	78fa      	ldrb	r2, [r7, #3]
 800673e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr

0800674c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2204      	movs	r2, #4
 8006764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	bc80      	pop	{r7}
 8006772:	4770      	bx	lr

08006774 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006782:	2b04      	cmp	r3, #4
 8006784:	d105      	bne.n	8006792 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr

0800679e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b082      	sub	sp, #8
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d10b      	bne.n	80067c8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067ea:	2b20      	cmp	r3, #32
 80067ec:	d004      	beq.n	80067f8 <USBD_StdDevReq+0x24>
 80067ee:	2b40      	cmp	r3, #64	; 0x40
 80067f0:	d002      	beq.n	80067f8 <USBD_StdDevReq+0x24>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <USBD_StdDevReq+0x34>
 80067f6:	e04c      	b.n	8006892 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
      break;
 8006806:	e049      	b.n	800689c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	785b      	ldrb	r3, [r3, #1]
 800680c:	2b09      	cmp	r3, #9
 800680e:	d83a      	bhi.n	8006886 <USBD_StdDevReq+0xb2>
 8006810:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <USBD_StdDevReq+0x44>)
 8006812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006816:	bf00      	nop
 8006818:	08006869 	.word	0x08006869
 800681c:	0800687d 	.word	0x0800687d
 8006820:	08006887 	.word	0x08006887
 8006824:	08006873 	.word	0x08006873
 8006828:	08006887 	.word	0x08006887
 800682c:	0800684b 	.word	0x0800684b
 8006830:	08006841 	.word	0x08006841
 8006834:	08006887 	.word	0x08006887
 8006838:	0800685f 	.word	0x0800685f
 800683c:	08006855 	.word	0x08006855
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f9d4 	bl	8006bf0 <USBD_GetDescriptor>
          break;
 8006848:	e022      	b.n	8006890 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fb37 	bl	8006ec0 <USBD_SetAddress>
          break;
 8006852:	e01d      	b.n	8006890 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fb74 	bl	8006f44 <USBD_SetConfig>
          break;
 800685c:	e018      	b.n	8006890 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fbfd 	bl	8007060 <USBD_GetConfig>
          break;
 8006866:	e013      	b.n	8006890 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fc2c 	bl	80070c8 <USBD_GetStatus>
          break;
 8006870:	e00e      	b.n	8006890 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fc5a 	bl	800712e <USBD_SetFeature>
          break;
 800687a:	e009      	b.n	8006890 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fc69 	bl	8007156 <USBD_ClrFeature>
          break;
 8006884:	e004      	b.n	8006890 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fcc1 	bl	8007210 <USBD_CtlError>
          break;
 800688e:	bf00      	nop
      }
      break;
 8006890:	e004      	b.n	800689c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fcbb 	bl	8007210 <USBD_CtlError>
      break;
 800689a:	bf00      	nop
  }

  return ret;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop

080068a8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068be:	2b20      	cmp	r3, #32
 80068c0:	d003      	beq.n	80068ca <USBD_StdItfReq+0x22>
 80068c2:	2b40      	cmp	r3, #64	; 0x40
 80068c4:	d001      	beq.n	80068ca <USBD_StdItfReq+0x22>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d12a      	bne.n	8006920 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d0:	3b01      	subs	r3, #1
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d81d      	bhi.n	8006912 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	889b      	ldrh	r3, [r3, #4]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d813      	bhi.n	8006908 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	4798      	blx	r3
 80068ee:	4603      	mov	r3, r0
 80068f0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	88db      	ldrh	r3, [r3, #6]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d110      	bne.n	800691c <USBD_StdItfReq+0x74>
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10d      	bne.n	800691c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fd4d 	bl	80073a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006906:	e009      	b.n	800691c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fc80 	bl	8007210 <USBD_CtlError>
          break;
 8006910:	e004      	b.n	800691c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fc7b 	bl	8007210 <USBD_CtlError>
          break;
 800691a:	e000      	b.n	800691e <USBD_StdItfReq+0x76>
          break;
 800691c:	bf00      	nop
      }
      break;
 800691e:	e004      	b.n	800692a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fc74 	bl	8007210 <USBD_CtlError>
      break;
 8006928:	bf00      	nop
  }

  return USBD_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	889b      	ldrh	r3, [r3, #4]
 8006946:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006950:	2b20      	cmp	r3, #32
 8006952:	d004      	beq.n	800695e <USBD_StdEPReq+0x2a>
 8006954:	2b40      	cmp	r3, #64	; 0x40
 8006956:	d002      	beq.n	800695e <USBD_StdEPReq+0x2a>
 8006958:	2b00      	cmp	r3, #0
 800695a:	d008      	beq.n	800696e <USBD_StdEPReq+0x3a>
 800695c:	e13d      	b.n	8006bda <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
      break;
 800696c:	e13a      	b.n	8006be4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006976:	2b20      	cmp	r3, #32
 8006978:	d10a      	bne.n	8006990 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	4798      	blx	r3
 8006988:	4603      	mov	r3, r0
 800698a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	e12a      	b.n	8006be6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d03e      	beq.n	8006a16 <USBD_StdEPReq+0xe2>
 8006998:	2b03      	cmp	r3, #3
 800699a:	d002      	beq.n	80069a2 <USBD_StdEPReq+0x6e>
 800699c:	2b00      	cmp	r3, #0
 800699e:	d070      	beq.n	8006a82 <USBD_StdEPReq+0x14e>
 80069a0:	e115      	b.n	8006bce <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d002      	beq.n	80069b2 <USBD_StdEPReq+0x7e>
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d015      	beq.n	80069dc <USBD_StdEPReq+0xa8>
 80069b0:	e02b      	b.n	8006a0a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00c      	beq.n	80069d2 <USBD_StdEPReq+0x9e>
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
 80069ba:	2b80      	cmp	r3, #128	; 0x80
 80069bc:	d009      	beq.n	80069d2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 f87a 	bl	8007abc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80069c8:	2180      	movs	r1, #128	; 0x80
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 f876 	bl	8007abc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069d0:	e020      	b.n	8006a14 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fc1b 	bl	8007210 <USBD_CtlError>
              break;
 80069da:	e01b      	b.n	8006a14 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	885b      	ldrh	r3, [r3, #2]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10e      	bne.n	8006a02 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00b      	beq.n	8006a02 <USBD_StdEPReq+0xce>
 80069ea:	7bbb      	ldrb	r3, [r7, #14]
 80069ec:	2b80      	cmp	r3, #128	; 0x80
 80069ee:	d008      	beq.n	8006a02 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	88db      	ldrh	r3, [r3, #6]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d104      	bne.n	8006a02 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80069f8:	7bbb      	ldrb	r3, [r7, #14]
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 f85d 	bl	8007abc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fccc 	bl	80073a0 <USBD_CtlSendStatus>

              break;
 8006a08:	e004      	b.n	8006a14 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fbff 	bl	8007210 <USBD_CtlError>
              break;
 8006a12:	bf00      	nop
          }
          break;
 8006a14:	e0e0      	b.n	8006bd8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d002      	beq.n	8006a26 <USBD_StdEPReq+0xf2>
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d015      	beq.n	8006a50 <USBD_StdEPReq+0x11c>
 8006a24:	e026      	b.n	8006a74 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a26:	7bbb      	ldrb	r3, [r7, #14]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00c      	beq.n	8006a46 <USBD_StdEPReq+0x112>
 8006a2c:	7bbb      	ldrb	r3, [r7, #14]
 8006a2e:	2b80      	cmp	r3, #128	; 0x80
 8006a30:	d009      	beq.n	8006a46 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 f840 	bl	8007abc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006a3c:	2180      	movs	r1, #128	; 0x80
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 f83c 	bl	8007abc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a44:	e01c      	b.n	8006a80 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fbe1 	bl	8007210 <USBD_CtlError>
              break;
 8006a4e:	e017      	b.n	8006a80 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	885b      	ldrh	r3, [r3, #2]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d112      	bne.n	8006a7e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d004      	beq.n	8006a6c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a62:	7bbb      	ldrb	r3, [r7, #14]
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 f847 	bl	8007afa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fc97 	bl	80073a0 <USBD_CtlSendStatus>
              }
              break;
 8006a72:	e004      	b.n	8006a7e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fbca 	bl	8007210 <USBD_CtlError>
              break;
 8006a7c:	e000      	b.n	8006a80 <USBD_StdEPReq+0x14c>
              break;
 8006a7e:	bf00      	nop
          }
          break;
 8006a80:	e0aa      	b.n	8006bd8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d002      	beq.n	8006a92 <USBD_StdEPReq+0x15e>
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d032      	beq.n	8006af6 <USBD_StdEPReq+0x1c2>
 8006a90:	e097      	b.n	8006bc2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d007      	beq.n	8006aa8 <USBD_StdEPReq+0x174>
 8006a98:	7bbb      	ldrb	r3, [r7, #14]
 8006a9a:	2b80      	cmp	r3, #128	; 0x80
 8006a9c:	d004      	beq.n	8006aa8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fbb5 	bl	8007210 <USBD_CtlError>
                break;
 8006aa6:	e091      	b.n	8006bcc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	da0b      	bge.n	8006ac8 <USBD_StdEPReq+0x194>
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
 8006ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	3310      	adds	r3, #16
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	e00b      	b.n	8006ae0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	4413      	add	r3, r2
 8006ade:	3304      	adds	r3, #4
 8006ae0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2202      	movs	r2, #2
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fbf8 	bl	80072e4 <USBD_CtlSendData>
              break;
 8006af4:	e06a      	b.n	8006bcc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006af6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	da11      	bge.n	8006b22 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
 8006b00:	f003 020f 	and.w	r2, r3, #15
 8006b04:	6879      	ldr	r1, [r7, #4]
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	440b      	add	r3, r1
 8006b10:	3318      	adds	r3, #24
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d117      	bne.n	8006b48 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fb78 	bl	8007210 <USBD_CtlError>
                  break;
 8006b20:	e054      	b.n	8006bcc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	f003 020f 	and.w	r2, r3, #15
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	440b      	add	r3, r1
 8006b34:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d104      	bne.n	8006b48 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fb65 	bl	8007210 <USBD_CtlError>
                  break;
 8006b46:	e041      	b.n	8006bcc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	da0b      	bge.n	8006b68 <USBD_StdEPReq+0x234>
 8006b50:	7bbb      	ldrb	r3, [r7, #14]
 8006b52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	3310      	adds	r3, #16
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	4413      	add	r3, r2
 8006b64:	3304      	adds	r3, #4
 8006b66:	e00b      	b.n	8006b80 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b6e:	4613      	mov	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3304      	adds	r3, #4
 8006b80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <USBD_StdEPReq+0x25a>
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	2b80      	cmp	r3, #128	; 0x80
 8006b8c:	d103      	bne.n	8006b96 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e00e      	b.n	8006bb4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 ffcc 	bl	8007b38 <USBD_LL_IsStallEP>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	e002      	b.n	8006bb4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	4619      	mov	r1, r3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fb92 	bl	80072e4 <USBD_CtlSendData>
              break;
 8006bc0:	e004      	b.n	8006bcc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fb23 	bl	8007210 <USBD_CtlError>
              break;
 8006bca:	bf00      	nop
          }
          break;
 8006bcc:	e004      	b.n	8006bd8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fb1d 	bl	8007210 <USBD_CtlError>
          break;
 8006bd6:	bf00      	nop
      }
      break;
 8006bd8:	e004      	b.n	8006be4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fb17 	bl	8007210 <USBD_CtlError>
      break;
 8006be2:	bf00      	nop
  }

  return ret;
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
	...

08006bf0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	885b      	ldrh	r3, [r3, #2]
 8006c0a:	0a1b      	lsrs	r3, r3, #8
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	2b06      	cmp	r3, #6
 8006c12:	f200 8128 	bhi.w	8006e66 <USBD_GetDescriptor+0x276>
 8006c16:	a201      	add	r2, pc, #4	; (adr r2, 8006c1c <USBD_GetDescriptor+0x2c>)
 8006c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1c:	08006c39 	.word	0x08006c39
 8006c20:	08006c51 	.word	0x08006c51
 8006c24:	08006c91 	.word	0x08006c91
 8006c28:	08006e67 	.word	0x08006e67
 8006c2c:	08006e67 	.word	0x08006e67
 8006c30:	08006e07 	.word	0x08006e07
 8006c34:	08006e33 	.word	0x08006e33
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	7c12      	ldrb	r2, [r2, #16]
 8006c44:	f107 0108 	add.w	r1, r7, #8
 8006c48:	4610      	mov	r0, r2
 8006c4a:	4798      	blx	r3
 8006c4c:	60f8      	str	r0, [r7, #12]
      break;
 8006c4e:	e112      	b.n	8006e76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	7c1b      	ldrb	r3, [r3, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10d      	bne.n	8006c74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c60:	f107 0208 	add.w	r2, r7, #8
 8006c64:	4610      	mov	r0, r2
 8006c66:	4798      	blx	r3
 8006c68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	2202      	movs	r2, #2
 8006c70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c72:	e100      	b.n	8006e76 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	f107 0208 	add.w	r2, r7, #8
 8006c80:	4610      	mov	r0, r2
 8006c82:	4798      	blx	r3
 8006c84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	701a      	strb	r2, [r3, #0]
      break;
 8006c8e:	e0f2      	b.n	8006e76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	885b      	ldrh	r3, [r3, #2]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b05      	cmp	r3, #5
 8006c98:	f200 80ac 	bhi.w	8006df4 <USBD_GetDescriptor+0x204>
 8006c9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ca4 <USBD_GetDescriptor+0xb4>)
 8006c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca2:	bf00      	nop
 8006ca4:	08006cbd 	.word	0x08006cbd
 8006ca8:	08006cf1 	.word	0x08006cf1
 8006cac:	08006d25 	.word	0x08006d25
 8006cb0:	08006d59 	.word	0x08006d59
 8006cb4:	08006d8d 	.word	0x08006d8d
 8006cb8:	08006dc1 	.word	0x08006dc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00b      	beq.n	8006ce0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	7c12      	ldrb	r2, [r2, #16]
 8006cd4:	f107 0108 	add.w	r1, r7, #8
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4798      	blx	r3
 8006cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cde:	e091      	b.n	8006e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fa94 	bl	8007210 <USBD_CtlError>
            err++;
 8006ce8:	7afb      	ldrb	r3, [r7, #11]
 8006cea:	3301      	adds	r3, #1
 8006cec:	72fb      	strb	r3, [r7, #11]
          break;
 8006cee:	e089      	b.n	8006e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00b      	beq.n	8006d14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	7c12      	ldrb	r2, [r2, #16]
 8006d08:	f107 0108 	add.w	r1, r7, #8
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4798      	blx	r3
 8006d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d12:	e077      	b.n	8006e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fa7a 	bl	8007210 <USBD_CtlError>
            err++;
 8006d1c:	7afb      	ldrb	r3, [r7, #11]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	72fb      	strb	r3, [r7, #11]
          break;
 8006d22:	e06f      	b.n	8006e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00b      	beq.n	8006d48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	7c12      	ldrb	r2, [r2, #16]
 8006d3c:	f107 0108 	add.w	r1, r7, #8
 8006d40:	4610      	mov	r0, r2
 8006d42:	4798      	blx	r3
 8006d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d46:	e05d      	b.n	8006e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fa60 	bl	8007210 <USBD_CtlError>
            err++;
 8006d50:	7afb      	ldrb	r3, [r7, #11]
 8006d52:	3301      	adds	r3, #1
 8006d54:	72fb      	strb	r3, [r7, #11]
          break;
 8006d56:	e055      	b.n	8006e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00b      	beq.n	8006d7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	7c12      	ldrb	r2, [r2, #16]
 8006d70:	f107 0108 	add.w	r1, r7, #8
 8006d74:	4610      	mov	r0, r2
 8006d76:	4798      	blx	r3
 8006d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d7a:	e043      	b.n	8006e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fa46 	bl	8007210 <USBD_CtlError>
            err++;
 8006d84:	7afb      	ldrb	r3, [r7, #11]
 8006d86:	3301      	adds	r3, #1
 8006d88:	72fb      	strb	r3, [r7, #11]
          break;
 8006d8a:	e03b      	b.n	8006e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00b      	beq.n	8006db0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	7c12      	ldrb	r2, [r2, #16]
 8006da4:	f107 0108 	add.w	r1, r7, #8
 8006da8:	4610      	mov	r0, r2
 8006daa:	4798      	blx	r3
 8006dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dae:	e029      	b.n	8006e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fa2c 	bl	8007210 <USBD_CtlError>
            err++;
 8006db8:	7afb      	ldrb	r3, [r7, #11]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8006dbe:	e021      	b.n	8006e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00b      	beq.n	8006de4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	7c12      	ldrb	r2, [r2, #16]
 8006dd8:	f107 0108 	add.w	r1, r7, #8
 8006ddc:	4610      	mov	r0, r2
 8006dde:	4798      	blx	r3
 8006de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006de2:	e00f      	b.n	8006e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fa12 	bl	8007210 <USBD_CtlError>
            err++;
 8006dec:	7afb      	ldrb	r3, [r7, #11]
 8006dee:	3301      	adds	r3, #1
 8006df0:	72fb      	strb	r3, [r7, #11]
          break;
 8006df2:	e007      	b.n	8006e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fa0a 	bl	8007210 <USBD_CtlError>
          err++;
 8006dfc:	7afb      	ldrb	r3, [r7, #11]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006e02:	e038      	b.n	8006e76 <USBD_GetDescriptor+0x286>
 8006e04:	e037      	b.n	8006e76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	7c1b      	ldrb	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e16:	f107 0208 	add.w	r2, r7, #8
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	4798      	blx	r3
 8006e1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e20:	e029      	b.n	8006e76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f9f3 	bl	8007210 <USBD_CtlError>
        err++;
 8006e2a:	7afb      	ldrb	r3, [r7, #11]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	72fb      	strb	r3, [r7, #11]
      break;
 8006e30:	e021      	b.n	8006e76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	7c1b      	ldrb	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10d      	bne.n	8006e56 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e42:	f107 0208 	add.w	r2, r7, #8
 8006e46:	4610      	mov	r0, r2
 8006e48:	4798      	blx	r3
 8006e4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	2207      	movs	r2, #7
 8006e52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e54:	e00f      	b.n	8006e76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f9d9 	bl	8007210 <USBD_CtlError>
        err++;
 8006e5e:	7afb      	ldrb	r3, [r7, #11]
 8006e60:	3301      	adds	r3, #1
 8006e62:	72fb      	strb	r3, [r7, #11]
      break;
 8006e64:	e007      	b.n	8006e76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f9d1 	bl	8007210 <USBD_CtlError>
      err++;
 8006e6e:	7afb      	ldrb	r3, [r7, #11]
 8006e70:	3301      	adds	r3, #1
 8006e72:	72fb      	strb	r3, [r7, #11]
      break;
 8006e74:	bf00      	nop
  }

  if (err != 0U)
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d11c      	bne.n	8006eb6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006e7c:	893b      	ldrh	r3, [r7, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d011      	beq.n	8006ea6 <USBD_GetDescriptor+0x2b6>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	88db      	ldrh	r3, [r3, #6]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00d      	beq.n	8006ea6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	88da      	ldrh	r2, [r3, #6]
 8006e8e:	893b      	ldrh	r3, [r7, #8]
 8006e90:	4293      	cmp	r3, r2
 8006e92:	bf28      	it	cs
 8006e94:	4613      	movcs	r3, r2
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e9a:	893b      	ldrh	r3, [r7, #8]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	68f9      	ldr	r1, [r7, #12]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fa1f 	bl	80072e4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	88db      	ldrh	r3, [r3, #6]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d104      	bne.n	8006eb8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fa76 	bl	80073a0 <USBD_CtlSendStatus>
 8006eb4:	e000      	b.n	8006eb8 <USBD_GetDescriptor+0x2c8>
    return;
 8006eb6:	bf00      	nop
    }
  }
}
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop

08006ec0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	889b      	ldrh	r3, [r3, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d130      	bne.n	8006f34 <USBD_SetAddress+0x74>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	88db      	ldrh	r3, [r3, #6]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d12c      	bne.n	8006f34 <USBD_SetAddress+0x74>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	885b      	ldrh	r3, [r3, #2]
 8006ede:	2b7f      	cmp	r3, #127	; 0x7f
 8006ee0:	d828      	bhi.n	8006f34 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	885b      	ldrh	r3, [r3, #2]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d104      	bne.n	8006f02 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f988 	bl	8007210 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f00:	e01c      	b.n	8006f3c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	7bfa      	ldrb	r2, [r7, #15]
 8006f06:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fe37 	bl	8007b82 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fa43 	bl	80073a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d004      	beq.n	8006f2a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f28:	e008      	b.n	8006f3c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f32:	e003      	b.n	8006f3c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f96a 	bl	8007210 <USBD_CtlError>
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	885b      	ldrh	r3, [r3, #2]
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	4b41      	ldr	r3, [pc, #260]	; (800705c <USBD_SetConfig+0x118>)
 8006f56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f58:	4b40      	ldr	r3, [pc, #256]	; (800705c <USBD_SetConfig+0x118>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d904      	bls.n	8006f6a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f954 	bl	8007210 <USBD_CtlError>
 8006f68:	e075      	b.n	8007056 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d002      	beq.n	8006f7a <USBD_SetConfig+0x36>
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d023      	beq.n	8006fc0 <USBD_SetConfig+0x7c>
 8006f78:	e062      	b.n	8007040 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006f7a:	4b38      	ldr	r3, [pc, #224]	; (800705c <USBD_SetConfig+0x118>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d01a      	beq.n	8006fb8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006f82:	4b36      	ldr	r3, [pc, #216]	; (800705c <USBD_SetConfig+0x118>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2203      	movs	r2, #3
 8006f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006f94:	4b31      	ldr	r3, [pc, #196]	; (800705c <USBD_SetConfig+0x118>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff f9f3 	bl	8006386 <USBD_SetClassConfig>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d104      	bne.n	8006fb0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f931 	bl	8007210 <USBD_CtlError>
            return;
 8006fae:	e052      	b.n	8007056 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f9f5 	bl	80073a0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006fb6:	e04e      	b.n	8007056 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f9f1 	bl	80073a0 <USBD_CtlSendStatus>
        break;
 8006fbe:	e04a      	b.n	8007056 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006fc0:	4b26      	ldr	r3, [pc, #152]	; (800705c <USBD_SetConfig+0x118>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d112      	bne.n	8006fee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006fd0:	4b22      	ldr	r3, [pc, #136]	; (800705c <USBD_SetConfig+0x118>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006fda:	4b20      	ldr	r3, [pc, #128]	; (800705c <USBD_SetConfig+0x118>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff f9ef 	bl	80063c4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f9da 	bl	80073a0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006fec:	e033      	b.n	8007056 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006fee:	4b1b      	ldr	r3, [pc, #108]	; (800705c <USBD_SetConfig+0x118>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d01d      	beq.n	8007038 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	b2db      	uxtb	r3, r3
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff f9dd 	bl	80063c4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800700a:	4b14      	ldr	r3, [pc, #80]	; (800705c <USBD_SetConfig+0x118>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007014:	4b11      	ldr	r3, [pc, #68]	; (800705c <USBD_SetConfig+0x118>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7ff f9b3 	bl	8006386 <USBD_SetClassConfig>
 8007020:	4603      	mov	r3, r0
 8007022:	2b02      	cmp	r3, #2
 8007024:	d104      	bne.n	8007030 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f8f1 	bl	8007210 <USBD_CtlError>
            return;
 800702e:	e012      	b.n	8007056 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f9b5 	bl	80073a0 <USBD_CtlSendStatus>
        break;
 8007036:	e00e      	b.n	8007056 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f9b1 	bl	80073a0 <USBD_CtlSendStatus>
        break;
 800703e:	e00a      	b.n	8007056 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f8e4 	bl	8007210 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007048:	4b04      	ldr	r3, [pc, #16]	; (800705c <USBD_SetConfig+0x118>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff f9b8 	bl	80063c4 <USBD_ClrClassConfig>
        break;
 8007054:	bf00      	nop
    }
  }
}
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20000210 	.word	0x20000210

08007060 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	88db      	ldrh	r3, [r3, #6]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d004      	beq.n	800707c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f8cb 	bl	8007210 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800707a:	e021      	b.n	80070c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007082:	2b01      	cmp	r3, #1
 8007084:	db17      	blt.n	80070b6 <USBD_GetConfig+0x56>
 8007086:	2b02      	cmp	r3, #2
 8007088:	dd02      	ble.n	8007090 <USBD_GetConfig+0x30>
 800708a:	2b03      	cmp	r3, #3
 800708c:	d00b      	beq.n	80070a6 <USBD_GetConfig+0x46>
 800708e:	e012      	b.n	80070b6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3308      	adds	r3, #8
 800709a:	2201      	movs	r2, #1
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f920 	bl	80072e4 <USBD_CtlSendData>
        break;
 80070a4:	e00c      	b.n	80070c0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3304      	adds	r3, #4
 80070aa:	2201      	movs	r2, #1
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f918 	bl	80072e4 <USBD_CtlSendData>
        break;
 80070b4:	e004      	b.n	80070c0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f8a9 	bl	8007210 <USBD_CtlError>
        break;
 80070be:	bf00      	nop
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d8:	3b01      	subs	r3, #1
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d81e      	bhi.n	800711c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	88db      	ldrh	r3, [r3, #6]
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d004      	beq.n	80070f0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f891 	bl	8007210 <USBD_CtlError>
        break;
 80070ee:	e01a      	b.n	8007126 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d005      	beq.n	800710c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f043 0202 	orr.w	r2, r3, #2
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	330c      	adds	r3, #12
 8007110:	2202      	movs	r2, #2
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f8e5 	bl	80072e4 <USBD_CtlSendData>
      break;
 800711a:	e004      	b.n	8007126 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f876 	bl	8007210 <USBD_CtlError>
      break;
 8007124:	bf00      	nop
  }
}
 8007126:	bf00      	nop
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	885b      	ldrh	r3, [r3, #2]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d106      	bne.n	800714e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f929 	bl	80073a0 <USBD_CtlSendStatus>
  }
}
 800714e:	bf00      	nop
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007166:	3b01      	subs	r3, #1
 8007168:	2b02      	cmp	r3, #2
 800716a:	d80b      	bhi.n	8007184 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	885b      	ldrh	r3, [r3, #2]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d10c      	bne.n	800718e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f90f 	bl	80073a0 <USBD_CtlSendStatus>
      }
      break;
 8007182:	e004      	b.n	800718e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f842 	bl	8007210 <USBD_CtlError>
      break;
 800718c:	e000      	b.n	8007190 <USBD_ClrFeature+0x3a>
      break;
 800718e:	bf00      	nop
  }
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781a      	ldrb	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	785a      	ldrb	r2, [r3, #1]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	3302      	adds	r3, #2
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	3303      	adds	r3, #3
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	4413      	add	r3, r2
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	3304      	adds	r3, #4
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	3305      	adds	r3, #5
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	021b      	lsls	r3, r3, #8
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	4413      	add	r3, r2
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	3306      	adds	r3, #6
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	3307      	adds	r3, #7
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	021b      	lsls	r3, r3, #8
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	4413      	add	r3, r2
 8007200:	b29a      	uxth	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	80da      	strh	r2, [r3, #6]

}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	bc80      	pop	{r7}
 800720e:	4770      	bx	lr

08007210 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800721a:	2180      	movs	r1, #128	; 0x80
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fc4d 	bl	8007abc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007222:	2100      	movs	r1, #0
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fc49 	bl	8007abc <USBD_LL_StallEP>
}
 800722a:	bf00      	nop
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b086      	sub	sp, #24
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d032      	beq.n	80072ae <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 f834 	bl	80072b6 <USBD_GetLen>
 800724e:	4603      	mov	r3, r0
 8007250:	3301      	adds	r3, #1
 8007252:	b29b      	uxth	r3, r3
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	75fa      	strb	r2, [r7, #23]
 8007262:	461a      	mov	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	4413      	add	r3, r2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	7812      	ldrb	r2, [r2, #0]
 800726c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	75fa      	strb	r2, [r7, #23]
 8007274:	461a      	mov	r2, r3
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	4413      	add	r3, r2
 800727a:	2203      	movs	r2, #3
 800727c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800727e:	e012      	b.n	80072a6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	60fa      	str	r2, [r7, #12]
 8007286:	7dfa      	ldrb	r2, [r7, #23]
 8007288:	1c51      	adds	r1, r2, #1
 800728a:	75f9      	strb	r1, [r7, #23]
 800728c:	4611      	mov	r1, r2
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	440a      	add	r2, r1
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007296:	7dfb      	ldrb	r3, [r7, #23]
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	75fa      	strb	r2, [r7, #23]
 800729c:	461a      	mov	r2, r3
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	4413      	add	r3, r2
 80072a2:	2200      	movs	r2, #0
 80072a4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e8      	bne.n	8007280 <USBD_GetString+0x4e>
    }
  }
}
 80072ae:	bf00      	nop
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80072c2:	e005      	b.n	80072d0 <USBD_GetLen+0x1a>
  {
    len++;
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	3301      	adds	r3, #1
 80072c8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3301      	adds	r3, #1
 80072ce:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1f5      	bne.n	80072c4 <USBD_GetLen+0xe>
  }

  return len;
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr

080072e4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2202      	movs	r2, #2
 80072f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80072fa:	88fa      	ldrh	r2, [r7, #6]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007300:	88fa      	ldrh	r2, [r7, #6]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007306:	88fb      	ldrh	r3, [r7, #6]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	2100      	movs	r1, #0
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 fc57 	bl	8007bc0 <USBD_LL_Transmit>

  return USBD_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	4613      	mov	r3, r2
 8007328:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800732a:	88fb      	ldrh	r3, [r7, #6]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	2100      	movs	r1, #0
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 fc45 	bl	8007bc0 <USBD_LL_Transmit>

  return USBD_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	4613      	mov	r3, r2
 800734c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2203      	movs	r2, #3
 8007352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007356:	88fa      	ldrh	r2, [r7, #6]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800735e:	88fa      	ldrh	r2, [r7, #6]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007366:	88fb      	ldrh	r3, [r7, #6]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	2100      	movs	r1, #0
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 fc4a 	bl	8007c06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4613      	mov	r3, r2
 8007388:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800738a:	88fb      	ldrh	r3, [r7, #6]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	2100      	movs	r1, #0
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 fc38 	bl	8007c06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2204      	movs	r2, #4
 80073ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073b0:	2300      	movs	r3, #0
 80073b2:	2200      	movs	r2, #0
 80073b4:	2100      	movs	r1, #0
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fc02 	bl	8007bc0 <USBD_LL_Transmit>

  return USBD_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2205      	movs	r2, #5
 80073d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073d6:	2300      	movs	r3, #0
 80073d8:	2200      	movs	r2, #0
 80073da:	2100      	movs	r1, #0
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fc12 	bl	8007c06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073f0:	2200      	movs	r2, #0
 80073f2:	4912      	ldr	r1, [pc, #72]	; (800743c <MX_USB_DEVICE_Init+0x50>)
 80073f4:	4812      	ldr	r0, [pc, #72]	; (8007440 <MX_USB_DEVICE_Init+0x54>)
 80073f6:	f7fe ff6c 	bl	80062d2 <USBD_Init>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007400:	f7fa f854 	bl	80014ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007404:	490f      	ldr	r1, [pc, #60]	; (8007444 <MX_USB_DEVICE_Init+0x58>)
 8007406:	480e      	ldr	r0, [pc, #56]	; (8007440 <MX_USB_DEVICE_Init+0x54>)
 8007408:	f7fe ff8e 	bl	8006328 <USBD_RegisterClass>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007412:	f7fa f84b 	bl	80014ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007416:	490c      	ldr	r1, [pc, #48]	; (8007448 <MX_USB_DEVICE_Init+0x5c>)
 8007418:	4809      	ldr	r0, [pc, #36]	; (8007440 <MX_USB_DEVICE_Init+0x54>)
 800741a:	f7fe febf 	bl	800619c <USBD_CDC_RegisterInterface>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007424:	f7fa f842 	bl	80014ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007428:	4805      	ldr	r0, [pc, #20]	; (8007440 <MX_USB_DEVICE_Init+0x54>)
 800742a:	f7fe ff96 	bl	800635a <USBD_Start>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007434:	f7fa f83a 	bl	80014ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007438:	bf00      	nop
 800743a:	bd80      	pop	{r7, pc}
 800743c:	2000012c 	.word	0x2000012c
 8007440:	200004b8 	.word	0x200004b8
 8007444:	20000018 	.word	0x20000018
 8007448:	2000011c 	.word	0x2000011c

0800744c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007450:	2200      	movs	r2, #0
 8007452:	4905      	ldr	r1, [pc, #20]	; (8007468 <CDC_Init_FS+0x1c>)
 8007454:	4805      	ldr	r0, [pc, #20]	; (800746c <CDC_Init_FS+0x20>)
 8007456:	f7fe feb7 	bl	80061c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800745a:	4905      	ldr	r1, [pc, #20]	; (8007470 <CDC_Init_FS+0x24>)
 800745c:	4803      	ldr	r0, [pc, #12]	; (800746c <CDC_Init_FS+0x20>)
 800745e:	f7fe fecc 	bl	80061fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007462:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007464:	4618      	mov	r0, r3
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20000b64 	.word	0x20000b64
 800746c:	200004b8 	.word	0x200004b8
 8007470:	2000077c 	.word	0x2000077c

08007474 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007474:	b480      	push	{r7}
 8007476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007478:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800747a:	4618      	mov	r0, r3
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr
	...

08007484 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	6039      	str	r1, [r7, #0]
 800748e:	71fb      	strb	r3, [r7, #7]
 8007490:	4613      	mov	r3, r2
 8007492:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	2b23      	cmp	r3, #35	; 0x23
 8007498:	d84a      	bhi.n	8007530 <CDC_Control_FS+0xac>
 800749a:	a201      	add	r2, pc, #4	; (adr r2, 80074a0 <CDC_Control_FS+0x1c>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	08007531 	.word	0x08007531
 80074a4:	08007531 	.word	0x08007531
 80074a8:	08007531 	.word	0x08007531
 80074ac:	08007531 	.word	0x08007531
 80074b0:	08007531 	.word	0x08007531
 80074b4:	08007531 	.word	0x08007531
 80074b8:	08007531 	.word	0x08007531
 80074bc:	08007531 	.word	0x08007531
 80074c0:	08007531 	.word	0x08007531
 80074c4:	08007531 	.word	0x08007531
 80074c8:	08007531 	.word	0x08007531
 80074cc:	08007531 	.word	0x08007531
 80074d0:	08007531 	.word	0x08007531
 80074d4:	08007531 	.word	0x08007531
 80074d8:	08007531 	.word	0x08007531
 80074dc:	08007531 	.word	0x08007531
 80074e0:	08007531 	.word	0x08007531
 80074e4:	08007531 	.word	0x08007531
 80074e8:	08007531 	.word	0x08007531
 80074ec:	08007531 	.word	0x08007531
 80074f0:	08007531 	.word	0x08007531
 80074f4:	08007531 	.word	0x08007531
 80074f8:	08007531 	.word	0x08007531
 80074fc:	08007531 	.word	0x08007531
 8007500:	08007531 	.word	0x08007531
 8007504:	08007531 	.word	0x08007531
 8007508:	08007531 	.word	0x08007531
 800750c:	08007531 	.word	0x08007531
 8007510:	08007531 	.word	0x08007531
 8007514:	08007531 	.word	0x08007531
 8007518:	08007531 	.word	0x08007531
 800751c:	08007531 	.word	0x08007531
 8007520:	08007531 	.word	0x08007531
 8007524:	08007531 	.word	0x08007531
 8007528:	08007531 	.word	0x08007531
 800752c:	08007531 	.word	0x08007531
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007530:	bf00      	nop
  }

  return (USBD_OK);
 8007532:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	bc80      	pop	{r7}
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop

08007540 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	4805      	ldr	r0, [pc, #20]	; (8007564 <CDC_Receive_FS+0x24>)
 800754e:	f7fe fe54 	bl	80061fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007552:	4804      	ldr	r0, [pc, #16]	; (8007564 <CDC_Receive_FS+0x24>)
 8007554:	f7fe fe93 	bl	800627e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007558:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	200004b8 	.word	0x200004b8

08007568 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007578:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <CDC_Transmit_FS+0x48>)
 800757a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800758a:	2301      	movs	r3, #1
 800758c:	e00b      	b.n	80075a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800758e:	887b      	ldrh	r3, [r7, #2]
 8007590:	461a      	mov	r2, r3
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	4806      	ldr	r0, [pc, #24]	; (80075b0 <CDC_Transmit_FS+0x48>)
 8007596:	f7fe fe17 	bl	80061c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800759a:	4805      	ldr	r0, [pc, #20]	; (80075b0 <CDC_Transmit_FS+0x48>)
 800759c:	f7fe fe40 	bl	8006220 <USBD_CDC_TransmitPacket>
 80075a0:	4603      	mov	r3, r0
 80075a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	200004b8 	.word	0x200004b8

080075b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	6039      	str	r1, [r7, #0]
 80075be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2212      	movs	r2, #18
 80075c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80075c6:	4b03      	ldr	r3, [pc, #12]	; (80075d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000148 	.word	0x20000148

080075d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	6039      	str	r1, [r7, #0]
 80075e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2204      	movs	r2, #4
 80075e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80075ea:	4b03      	ldr	r3, [pc, #12]	; (80075f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bc80      	pop	{r7}
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	2000015c 	.word	0x2000015c

080075fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	6039      	str	r1, [r7, #0]
 8007606:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d105      	bne.n	800761a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	4907      	ldr	r1, [pc, #28]	; (8007630 <USBD_FS_ProductStrDescriptor+0x34>)
 8007612:	4808      	ldr	r0, [pc, #32]	; (8007634 <USBD_FS_ProductStrDescriptor+0x38>)
 8007614:	f7ff fe0d 	bl	8007232 <USBD_GetString>
 8007618:	e004      	b.n	8007624 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	4904      	ldr	r1, [pc, #16]	; (8007630 <USBD_FS_ProductStrDescriptor+0x34>)
 800761e:	4805      	ldr	r0, [pc, #20]	; (8007634 <USBD_FS_ProductStrDescriptor+0x38>)
 8007620:	f7ff fe07 	bl	8007232 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007624:	4b02      	ldr	r3, [pc, #8]	; (8007630 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007626:	4618      	mov	r0, r3
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20000f4c 	.word	0x20000f4c
 8007634:	0800894c 	.word	0x0800894c

08007638 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	6039      	str	r1, [r7, #0]
 8007642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	4904      	ldr	r1, [pc, #16]	; (8007658 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007648:	4804      	ldr	r0, [pc, #16]	; (800765c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800764a:	f7ff fdf2 	bl	8007232 <USBD_GetString>
  return USBD_StrDesc;
 800764e:	4b02      	ldr	r3, [pc, #8]	; (8007658 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	20000f4c 	.word	0x20000f4c
 800765c:	08008964 	.word	0x08008964

08007660 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	6039      	str	r1, [r7, #0]
 800766a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	221a      	movs	r2, #26
 8007670:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007672:	f000 f843 	bl	80076fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007676:	4b02      	ldr	r3, [pc, #8]	; (8007680 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000160 	.word	0x20000160

08007684 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	6039      	str	r1, [r7, #0]
 800768e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d105      	bne.n	80076a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	4907      	ldr	r1, [pc, #28]	; (80076b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800769a:	4808      	ldr	r0, [pc, #32]	; (80076bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800769c:	f7ff fdc9 	bl	8007232 <USBD_GetString>
 80076a0:	e004      	b.n	80076ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	4904      	ldr	r1, [pc, #16]	; (80076b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076a6:	4805      	ldr	r0, [pc, #20]	; (80076bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80076a8:	f7ff fdc3 	bl	8007232 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076ac:	4b02      	ldr	r3, [pc, #8]	; (80076b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20000f4c 	.word	0x20000f4c
 80076bc:	08008978 	.word	0x08008978

080076c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4603      	mov	r3, r0
 80076c8:	6039      	str	r1, [r7, #0]
 80076ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d105      	bne.n	80076de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	4907      	ldr	r1, [pc, #28]	; (80076f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076d6:	4808      	ldr	r0, [pc, #32]	; (80076f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076d8:	f7ff fdab 	bl	8007232 <USBD_GetString>
 80076dc:	e004      	b.n	80076e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	4904      	ldr	r1, [pc, #16]	; (80076f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076e2:	4805      	ldr	r0, [pc, #20]	; (80076f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076e4:	f7ff fda5 	bl	8007232 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076e8:	4b02      	ldr	r3, [pc, #8]	; (80076f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20000f4c 	.word	0x20000f4c
 80076f8:	08008984 	.word	0x08008984

080076fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <Get_SerialNum+0x44>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007708:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <Get_SerialNum+0x48>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800770e:	4b0e      	ldr	r3, [pc, #56]	; (8007748 <Get_SerialNum+0x4c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4413      	add	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d009      	beq.n	8007736 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007722:	2208      	movs	r2, #8
 8007724:	4909      	ldr	r1, [pc, #36]	; (800774c <Get_SerialNum+0x50>)
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f814 	bl	8007754 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800772c:	2204      	movs	r2, #4
 800772e:	4908      	ldr	r1, [pc, #32]	; (8007750 <Get_SerialNum+0x54>)
 8007730:	68b8      	ldr	r0, [r7, #8]
 8007732:	f000 f80f 	bl	8007754 <IntToUnicode>
  }
}
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	1ffff7e8 	.word	0x1ffff7e8
 8007744:	1ffff7ec 	.word	0x1ffff7ec
 8007748:	1ffff7f0 	.word	0x1ffff7f0
 800774c:	20000162 	.word	0x20000162
 8007750:	20000172 	.word	0x20000172

08007754 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007766:	2300      	movs	r3, #0
 8007768:	75fb      	strb	r3, [r7, #23]
 800776a:	e027      	b.n	80077bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	0f1b      	lsrs	r3, r3, #28
 8007770:	2b09      	cmp	r3, #9
 8007772:	d80b      	bhi.n	800778c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	0f1b      	lsrs	r3, r3, #28
 8007778:	b2da      	uxtb	r2, r3
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	4619      	mov	r1, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	440b      	add	r3, r1
 8007784:	3230      	adds	r2, #48	; 0x30
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	e00a      	b.n	80077a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	0f1b      	lsrs	r3, r3, #28
 8007790:	b2da      	uxtb	r2, r3
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	4619      	mov	r1, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	440b      	add	r3, r1
 800779c:	3237      	adds	r2, #55	; 0x37
 800779e:	b2d2      	uxtb	r2, r2
 80077a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077a8:	7dfb      	ldrb	r3, [r7, #23]
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	3301      	adds	r3, #1
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4413      	add	r3, r2
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	3301      	adds	r3, #1
 80077ba:	75fb      	strb	r3, [r7, #23]
 80077bc:	7dfa      	ldrb	r2, [r7, #23]
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d3d3      	bcc.n	800776c <IntToUnicode+0x18>
  }
}
 80077c4:	bf00      	nop
 80077c6:	371c      	adds	r7, #28
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bc80      	pop	{r7}
 80077cc:	4770      	bx	lr
	...

080077d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a0d      	ldr	r2, [pc, #52]	; (8007814 <HAL_PCD_MspInit+0x44>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d113      	bne.n	800780a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80077e2:	4b0d      	ldr	r3, [pc, #52]	; (8007818 <HAL_PCD_MspInit+0x48>)
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	4a0c      	ldr	r2, [pc, #48]	; (8007818 <HAL_PCD_MspInit+0x48>)
 80077e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077ec:	61d3      	str	r3, [r2, #28]
 80077ee:	4b0a      	ldr	r3, [pc, #40]	; (8007818 <HAL_PCD_MspInit+0x48>)
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80077fa:	2200      	movs	r2, #0
 80077fc:	2100      	movs	r1, #0
 80077fe:	2014      	movs	r0, #20
 8007800:	f7fa fc8b 	bl	800211a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007804:	2014      	movs	r0, #20
 8007806:	f7fa fca4 	bl	8002152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	40005c00 	.word	0x40005c00
 8007818:	40021000 	.word	0x40021000

0800781c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f7fe fdd9 	bl	80063ea <USBD_LL_SetupStage>
}
 8007838:	bf00      	nop
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	015b      	lsls	r3, r3, #5
 8007858:	4413      	add	r3, r2
 800785a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	4619      	mov	r1, r3
 8007864:	f7fe fe0c 	bl	8006480 <USBD_LL_DataOutStage>
}
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	015b      	lsls	r3, r3, #5
 8007888:	4413      	add	r3, r2
 800788a:	333c      	adds	r3, #60	; 0x3c
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	78fb      	ldrb	r3, [r7, #3]
 8007890:	4619      	mov	r1, r3
 8007892:	f7fe fe66 	bl	8006562 <USBD_LL_DataInStage>
}
 8007896:	bf00      	nop
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b082      	sub	sp, #8
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fe ff76 	bl	800679e <USBD_LL_SOF>
}
 80078b2:	bf00      	nop
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b084      	sub	sp, #16
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078c2:	2301      	movs	r3, #1
 80078c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d001      	beq.n	80078d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80078ce:	f7f9 fded 	bl	80014ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80078d8:	7bfa      	ldrb	r2, [r7, #15]
 80078da:	4611      	mov	r1, r2
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fe ff26 	bl	800672e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fe fedf 	bl	80066ac <USBD_LL_Reset>
}
 80078ee:	bf00      	nop
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007906:	4618      	mov	r0, r3
 8007908:	f7fe ff20 	bl	800674c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007914:	4b04      	ldr	r3, [pc, #16]	; (8007928 <HAL_PCD_SuspendCallback+0x30>)
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	4a03      	ldr	r2, [pc, #12]	; (8007928 <HAL_PCD_SuspendCallback+0x30>)
 800791a:	f043 0306 	orr.w	r3, r3, #6
 800791e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007920:	bf00      	nop
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	e000ed00 	.word	0xe000ed00

0800792c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800793a:	4618      	mov	r0, r3
 800793c:	f7fe ff1a 	bl	8006774 <USBD_LL_Resume>
}
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007950:	4a28      	ldr	r2, [pc, #160]	; (80079f4 <USBD_LL_Init+0xac>)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a26      	ldr	r2, [pc, #152]	; (80079f4 <USBD_LL_Init+0xac>)
 800795c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007960:	4b24      	ldr	r3, [pc, #144]	; (80079f4 <USBD_LL_Init+0xac>)
 8007962:	4a25      	ldr	r2, [pc, #148]	; (80079f8 <USBD_LL_Init+0xb0>)
 8007964:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007966:	4b23      	ldr	r3, [pc, #140]	; (80079f4 <USBD_LL_Init+0xac>)
 8007968:	2208      	movs	r2, #8
 800796a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800796c:	4b21      	ldr	r3, [pc, #132]	; (80079f4 <USBD_LL_Init+0xac>)
 800796e:	2202      	movs	r2, #2
 8007970:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007972:	4b20      	ldr	r3, [pc, #128]	; (80079f4 <USBD_LL_Init+0xac>)
 8007974:	2200      	movs	r2, #0
 8007976:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007978:	4b1e      	ldr	r3, [pc, #120]	; (80079f4 <USBD_LL_Init+0xac>)
 800797a:	2200      	movs	r2, #0
 800797c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800797e:	4b1d      	ldr	r3, [pc, #116]	; (80079f4 <USBD_LL_Init+0xac>)
 8007980:	2200      	movs	r2, #0
 8007982:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007984:	481b      	ldr	r0, [pc, #108]	; (80079f4 <USBD_LL_Init+0xac>)
 8007986:	f7fb fcdb 	bl	8003340 <HAL_PCD_Init>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007990:	f7f9 fd8c 	bl	80014ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800799a:	2318      	movs	r3, #24
 800799c:	2200      	movs	r2, #0
 800799e:	2100      	movs	r1, #0
 80079a0:	f7fc fb74 	bl	800408c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079aa:	2358      	movs	r3, #88	; 0x58
 80079ac:	2200      	movs	r2, #0
 80079ae:	2180      	movs	r1, #128	; 0x80
 80079b0:	f7fc fb6c 	bl	800408c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079ba:	23c0      	movs	r3, #192	; 0xc0
 80079bc:	2200      	movs	r2, #0
 80079be:	2181      	movs	r1, #129	; 0x81
 80079c0:	f7fc fb64 	bl	800408c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 80079ce:	2200      	movs	r2, #0
 80079d0:	2101      	movs	r1, #1
 80079d2:	f7fc fb5b 	bl	800408c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079e0:	2200      	movs	r2, #0
 80079e2:	2182      	movs	r1, #130	; 0x82
 80079e4:	f7fc fb52 	bl	800408c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	2000114c 	.word	0x2000114c
 80079f8:	40005c00 	.word	0x40005c00

080079fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fb fd75 	bl	8003502 <HAL_PCD_Start>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 f948 	bl	8007cb4 <USBD_Get_USB_Status>
 8007a24:	4603      	mov	r3, r0
 8007a26:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	4608      	mov	r0, r1
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	461a      	mov	r2, r3
 8007a40:	4603      	mov	r3, r0
 8007a42:	70fb      	strb	r3, [r7, #3]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70bb      	strb	r3, [r7, #2]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a5a:	78bb      	ldrb	r3, [r7, #2]
 8007a5c:	883a      	ldrh	r2, [r7, #0]
 8007a5e:	78f9      	ldrb	r1, [r7, #3]
 8007a60:	f7fb fea8 	bl	80037b4 <HAL_PCD_EP_Open>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 f922 	bl	8007cb4 <USBD_Get_USB_Status>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	460b      	mov	r3, r1
 8007a88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a98:	78fa      	ldrb	r2, [r7, #3]
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fb fee9 	bl	8003874 <HAL_PCD_EP_Close>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 f903 	bl	8007cb4 <USBD_Get_USB_Status>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ad6:	78fa      	ldrb	r2, [r7, #3]
 8007ad8:	4611      	mov	r1, r2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fb ff93 	bl	8003a06 <HAL_PCD_EP_SetStall>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 f8e4 	bl	8007cb4 <USBD_Get_USB_Status>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	460b      	mov	r3, r1
 8007b04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b14:	78fa      	ldrb	r2, [r7, #3]
 8007b16:	4611      	mov	r1, r2
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fb ffce 	bl	8003aba <HAL_PCD_EP_ClrStall>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 f8c5 	bl	8007cb4 <USBD_Get_USB_Status>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b4a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	da08      	bge.n	8007b66 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007b54:	78fb      	ldrb	r3, [r7, #3]
 8007b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	015b      	lsls	r3, r3, #5
 8007b5e:	4413      	add	r3, r2
 8007b60:	332a      	adds	r3, #42	; 0x2a
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	e008      	b.n	8007b78 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007b66:	78fb      	ldrb	r3, [r7, #3]
 8007b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	015b      	lsls	r3, r3, #5
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007b76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bc80      	pop	{r7}
 8007b80:	4770      	bx	lr

08007b82 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b9c:	78fa      	ldrb	r2, [r7, #3]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fb fde2 	bl	800376a <HAL_PCD_SetAddress>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 f881 	bl	8007cb4 <USBD_Get_USB_Status>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	607a      	str	r2, [r7, #4]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	460b      	mov	r3, r1
 8007bce:	72fb      	strb	r3, [r7, #11]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007be2:	893b      	ldrh	r3, [r7, #8]
 8007be4:	7af9      	ldrb	r1, [r7, #11]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	f7fb fed4 	bl	8003994 <HAL_PCD_EP_Transmit>
 8007bec:	4603      	mov	r3, r0
 8007bee:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 f85e 	bl	8007cb4 <USBD_Get_USB_Status>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007bfc:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b086      	sub	sp, #24
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	461a      	mov	r2, r3
 8007c12:	460b      	mov	r3, r1
 8007c14:	72fb      	strb	r3, [r7, #11]
 8007c16:	4613      	mov	r3, r2
 8007c18:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c28:	893b      	ldrh	r3, [r7, #8]
 8007c2a:	7af9      	ldrb	r1, [r7, #11]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	f7fb fe63 	bl	80038f8 <HAL_PCD_EP_Receive>
 8007c32:	4603      	mov	r3, r0
 8007c34:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 f83b 	bl	8007cb4 <USBD_Get_USB_Status>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8007c42:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c5e:	78fa      	ldrb	r2, [r7, #3]
 8007c60:	4611      	mov	r1, r2
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fb fe82 	bl	800396c <HAL_PCD_EP_GetRxCount>
 8007c68:	4603      	mov	r3, r0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007c7c:	4b02      	ldr	r3, [pc, #8]	; (8007c88 <USBD_static_malloc+0x14>)
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bc80      	pop	{r7}
 8007c86:	4770      	bx	lr
 8007c88:	20000214 	.word	0x20000214

08007c8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]

}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bc80      	pop	{r7}
 8007c9c:	4770      	bx	lr

08007c9e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc80      	pop	{r7}
 8007cb2:	4770      	bx	lr

08007cb4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d817      	bhi.n	8007cf8 <USBD_Get_USB_Status+0x44>
 8007cc8:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <USBD_Get_USB_Status+0x1c>)
 8007cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cce:	bf00      	nop
 8007cd0:	08007ce1 	.word	0x08007ce1
 8007cd4:	08007ce7 	.word	0x08007ce7
 8007cd8:	08007ced 	.word	0x08007ced
 8007cdc:	08007cf3 	.word	0x08007cf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce4:	e00b      	b.n	8007cfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8007cea:	e008      	b.n	8007cfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf0:	e005      	b.n	8007cfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf6:	e002      	b.n	8007cfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8007cfc:	bf00      	nop
  }
  return usb_status;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bc80      	pop	{r7}
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop

08007d0c <__errno>:
 8007d0c:	4b01      	ldr	r3, [pc, #4]	; (8007d14 <__errno+0x8>)
 8007d0e:	6818      	ldr	r0, [r3, #0]
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	2000017c 	.word	0x2000017c

08007d18 <__libc_init_array>:
 8007d18:	b570      	push	{r4, r5, r6, lr}
 8007d1a:	2500      	movs	r5, #0
 8007d1c:	4e0c      	ldr	r6, [pc, #48]	; (8007d50 <__libc_init_array+0x38>)
 8007d1e:	4c0d      	ldr	r4, [pc, #52]	; (8007d54 <__libc_init_array+0x3c>)
 8007d20:	1ba4      	subs	r4, r4, r6
 8007d22:	10a4      	asrs	r4, r4, #2
 8007d24:	42a5      	cmp	r5, r4
 8007d26:	d109      	bne.n	8007d3c <__libc_init_array+0x24>
 8007d28:	f000 fde4 	bl	80088f4 <_init>
 8007d2c:	2500      	movs	r5, #0
 8007d2e:	4e0a      	ldr	r6, [pc, #40]	; (8007d58 <__libc_init_array+0x40>)
 8007d30:	4c0a      	ldr	r4, [pc, #40]	; (8007d5c <__libc_init_array+0x44>)
 8007d32:	1ba4      	subs	r4, r4, r6
 8007d34:	10a4      	asrs	r4, r4, #2
 8007d36:	42a5      	cmp	r5, r4
 8007d38:	d105      	bne.n	8007d46 <__libc_init_array+0x2e>
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
 8007d3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d40:	4798      	blx	r3
 8007d42:	3501      	adds	r5, #1
 8007d44:	e7ee      	b.n	8007d24 <__libc_init_array+0xc>
 8007d46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d4a:	4798      	blx	r3
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	e7f2      	b.n	8007d36 <__libc_init_array+0x1e>
 8007d50:	08008a08 	.word	0x08008a08
 8007d54:	08008a08 	.word	0x08008a08
 8007d58:	08008a08 	.word	0x08008a08
 8007d5c:	08008a0c 	.word	0x08008a0c

08007d60 <memset>:
 8007d60:	4603      	mov	r3, r0
 8007d62:	4402      	add	r2, r0
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d100      	bne.n	8007d6a <memset+0xa>
 8007d68:	4770      	bx	lr
 8007d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d6e:	e7f9      	b.n	8007d64 <memset+0x4>

08007d70 <siprintf>:
 8007d70:	b40e      	push	{r1, r2, r3}
 8007d72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d76:	b500      	push	{lr}
 8007d78:	b09c      	sub	sp, #112	; 0x70
 8007d7a:	ab1d      	add	r3, sp, #116	; 0x74
 8007d7c:	9002      	str	r0, [sp, #8]
 8007d7e:	9006      	str	r0, [sp, #24]
 8007d80:	9107      	str	r1, [sp, #28]
 8007d82:	9104      	str	r1, [sp, #16]
 8007d84:	4808      	ldr	r0, [pc, #32]	; (8007da8 <siprintf+0x38>)
 8007d86:	4909      	ldr	r1, [pc, #36]	; (8007dac <siprintf+0x3c>)
 8007d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d8c:	9105      	str	r1, [sp, #20]
 8007d8e:	6800      	ldr	r0, [r0, #0]
 8007d90:	a902      	add	r1, sp, #8
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	f000 f866 	bl	8007e64 <_svfiprintf_r>
 8007d98:	2200      	movs	r2, #0
 8007d9a:	9b02      	ldr	r3, [sp, #8]
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	b01c      	add	sp, #112	; 0x70
 8007da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007da4:	b003      	add	sp, #12
 8007da6:	4770      	bx	lr
 8007da8:	2000017c 	.word	0x2000017c
 8007dac:	ffff0208 	.word	0xffff0208

08007db0 <__ssputs_r>:
 8007db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	688e      	ldr	r6, [r1, #8]
 8007db6:	4682      	mov	sl, r0
 8007db8:	429e      	cmp	r6, r3
 8007dba:	460c      	mov	r4, r1
 8007dbc:	4690      	mov	r8, r2
 8007dbe:	4699      	mov	r9, r3
 8007dc0:	d837      	bhi.n	8007e32 <__ssputs_r+0x82>
 8007dc2:	898a      	ldrh	r2, [r1, #12]
 8007dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007dc8:	d031      	beq.n	8007e2e <__ssputs_r+0x7e>
 8007dca:	2302      	movs	r3, #2
 8007dcc:	6825      	ldr	r5, [r4, #0]
 8007dce:	6909      	ldr	r1, [r1, #16]
 8007dd0:	1a6f      	subs	r7, r5, r1
 8007dd2:	6965      	ldr	r5, [r4, #20]
 8007dd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dd8:	fb95 f5f3 	sdiv	r5, r5, r3
 8007ddc:	f109 0301 	add.w	r3, r9, #1
 8007de0:	443b      	add	r3, r7
 8007de2:	429d      	cmp	r5, r3
 8007de4:	bf38      	it	cc
 8007de6:	461d      	movcc	r5, r3
 8007de8:	0553      	lsls	r3, r2, #21
 8007dea:	d530      	bpl.n	8007e4e <__ssputs_r+0x9e>
 8007dec:	4629      	mov	r1, r5
 8007dee:	f000 fb37 	bl	8008460 <_malloc_r>
 8007df2:	4606      	mov	r6, r0
 8007df4:	b950      	cbnz	r0, 8007e0c <__ssputs_r+0x5c>
 8007df6:	230c      	movs	r3, #12
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dfc:	f8ca 3000 	str.w	r3, [sl]
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e06:	81a3      	strh	r3, [r4, #12]
 8007e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0c:	463a      	mov	r2, r7
 8007e0e:	6921      	ldr	r1, [r4, #16]
 8007e10:	f000 fab6 	bl	8008380 <memcpy>
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e1e:	81a3      	strh	r3, [r4, #12]
 8007e20:	6126      	str	r6, [r4, #16]
 8007e22:	443e      	add	r6, r7
 8007e24:	6026      	str	r6, [r4, #0]
 8007e26:	464e      	mov	r6, r9
 8007e28:	6165      	str	r5, [r4, #20]
 8007e2a:	1bed      	subs	r5, r5, r7
 8007e2c:	60a5      	str	r5, [r4, #8]
 8007e2e:	454e      	cmp	r6, r9
 8007e30:	d900      	bls.n	8007e34 <__ssputs_r+0x84>
 8007e32:	464e      	mov	r6, r9
 8007e34:	4632      	mov	r2, r6
 8007e36:	4641      	mov	r1, r8
 8007e38:	6820      	ldr	r0, [r4, #0]
 8007e3a:	f000 faac 	bl	8008396 <memmove>
 8007e3e:	68a3      	ldr	r3, [r4, #8]
 8007e40:	2000      	movs	r0, #0
 8007e42:	1b9b      	subs	r3, r3, r6
 8007e44:	60a3      	str	r3, [r4, #8]
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	441e      	add	r6, r3
 8007e4a:	6026      	str	r6, [r4, #0]
 8007e4c:	e7dc      	b.n	8007e08 <__ssputs_r+0x58>
 8007e4e:	462a      	mov	r2, r5
 8007e50:	f000 fb60 	bl	8008514 <_realloc_r>
 8007e54:	4606      	mov	r6, r0
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d1e2      	bne.n	8007e20 <__ssputs_r+0x70>
 8007e5a:	6921      	ldr	r1, [r4, #16]
 8007e5c:	4650      	mov	r0, sl
 8007e5e:	f000 fab3 	bl	80083c8 <_free_r>
 8007e62:	e7c8      	b.n	8007df6 <__ssputs_r+0x46>

08007e64 <_svfiprintf_r>:
 8007e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e68:	461d      	mov	r5, r3
 8007e6a:	898b      	ldrh	r3, [r1, #12]
 8007e6c:	b09d      	sub	sp, #116	; 0x74
 8007e6e:	061f      	lsls	r7, r3, #24
 8007e70:	4680      	mov	r8, r0
 8007e72:	460c      	mov	r4, r1
 8007e74:	4616      	mov	r6, r2
 8007e76:	d50f      	bpl.n	8007e98 <_svfiprintf_r+0x34>
 8007e78:	690b      	ldr	r3, [r1, #16]
 8007e7a:	b96b      	cbnz	r3, 8007e98 <_svfiprintf_r+0x34>
 8007e7c:	2140      	movs	r1, #64	; 0x40
 8007e7e:	f000 faef 	bl	8008460 <_malloc_r>
 8007e82:	6020      	str	r0, [r4, #0]
 8007e84:	6120      	str	r0, [r4, #16]
 8007e86:	b928      	cbnz	r0, 8007e94 <_svfiprintf_r+0x30>
 8007e88:	230c      	movs	r3, #12
 8007e8a:	f8c8 3000 	str.w	r3, [r8]
 8007e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e92:	e0c8      	b.n	8008026 <_svfiprintf_r+0x1c2>
 8007e94:	2340      	movs	r3, #64	; 0x40
 8007e96:	6163      	str	r3, [r4, #20]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9c:	2320      	movs	r3, #32
 8007e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ea2:	2330      	movs	r3, #48	; 0x30
 8007ea4:	f04f 0b01 	mov.w	fp, #1
 8007ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eac:	9503      	str	r5, [sp, #12]
 8007eae:	4637      	mov	r7, r6
 8007eb0:	463d      	mov	r5, r7
 8007eb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007eb6:	b10b      	cbz	r3, 8007ebc <_svfiprintf_r+0x58>
 8007eb8:	2b25      	cmp	r3, #37	; 0x25
 8007eba:	d13e      	bne.n	8007f3a <_svfiprintf_r+0xd6>
 8007ebc:	ebb7 0a06 	subs.w	sl, r7, r6
 8007ec0:	d00b      	beq.n	8007eda <_svfiprintf_r+0x76>
 8007ec2:	4653      	mov	r3, sl
 8007ec4:	4632      	mov	r2, r6
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	4640      	mov	r0, r8
 8007eca:	f7ff ff71 	bl	8007db0 <__ssputs_r>
 8007ece:	3001      	adds	r0, #1
 8007ed0:	f000 80a4 	beq.w	800801c <_svfiprintf_r+0x1b8>
 8007ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed6:	4453      	add	r3, sl
 8007ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8007eda:	783b      	ldrb	r3, [r7, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 809d 	beq.w	800801c <_svfiprintf_r+0x1b8>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eec:	9304      	str	r3, [sp, #16]
 8007eee:	9307      	str	r3, [sp, #28]
 8007ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ef6:	462f      	mov	r7, r5
 8007ef8:	2205      	movs	r2, #5
 8007efa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007efe:	4850      	ldr	r0, [pc, #320]	; (8008040 <_svfiprintf_r+0x1dc>)
 8007f00:	f000 fa30 	bl	8008364 <memchr>
 8007f04:	9b04      	ldr	r3, [sp, #16]
 8007f06:	b9d0      	cbnz	r0, 8007f3e <_svfiprintf_r+0xda>
 8007f08:	06d9      	lsls	r1, r3, #27
 8007f0a:	bf44      	itt	mi
 8007f0c:	2220      	movmi	r2, #32
 8007f0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f12:	071a      	lsls	r2, r3, #28
 8007f14:	bf44      	itt	mi
 8007f16:	222b      	movmi	r2, #43	; 0x2b
 8007f18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f1c:	782a      	ldrb	r2, [r5, #0]
 8007f1e:	2a2a      	cmp	r2, #42	; 0x2a
 8007f20:	d015      	beq.n	8007f4e <_svfiprintf_r+0xea>
 8007f22:	462f      	mov	r7, r5
 8007f24:	2000      	movs	r0, #0
 8007f26:	250a      	movs	r5, #10
 8007f28:	9a07      	ldr	r2, [sp, #28]
 8007f2a:	4639      	mov	r1, r7
 8007f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f30:	3b30      	subs	r3, #48	; 0x30
 8007f32:	2b09      	cmp	r3, #9
 8007f34:	d94d      	bls.n	8007fd2 <_svfiprintf_r+0x16e>
 8007f36:	b1b8      	cbz	r0, 8007f68 <_svfiprintf_r+0x104>
 8007f38:	e00f      	b.n	8007f5a <_svfiprintf_r+0xf6>
 8007f3a:	462f      	mov	r7, r5
 8007f3c:	e7b8      	b.n	8007eb0 <_svfiprintf_r+0x4c>
 8007f3e:	4a40      	ldr	r2, [pc, #256]	; (8008040 <_svfiprintf_r+0x1dc>)
 8007f40:	463d      	mov	r5, r7
 8007f42:	1a80      	subs	r0, r0, r2
 8007f44:	fa0b f000 	lsl.w	r0, fp, r0
 8007f48:	4318      	orrs	r0, r3
 8007f4a:	9004      	str	r0, [sp, #16]
 8007f4c:	e7d3      	b.n	8007ef6 <_svfiprintf_r+0x92>
 8007f4e:	9a03      	ldr	r2, [sp, #12]
 8007f50:	1d11      	adds	r1, r2, #4
 8007f52:	6812      	ldr	r2, [r2, #0]
 8007f54:	9103      	str	r1, [sp, #12]
 8007f56:	2a00      	cmp	r2, #0
 8007f58:	db01      	blt.n	8007f5e <_svfiprintf_r+0xfa>
 8007f5a:	9207      	str	r2, [sp, #28]
 8007f5c:	e004      	b.n	8007f68 <_svfiprintf_r+0x104>
 8007f5e:	4252      	negs	r2, r2
 8007f60:	f043 0302 	orr.w	r3, r3, #2
 8007f64:	9207      	str	r2, [sp, #28]
 8007f66:	9304      	str	r3, [sp, #16]
 8007f68:	783b      	ldrb	r3, [r7, #0]
 8007f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8007f6c:	d10c      	bne.n	8007f88 <_svfiprintf_r+0x124>
 8007f6e:	787b      	ldrb	r3, [r7, #1]
 8007f70:	2b2a      	cmp	r3, #42	; 0x2a
 8007f72:	d133      	bne.n	8007fdc <_svfiprintf_r+0x178>
 8007f74:	9b03      	ldr	r3, [sp, #12]
 8007f76:	3702      	adds	r7, #2
 8007f78:	1d1a      	adds	r2, r3, #4
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	9203      	str	r2, [sp, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	bfb8      	it	lt
 8007f82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f86:	9305      	str	r3, [sp, #20]
 8007f88:	4d2e      	ldr	r5, [pc, #184]	; (8008044 <_svfiprintf_r+0x1e0>)
 8007f8a:	2203      	movs	r2, #3
 8007f8c:	7839      	ldrb	r1, [r7, #0]
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f000 f9e8 	bl	8008364 <memchr>
 8007f94:	b138      	cbz	r0, 8007fa6 <_svfiprintf_r+0x142>
 8007f96:	2340      	movs	r3, #64	; 0x40
 8007f98:	1b40      	subs	r0, r0, r5
 8007f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8007f9e:	9b04      	ldr	r3, [sp, #16]
 8007fa0:	3701      	adds	r7, #1
 8007fa2:	4303      	orrs	r3, r0
 8007fa4:	9304      	str	r3, [sp, #16]
 8007fa6:	7839      	ldrb	r1, [r7, #0]
 8007fa8:	2206      	movs	r2, #6
 8007faa:	4827      	ldr	r0, [pc, #156]	; (8008048 <_svfiprintf_r+0x1e4>)
 8007fac:	1c7e      	adds	r6, r7, #1
 8007fae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fb2:	f000 f9d7 	bl	8008364 <memchr>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d038      	beq.n	800802c <_svfiprintf_r+0x1c8>
 8007fba:	4b24      	ldr	r3, [pc, #144]	; (800804c <_svfiprintf_r+0x1e8>)
 8007fbc:	bb13      	cbnz	r3, 8008004 <_svfiprintf_r+0x1a0>
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	3307      	adds	r3, #7
 8007fc2:	f023 0307 	bic.w	r3, r3, #7
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	9303      	str	r3, [sp, #12]
 8007fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fcc:	444b      	add	r3, r9
 8007fce:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd0:	e76d      	b.n	8007eae <_svfiprintf_r+0x4a>
 8007fd2:	fb05 3202 	mla	r2, r5, r2, r3
 8007fd6:	2001      	movs	r0, #1
 8007fd8:	460f      	mov	r7, r1
 8007fda:	e7a6      	b.n	8007f2a <_svfiprintf_r+0xc6>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	250a      	movs	r5, #10
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	3701      	adds	r7, #1
 8007fe4:	9305      	str	r3, [sp, #20]
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fec:	3a30      	subs	r2, #48	; 0x30
 8007fee:	2a09      	cmp	r2, #9
 8007ff0:	d903      	bls.n	8007ffa <_svfiprintf_r+0x196>
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0c8      	beq.n	8007f88 <_svfiprintf_r+0x124>
 8007ff6:	9105      	str	r1, [sp, #20]
 8007ff8:	e7c6      	b.n	8007f88 <_svfiprintf_r+0x124>
 8007ffa:	fb05 2101 	mla	r1, r5, r1, r2
 8007ffe:	2301      	movs	r3, #1
 8008000:	4607      	mov	r7, r0
 8008002:	e7f0      	b.n	8007fe6 <_svfiprintf_r+0x182>
 8008004:	ab03      	add	r3, sp, #12
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	4622      	mov	r2, r4
 800800a:	4b11      	ldr	r3, [pc, #68]	; (8008050 <_svfiprintf_r+0x1ec>)
 800800c:	a904      	add	r1, sp, #16
 800800e:	4640      	mov	r0, r8
 8008010:	f3af 8000 	nop.w
 8008014:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008018:	4681      	mov	r9, r0
 800801a:	d1d6      	bne.n	8007fca <_svfiprintf_r+0x166>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	065b      	lsls	r3, r3, #25
 8008020:	f53f af35 	bmi.w	8007e8e <_svfiprintf_r+0x2a>
 8008024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008026:	b01d      	add	sp, #116	; 0x74
 8008028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802c:	ab03      	add	r3, sp, #12
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	4622      	mov	r2, r4
 8008032:	4b07      	ldr	r3, [pc, #28]	; (8008050 <_svfiprintf_r+0x1ec>)
 8008034:	a904      	add	r1, sp, #16
 8008036:	4640      	mov	r0, r8
 8008038:	f000 f882 	bl	8008140 <_printf_i>
 800803c:	e7ea      	b.n	8008014 <_svfiprintf_r+0x1b0>
 800803e:	bf00      	nop
 8008040:	080089ac 	.word	0x080089ac
 8008044:	080089b2 	.word	0x080089b2
 8008048:	080089b6 	.word	0x080089b6
 800804c:	00000000 	.word	0x00000000
 8008050:	08007db1 	.word	0x08007db1

08008054 <_printf_common>:
 8008054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008058:	4691      	mov	r9, r2
 800805a:	461f      	mov	r7, r3
 800805c:	688a      	ldr	r2, [r1, #8]
 800805e:	690b      	ldr	r3, [r1, #16]
 8008060:	4606      	mov	r6, r0
 8008062:	4293      	cmp	r3, r2
 8008064:	bfb8      	it	lt
 8008066:	4613      	movlt	r3, r2
 8008068:	f8c9 3000 	str.w	r3, [r9]
 800806c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008070:	460c      	mov	r4, r1
 8008072:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008076:	b112      	cbz	r2, 800807e <_printf_common+0x2a>
 8008078:	3301      	adds	r3, #1
 800807a:	f8c9 3000 	str.w	r3, [r9]
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	0699      	lsls	r1, r3, #26
 8008082:	bf42      	ittt	mi
 8008084:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008088:	3302      	addmi	r3, #2
 800808a:	f8c9 3000 	strmi.w	r3, [r9]
 800808e:	6825      	ldr	r5, [r4, #0]
 8008090:	f015 0506 	ands.w	r5, r5, #6
 8008094:	d107      	bne.n	80080a6 <_printf_common+0x52>
 8008096:	f104 0a19 	add.w	sl, r4, #25
 800809a:	68e3      	ldr	r3, [r4, #12]
 800809c:	f8d9 2000 	ldr.w	r2, [r9]
 80080a0:	1a9b      	subs	r3, r3, r2
 80080a2:	42ab      	cmp	r3, r5
 80080a4:	dc29      	bgt.n	80080fa <_printf_common+0xa6>
 80080a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80080aa:	6822      	ldr	r2, [r4, #0]
 80080ac:	3300      	adds	r3, #0
 80080ae:	bf18      	it	ne
 80080b0:	2301      	movne	r3, #1
 80080b2:	0692      	lsls	r2, r2, #26
 80080b4:	d42e      	bmi.n	8008114 <_printf_common+0xc0>
 80080b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080ba:	4639      	mov	r1, r7
 80080bc:	4630      	mov	r0, r6
 80080be:	47c0      	blx	r8
 80080c0:	3001      	adds	r0, #1
 80080c2:	d021      	beq.n	8008108 <_printf_common+0xb4>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	68e5      	ldr	r5, [r4, #12]
 80080c8:	f003 0306 	and.w	r3, r3, #6
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	bf18      	it	ne
 80080d0:	2500      	movne	r5, #0
 80080d2:	f8d9 2000 	ldr.w	r2, [r9]
 80080d6:	f04f 0900 	mov.w	r9, #0
 80080da:	bf08      	it	eq
 80080dc:	1aad      	subeq	r5, r5, r2
 80080de:	68a3      	ldr	r3, [r4, #8]
 80080e0:	6922      	ldr	r2, [r4, #16]
 80080e2:	bf08      	it	eq
 80080e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080e8:	4293      	cmp	r3, r2
 80080ea:	bfc4      	itt	gt
 80080ec:	1a9b      	subgt	r3, r3, r2
 80080ee:	18ed      	addgt	r5, r5, r3
 80080f0:	341a      	adds	r4, #26
 80080f2:	454d      	cmp	r5, r9
 80080f4:	d11a      	bne.n	800812c <_printf_common+0xd8>
 80080f6:	2000      	movs	r0, #0
 80080f8:	e008      	b.n	800810c <_printf_common+0xb8>
 80080fa:	2301      	movs	r3, #1
 80080fc:	4652      	mov	r2, sl
 80080fe:	4639      	mov	r1, r7
 8008100:	4630      	mov	r0, r6
 8008102:	47c0      	blx	r8
 8008104:	3001      	adds	r0, #1
 8008106:	d103      	bne.n	8008110 <_printf_common+0xbc>
 8008108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800810c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008110:	3501      	adds	r5, #1
 8008112:	e7c2      	b.n	800809a <_printf_common+0x46>
 8008114:	2030      	movs	r0, #48	; 0x30
 8008116:	18e1      	adds	r1, r4, r3
 8008118:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008122:	4422      	add	r2, r4
 8008124:	3302      	adds	r3, #2
 8008126:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800812a:	e7c4      	b.n	80080b6 <_printf_common+0x62>
 800812c:	2301      	movs	r3, #1
 800812e:	4622      	mov	r2, r4
 8008130:	4639      	mov	r1, r7
 8008132:	4630      	mov	r0, r6
 8008134:	47c0      	blx	r8
 8008136:	3001      	adds	r0, #1
 8008138:	d0e6      	beq.n	8008108 <_printf_common+0xb4>
 800813a:	f109 0901 	add.w	r9, r9, #1
 800813e:	e7d8      	b.n	80080f2 <_printf_common+0x9e>

08008140 <_printf_i>:
 8008140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008144:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008148:	460c      	mov	r4, r1
 800814a:	7e09      	ldrb	r1, [r1, #24]
 800814c:	b085      	sub	sp, #20
 800814e:	296e      	cmp	r1, #110	; 0x6e
 8008150:	4617      	mov	r7, r2
 8008152:	4606      	mov	r6, r0
 8008154:	4698      	mov	r8, r3
 8008156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008158:	f000 80b3 	beq.w	80082c2 <_printf_i+0x182>
 800815c:	d822      	bhi.n	80081a4 <_printf_i+0x64>
 800815e:	2963      	cmp	r1, #99	; 0x63
 8008160:	d036      	beq.n	80081d0 <_printf_i+0x90>
 8008162:	d80a      	bhi.n	800817a <_printf_i+0x3a>
 8008164:	2900      	cmp	r1, #0
 8008166:	f000 80b9 	beq.w	80082dc <_printf_i+0x19c>
 800816a:	2958      	cmp	r1, #88	; 0x58
 800816c:	f000 8083 	beq.w	8008276 <_printf_i+0x136>
 8008170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008174:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008178:	e032      	b.n	80081e0 <_printf_i+0xa0>
 800817a:	2964      	cmp	r1, #100	; 0x64
 800817c:	d001      	beq.n	8008182 <_printf_i+0x42>
 800817e:	2969      	cmp	r1, #105	; 0x69
 8008180:	d1f6      	bne.n	8008170 <_printf_i+0x30>
 8008182:	6820      	ldr	r0, [r4, #0]
 8008184:	6813      	ldr	r3, [r2, #0]
 8008186:	0605      	lsls	r5, r0, #24
 8008188:	f103 0104 	add.w	r1, r3, #4
 800818c:	d52a      	bpl.n	80081e4 <_printf_i+0xa4>
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6011      	str	r1, [r2, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	da03      	bge.n	800819e <_printf_i+0x5e>
 8008196:	222d      	movs	r2, #45	; 0x2d
 8008198:	425b      	negs	r3, r3
 800819a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800819e:	486f      	ldr	r0, [pc, #444]	; (800835c <_printf_i+0x21c>)
 80081a0:	220a      	movs	r2, #10
 80081a2:	e039      	b.n	8008218 <_printf_i+0xd8>
 80081a4:	2973      	cmp	r1, #115	; 0x73
 80081a6:	f000 809d 	beq.w	80082e4 <_printf_i+0x1a4>
 80081aa:	d808      	bhi.n	80081be <_printf_i+0x7e>
 80081ac:	296f      	cmp	r1, #111	; 0x6f
 80081ae:	d020      	beq.n	80081f2 <_printf_i+0xb2>
 80081b0:	2970      	cmp	r1, #112	; 0x70
 80081b2:	d1dd      	bne.n	8008170 <_printf_i+0x30>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	f043 0320 	orr.w	r3, r3, #32
 80081ba:	6023      	str	r3, [r4, #0]
 80081bc:	e003      	b.n	80081c6 <_printf_i+0x86>
 80081be:	2975      	cmp	r1, #117	; 0x75
 80081c0:	d017      	beq.n	80081f2 <_printf_i+0xb2>
 80081c2:	2978      	cmp	r1, #120	; 0x78
 80081c4:	d1d4      	bne.n	8008170 <_printf_i+0x30>
 80081c6:	2378      	movs	r3, #120	; 0x78
 80081c8:	4865      	ldr	r0, [pc, #404]	; (8008360 <_printf_i+0x220>)
 80081ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081ce:	e055      	b.n	800827c <_printf_i+0x13c>
 80081d0:	6813      	ldr	r3, [r2, #0]
 80081d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081d6:	1d19      	adds	r1, r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6011      	str	r1, [r2, #0]
 80081dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081e0:	2301      	movs	r3, #1
 80081e2:	e08c      	b.n	80082fe <_printf_i+0x1be>
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081ea:	6011      	str	r1, [r2, #0]
 80081ec:	bf18      	it	ne
 80081ee:	b21b      	sxthne	r3, r3
 80081f0:	e7cf      	b.n	8008192 <_printf_i+0x52>
 80081f2:	6813      	ldr	r3, [r2, #0]
 80081f4:	6825      	ldr	r5, [r4, #0]
 80081f6:	1d18      	adds	r0, r3, #4
 80081f8:	6010      	str	r0, [r2, #0]
 80081fa:	0628      	lsls	r0, r5, #24
 80081fc:	d501      	bpl.n	8008202 <_printf_i+0xc2>
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	e002      	b.n	8008208 <_printf_i+0xc8>
 8008202:	0668      	lsls	r0, r5, #25
 8008204:	d5fb      	bpl.n	80081fe <_printf_i+0xbe>
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	296f      	cmp	r1, #111	; 0x6f
 800820a:	bf14      	ite	ne
 800820c:	220a      	movne	r2, #10
 800820e:	2208      	moveq	r2, #8
 8008210:	4852      	ldr	r0, [pc, #328]	; (800835c <_printf_i+0x21c>)
 8008212:	2100      	movs	r1, #0
 8008214:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008218:	6865      	ldr	r5, [r4, #4]
 800821a:	2d00      	cmp	r5, #0
 800821c:	60a5      	str	r5, [r4, #8]
 800821e:	f2c0 8095 	blt.w	800834c <_printf_i+0x20c>
 8008222:	6821      	ldr	r1, [r4, #0]
 8008224:	f021 0104 	bic.w	r1, r1, #4
 8008228:	6021      	str	r1, [r4, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d13d      	bne.n	80082aa <_printf_i+0x16a>
 800822e:	2d00      	cmp	r5, #0
 8008230:	f040 808e 	bne.w	8008350 <_printf_i+0x210>
 8008234:	4665      	mov	r5, ip
 8008236:	2a08      	cmp	r2, #8
 8008238:	d10b      	bne.n	8008252 <_printf_i+0x112>
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	07db      	lsls	r3, r3, #31
 800823e:	d508      	bpl.n	8008252 <_printf_i+0x112>
 8008240:	6923      	ldr	r3, [r4, #16]
 8008242:	6862      	ldr	r2, [r4, #4]
 8008244:	429a      	cmp	r2, r3
 8008246:	bfde      	ittt	le
 8008248:	2330      	movle	r3, #48	; 0x30
 800824a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800824e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008252:	ebac 0305 	sub.w	r3, ip, r5
 8008256:	6123      	str	r3, [r4, #16]
 8008258:	f8cd 8000 	str.w	r8, [sp]
 800825c:	463b      	mov	r3, r7
 800825e:	aa03      	add	r2, sp, #12
 8008260:	4621      	mov	r1, r4
 8008262:	4630      	mov	r0, r6
 8008264:	f7ff fef6 	bl	8008054 <_printf_common>
 8008268:	3001      	adds	r0, #1
 800826a:	d14d      	bne.n	8008308 <_printf_i+0x1c8>
 800826c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008270:	b005      	add	sp, #20
 8008272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008276:	4839      	ldr	r0, [pc, #228]	; (800835c <_printf_i+0x21c>)
 8008278:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800827c:	6813      	ldr	r3, [r2, #0]
 800827e:	6821      	ldr	r1, [r4, #0]
 8008280:	1d1d      	adds	r5, r3, #4
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6015      	str	r5, [r2, #0]
 8008286:	060a      	lsls	r2, r1, #24
 8008288:	d50b      	bpl.n	80082a2 <_printf_i+0x162>
 800828a:	07ca      	lsls	r2, r1, #31
 800828c:	bf44      	itt	mi
 800828e:	f041 0120 	orrmi.w	r1, r1, #32
 8008292:	6021      	strmi	r1, [r4, #0]
 8008294:	b91b      	cbnz	r3, 800829e <_printf_i+0x15e>
 8008296:	6822      	ldr	r2, [r4, #0]
 8008298:	f022 0220 	bic.w	r2, r2, #32
 800829c:	6022      	str	r2, [r4, #0]
 800829e:	2210      	movs	r2, #16
 80082a0:	e7b7      	b.n	8008212 <_printf_i+0xd2>
 80082a2:	064d      	lsls	r5, r1, #25
 80082a4:	bf48      	it	mi
 80082a6:	b29b      	uxthmi	r3, r3
 80082a8:	e7ef      	b.n	800828a <_printf_i+0x14a>
 80082aa:	4665      	mov	r5, ip
 80082ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80082b0:	fb02 3311 	mls	r3, r2, r1, r3
 80082b4:	5cc3      	ldrb	r3, [r0, r3]
 80082b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80082ba:	460b      	mov	r3, r1
 80082bc:	2900      	cmp	r1, #0
 80082be:	d1f5      	bne.n	80082ac <_printf_i+0x16c>
 80082c0:	e7b9      	b.n	8008236 <_printf_i+0xf6>
 80082c2:	6813      	ldr	r3, [r2, #0]
 80082c4:	6825      	ldr	r5, [r4, #0]
 80082c6:	1d18      	adds	r0, r3, #4
 80082c8:	6961      	ldr	r1, [r4, #20]
 80082ca:	6010      	str	r0, [r2, #0]
 80082cc:	0628      	lsls	r0, r5, #24
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	d501      	bpl.n	80082d6 <_printf_i+0x196>
 80082d2:	6019      	str	r1, [r3, #0]
 80082d4:	e002      	b.n	80082dc <_printf_i+0x19c>
 80082d6:	066a      	lsls	r2, r5, #25
 80082d8:	d5fb      	bpl.n	80082d2 <_printf_i+0x192>
 80082da:	8019      	strh	r1, [r3, #0]
 80082dc:	2300      	movs	r3, #0
 80082de:	4665      	mov	r5, ip
 80082e0:	6123      	str	r3, [r4, #16]
 80082e2:	e7b9      	b.n	8008258 <_printf_i+0x118>
 80082e4:	6813      	ldr	r3, [r2, #0]
 80082e6:	1d19      	adds	r1, r3, #4
 80082e8:	6011      	str	r1, [r2, #0]
 80082ea:	681d      	ldr	r5, [r3, #0]
 80082ec:	6862      	ldr	r2, [r4, #4]
 80082ee:	2100      	movs	r1, #0
 80082f0:	4628      	mov	r0, r5
 80082f2:	f000 f837 	bl	8008364 <memchr>
 80082f6:	b108      	cbz	r0, 80082fc <_printf_i+0x1bc>
 80082f8:	1b40      	subs	r0, r0, r5
 80082fa:	6060      	str	r0, [r4, #4]
 80082fc:	6863      	ldr	r3, [r4, #4]
 80082fe:	6123      	str	r3, [r4, #16]
 8008300:	2300      	movs	r3, #0
 8008302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008306:	e7a7      	b.n	8008258 <_printf_i+0x118>
 8008308:	6923      	ldr	r3, [r4, #16]
 800830a:	462a      	mov	r2, r5
 800830c:	4639      	mov	r1, r7
 800830e:	4630      	mov	r0, r6
 8008310:	47c0      	blx	r8
 8008312:	3001      	adds	r0, #1
 8008314:	d0aa      	beq.n	800826c <_printf_i+0x12c>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	079b      	lsls	r3, r3, #30
 800831a:	d413      	bmi.n	8008344 <_printf_i+0x204>
 800831c:	68e0      	ldr	r0, [r4, #12]
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	4298      	cmp	r0, r3
 8008322:	bfb8      	it	lt
 8008324:	4618      	movlt	r0, r3
 8008326:	e7a3      	b.n	8008270 <_printf_i+0x130>
 8008328:	2301      	movs	r3, #1
 800832a:	464a      	mov	r2, r9
 800832c:	4639      	mov	r1, r7
 800832e:	4630      	mov	r0, r6
 8008330:	47c0      	blx	r8
 8008332:	3001      	adds	r0, #1
 8008334:	d09a      	beq.n	800826c <_printf_i+0x12c>
 8008336:	3501      	adds	r5, #1
 8008338:	68e3      	ldr	r3, [r4, #12]
 800833a:	9a03      	ldr	r2, [sp, #12]
 800833c:	1a9b      	subs	r3, r3, r2
 800833e:	42ab      	cmp	r3, r5
 8008340:	dcf2      	bgt.n	8008328 <_printf_i+0x1e8>
 8008342:	e7eb      	b.n	800831c <_printf_i+0x1dc>
 8008344:	2500      	movs	r5, #0
 8008346:	f104 0919 	add.w	r9, r4, #25
 800834a:	e7f5      	b.n	8008338 <_printf_i+0x1f8>
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1ac      	bne.n	80082aa <_printf_i+0x16a>
 8008350:	7803      	ldrb	r3, [r0, #0]
 8008352:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008356:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800835a:	e76c      	b.n	8008236 <_printf_i+0xf6>
 800835c:	080089bd 	.word	0x080089bd
 8008360:	080089ce 	.word	0x080089ce

08008364 <memchr>:
 8008364:	b510      	push	{r4, lr}
 8008366:	b2c9      	uxtb	r1, r1
 8008368:	4402      	add	r2, r0
 800836a:	4290      	cmp	r0, r2
 800836c:	4603      	mov	r3, r0
 800836e:	d101      	bne.n	8008374 <memchr+0x10>
 8008370:	2300      	movs	r3, #0
 8008372:	e003      	b.n	800837c <memchr+0x18>
 8008374:	781c      	ldrb	r4, [r3, #0]
 8008376:	3001      	adds	r0, #1
 8008378:	428c      	cmp	r4, r1
 800837a:	d1f6      	bne.n	800836a <memchr+0x6>
 800837c:	4618      	mov	r0, r3
 800837e:	bd10      	pop	{r4, pc}

08008380 <memcpy>:
 8008380:	b510      	push	{r4, lr}
 8008382:	1e43      	subs	r3, r0, #1
 8008384:	440a      	add	r2, r1
 8008386:	4291      	cmp	r1, r2
 8008388:	d100      	bne.n	800838c <memcpy+0xc>
 800838a:	bd10      	pop	{r4, pc}
 800838c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008390:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008394:	e7f7      	b.n	8008386 <memcpy+0x6>

08008396 <memmove>:
 8008396:	4288      	cmp	r0, r1
 8008398:	b510      	push	{r4, lr}
 800839a:	eb01 0302 	add.w	r3, r1, r2
 800839e:	d807      	bhi.n	80083b0 <memmove+0x1a>
 80083a0:	1e42      	subs	r2, r0, #1
 80083a2:	4299      	cmp	r1, r3
 80083a4:	d00a      	beq.n	80083bc <memmove+0x26>
 80083a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80083ae:	e7f8      	b.n	80083a2 <memmove+0xc>
 80083b0:	4283      	cmp	r3, r0
 80083b2:	d9f5      	bls.n	80083a0 <memmove+0xa>
 80083b4:	1881      	adds	r1, r0, r2
 80083b6:	1ad2      	subs	r2, r2, r3
 80083b8:	42d3      	cmn	r3, r2
 80083ba:	d100      	bne.n	80083be <memmove+0x28>
 80083bc:	bd10      	pop	{r4, pc}
 80083be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80083c6:	e7f7      	b.n	80083b8 <memmove+0x22>

080083c8 <_free_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4605      	mov	r5, r0
 80083cc:	2900      	cmp	r1, #0
 80083ce:	d043      	beq.n	8008458 <_free_r+0x90>
 80083d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083d4:	1f0c      	subs	r4, r1, #4
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	bfb8      	it	lt
 80083da:	18e4      	addlt	r4, r4, r3
 80083dc:	f000 f8d0 	bl	8008580 <__malloc_lock>
 80083e0:	4a1e      	ldr	r2, [pc, #120]	; (800845c <_free_r+0x94>)
 80083e2:	6813      	ldr	r3, [r2, #0]
 80083e4:	4610      	mov	r0, r2
 80083e6:	b933      	cbnz	r3, 80083f6 <_free_r+0x2e>
 80083e8:	6063      	str	r3, [r4, #4]
 80083ea:	6014      	str	r4, [r2, #0]
 80083ec:	4628      	mov	r0, r5
 80083ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083f2:	f000 b8c6 	b.w	8008582 <__malloc_unlock>
 80083f6:	42a3      	cmp	r3, r4
 80083f8:	d90b      	bls.n	8008412 <_free_r+0x4a>
 80083fa:	6821      	ldr	r1, [r4, #0]
 80083fc:	1862      	adds	r2, r4, r1
 80083fe:	4293      	cmp	r3, r2
 8008400:	bf01      	itttt	eq
 8008402:	681a      	ldreq	r2, [r3, #0]
 8008404:	685b      	ldreq	r3, [r3, #4]
 8008406:	1852      	addeq	r2, r2, r1
 8008408:	6022      	streq	r2, [r4, #0]
 800840a:	6063      	str	r3, [r4, #4]
 800840c:	6004      	str	r4, [r0, #0]
 800840e:	e7ed      	b.n	80083ec <_free_r+0x24>
 8008410:	4613      	mov	r3, r2
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	b10a      	cbz	r2, 800841a <_free_r+0x52>
 8008416:	42a2      	cmp	r2, r4
 8008418:	d9fa      	bls.n	8008410 <_free_r+0x48>
 800841a:	6819      	ldr	r1, [r3, #0]
 800841c:	1858      	adds	r0, r3, r1
 800841e:	42a0      	cmp	r0, r4
 8008420:	d10b      	bne.n	800843a <_free_r+0x72>
 8008422:	6820      	ldr	r0, [r4, #0]
 8008424:	4401      	add	r1, r0
 8008426:	1858      	adds	r0, r3, r1
 8008428:	4282      	cmp	r2, r0
 800842a:	6019      	str	r1, [r3, #0]
 800842c:	d1de      	bne.n	80083ec <_free_r+0x24>
 800842e:	6810      	ldr	r0, [r2, #0]
 8008430:	6852      	ldr	r2, [r2, #4]
 8008432:	4401      	add	r1, r0
 8008434:	6019      	str	r1, [r3, #0]
 8008436:	605a      	str	r2, [r3, #4]
 8008438:	e7d8      	b.n	80083ec <_free_r+0x24>
 800843a:	d902      	bls.n	8008442 <_free_r+0x7a>
 800843c:	230c      	movs	r3, #12
 800843e:	602b      	str	r3, [r5, #0]
 8008440:	e7d4      	b.n	80083ec <_free_r+0x24>
 8008442:	6820      	ldr	r0, [r4, #0]
 8008444:	1821      	adds	r1, r4, r0
 8008446:	428a      	cmp	r2, r1
 8008448:	bf01      	itttt	eq
 800844a:	6811      	ldreq	r1, [r2, #0]
 800844c:	6852      	ldreq	r2, [r2, #4]
 800844e:	1809      	addeq	r1, r1, r0
 8008450:	6021      	streq	r1, [r4, #0]
 8008452:	6062      	str	r2, [r4, #4]
 8008454:	605c      	str	r4, [r3, #4]
 8008456:	e7c9      	b.n	80083ec <_free_r+0x24>
 8008458:	bd38      	pop	{r3, r4, r5, pc}
 800845a:	bf00      	nop
 800845c:	20000434 	.word	0x20000434

08008460 <_malloc_r>:
 8008460:	b570      	push	{r4, r5, r6, lr}
 8008462:	1ccd      	adds	r5, r1, #3
 8008464:	f025 0503 	bic.w	r5, r5, #3
 8008468:	3508      	adds	r5, #8
 800846a:	2d0c      	cmp	r5, #12
 800846c:	bf38      	it	cc
 800846e:	250c      	movcc	r5, #12
 8008470:	2d00      	cmp	r5, #0
 8008472:	4606      	mov	r6, r0
 8008474:	db01      	blt.n	800847a <_malloc_r+0x1a>
 8008476:	42a9      	cmp	r1, r5
 8008478:	d903      	bls.n	8008482 <_malloc_r+0x22>
 800847a:	230c      	movs	r3, #12
 800847c:	6033      	str	r3, [r6, #0]
 800847e:	2000      	movs	r0, #0
 8008480:	bd70      	pop	{r4, r5, r6, pc}
 8008482:	f000 f87d 	bl	8008580 <__malloc_lock>
 8008486:	4a21      	ldr	r2, [pc, #132]	; (800850c <_malloc_r+0xac>)
 8008488:	6814      	ldr	r4, [r2, #0]
 800848a:	4621      	mov	r1, r4
 800848c:	b991      	cbnz	r1, 80084b4 <_malloc_r+0x54>
 800848e:	4c20      	ldr	r4, [pc, #128]	; (8008510 <_malloc_r+0xb0>)
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	b91b      	cbnz	r3, 800849c <_malloc_r+0x3c>
 8008494:	4630      	mov	r0, r6
 8008496:	f000 f863 	bl	8008560 <_sbrk_r>
 800849a:	6020      	str	r0, [r4, #0]
 800849c:	4629      	mov	r1, r5
 800849e:	4630      	mov	r0, r6
 80084a0:	f000 f85e 	bl	8008560 <_sbrk_r>
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	d124      	bne.n	80084f2 <_malloc_r+0x92>
 80084a8:	230c      	movs	r3, #12
 80084aa:	4630      	mov	r0, r6
 80084ac:	6033      	str	r3, [r6, #0]
 80084ae:	f000 f868 	bl	8008582 <__malloc_unlock>
 80084b2:	e7e4      	b.n	800847e <_malloc_r+0x1e>
 80084b4:	680b      	ldr	r3, [r1, #0]
 80084b6:	1b5b      	subs	r3, r3, r5
 80084b8:	d418      	bmi.n	80084ec <_malloc_r+0x8c>
 80084ba:	2b0b      	cmp	r3, #11
 80084bc:	d90f      	bls.n	80084de <_malloc_r+0x7e>
 80084be:	600b      	str	r3, [r1, #0]
 80084c0:	18cc      	adds	r4, r1, r3
 80084c2:	50cd      	str	r5, [r1, r3]
 80084c4:	4630      	mov	r0, r6
 80084c6:	f000 f85c 	bl	8008582 <__malloc_unlock>
 80084ca:	f104 000b 	add.w	r0, r4, #11
 80084ce:	1d23      	adds	r3, r4, #4
 80084d0:	f020 0007 	bic.w	r0, r0, #7
 80084d4:	1ac3      	subs	r3, r0, r3
 80084d6:	d0d3      	beq.n	8008480 <_malloc_r+0x20>
 80084d8:	425a      	negs	r2, r3
 80084da:	50e2      	str	r2, [r4, r3]
 80084dc:	e7d0      	b.n	8008480 <_malloc_r+0x20>
 80084de:	684b      	ldr	r3, [r1, #4]
 80084e0:	428c      	cmp	r4, r1
 80084e2:	bf16      	itet	ne
 80084e4:	6063      	strne	r3, [r4, #4]
 80084e6:	6013      	streq	r3, [r2, #0]
 80084e8:	460c      	movne	r4, r1
 80084ea:	e7eb      	b.n	80084c4 <_malloc_r+0x64>
 80084ec:	460c      	mov	r4, r1
 80084ee:	6849      	ldr	r1, [r1, #4]
 80084f0:	e7cc      	b.n	800848c <_malloc_r+0x2c>
 80084f2:	1cc4      	adds	r4, r0, #3
 80084f4:	f024 0403 	bic.w	r4, r4, #3
 80084f8:	42a0      	cmp	r0, r4
 80084fa:	d005      	beq.n	8008508 <_malloc_r+0xa8>
 80084fc:	1a21      	subs	r1, r4, r0
 80084fe:	4630      	mov	r0, r6
 8008500:	f000 f82e 	bl	8008560 <_sbrk_r>
 8008504:	3001      	adds	r0, #1
 8008506:	d0cf      	beq.n	80084a8 <_malloc_r+0x48>
 8008508:	6025      	str	r5, [r4, #0]
 800850a:	e7db      	b.n	80084c4 <_malloc_r+0x64>
 800850c:	20000434 	.word	0x20000434
 8008510:	20000438 	.word	0x20000438

08008514 <_realloc_r>:
 8008514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008516:	4607      	mov	r7, r0
 8008518:	4614      	mov	r4, r2
 800851a:	460e      	mov	r6, r1
 800851c:	b921      	cbnz	r1, 8008528 <_realloc_r+0x14>
 800851e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008522:	4611      	mov	r1, r2
 8008524:	f7ff bf9c 	b.w	8008460 <_malloc_r>
 8008528:	b922      	cbnz	r2, 8008534 <_realloc_r+0x20>
 800852a:	f7ff ff4d 	bl	80083c8 <_free_r>
 800852e:	4625      	mov	r5, r4
 8008530:	4628      	mov	r0, r5
 8008532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008534:	f000 f826 	bl	8008584 <_malloc_usable_size_r>
 8008538:	42a0      	cmp	r0, r4
 800853a:	d20f      	bcs.n	800855c <_realloc_r+0x48>
 800853c:	4621      	mov	r1, r4
 800853e:	4638      	mov	r0, r7
 8008540:	f7ff ff8e 	bl	8008460 <_malloc_r>
 8008544:	4605      	mov	r5, r0
 8008546:	2800      	cmp	r0, #0
 8008548:	d0f2      	beq.n	8008530 <_realloc_r+0x1c>
 800854a:	4631      	mov	r1, r6
 800854c:	4622      	mov	r2, r4
 800854e:	f7ff ff17 	bl	8008380 <memcpy>
 8008552:	4631      	mov	r1, r6
 8008554:	4638      	mov	r0, r7
 8008556:	f7ff ff37 	bl	80083c8 <_free_r>
 800855a:	e7e9      	b.n	8008530 <_realloc_r+0x1c>
 800855c:	4635      	mov	r5, r6
 800855e:	e7e7      	b.n	8008530 <_realloc_r+0x1c>

08008560 <_sbrk_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	2300      	movs	r3, #0
 8008564:	4c05      	ldr	r4, [pc, #20]	; (800857c <_sbrk_r+0x1c>)
 8008566:	4605      	mov	r5, r0
 8008568:	4608      	mov	r0, r1
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	f7f9 fbf4 	bl	8001d58 <_sbrk>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	d102      	bne.n	800857a <_sbrk_r+0x1a>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	b103      	cbz	r3, 800857a <_sbrk_r+0x1a>
 8008578:	602b      	str	r3, [r5, #0]
 800857a:	bd38      	pop	{r3, r4, r5, pc}
 800857c:	200013b8 	.word	0x200013b8

08008580 <__malloc_lock>:
 8008580:	4770      	bx	lr

08008582 <__malloc_unlock>:
 8008582:	4770      	bx	lr

08008584 <_malloc_usable_size_r>:
 8008584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008588:	1f18      	subs	r0, r3, #4
 800858a:	2b00      	cmp	r3, #0
 800858c:	bfbc      	itt	lt
 800858e:	580b      	ldrlt	r3, [r1, r0]
 8008590:	18c0      	addlt	r0, r0, r3
 8008592:	4770      	bx	lr

08008594 <atanf>:
 8008594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008598:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800859c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 80085a0:	4604      	mov	r4, r0
 80085a2:	4607      	mov	r7, r0
 80085a4:	db0e      	blt.n	80085c4 <atanf+0x30>
 80085a6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80085aa:	dd04      	ble.n	80085b6 <atanf+0x22>
 80085ac:	4601      	mov	r1, r0
 80085ae:	f7f8 fa83 	bl	8000ab8 <__addsf3>
 80085b2:	4604      	mov	r4, r0
 80085b4:	e003      	b.n	80085be <atanf+0x2a>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	f340 80cd 	ble.w	8008756 <atanf+0x1c2>
 80085bc:	4c67      	ldr	r4, [pc, #412]	; (800875c <atanf+0x1c8>)
 80085be:	4620      	mov	r0, r4
 80085c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085c4:	4b66      	ldr	r3, [pc, #408]	; (8008760 <atanf+0x1cc>)
 80085c6:	429d      	cmp	r5, r3
 80085c8:	dc0e      	bgt.n	80085e8 <atanf+0x54>
 80085ca:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80085ce:	da08      	bge.n	80085e2 <atanf+0x4e>
 80085d0:	4964      	ldr	r1, [pc, #400]	; (8008764 <atanf+0x1d0>)
 80085d2:	f7f8 fa71 	bl	8000ab8 <__addsf3>
 80085d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80085da:	f7f8 fd31 	bl	8001040 <__aeabi_fcmpgt>
 80085de:	2800      	cmp	r0, #0
 80085e0:	d1ed      	bne.n	80085be <atanf+0x2a>
 80085e2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80085e6:	e01c      	b.n	8008622 <atanf+0x8e>
 80085e8:	f000 f8e0 	bl	80087ac <fabsf>
 80085ec:	4b5e      	ldr	r3, [pc, #376]	; (8008768 <atanf+0x1d4>)
 80085ee:	4604      	mov	r4, r0
 80085f0:	429d      	cmp	r5, r3
 80085f2:	dc7c      	bgt.n	80086ee <atanf+0x15a>
 80085f4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80085f8:	429d      	cmp	r5, r3
 80085fa:	dc67      	bgt.n	80086cc <atanf+0x138>
 80085fc:	4601      	mov	r1, r0
 80085fe:	f7f8 fa5b 	bl	8000ab8 <__addsf3>
 8008602:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008606:	f7f8 fa55 	bl	8000ab4 <__aeabi_fsub>
 800860a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800860e:	4605      	mov	r5, r0
 8008610:	4620      	mov	r0, r4
 8008612:	f7f8 fa51 	bl	8000ab8 <__addsf3>
 8008616:	4601      	mov	r1, r0
 8008618:	4628      	mov	r0, r5
 800861a:	f7f8 fc09 	bl	8000e30 <__aeabi_fdiv>
 800861e:	2600      	movs	r6, #0
 8008620:	4604      	mov	r4, r0
 8008622:	4621      	mov	r1, r4
 8008624:	4620      	mov	r0, r4
 8008626:	f7f8 fb4f 	bl	8000cc8 <__aeabi_fmul>
 800862a:	4601      	mov	r1, r0
 800862c:	4680      	mov	r8, r0
 800862e:	f7f8 fb4b 	bl	8000cc8 <__aeabi_fmul>
 8008632:	4605      	mov	r5, r0
 8008634:	494d      	ldr	r1, [pc, #308]	; (800876c <atanf+0x1d8>)
 8008636:	f7f8 fb47 	bl	8000cc8 <__aeabi_fmul>
 800863a:	494d      	ldr	r1, [pc, #308]	; (8008770 <atanf+0x1dc>)
 800863c:	f7f8 fa3c 	bl	8000ab8 <__addsf3>
 8008640:	4629      	mov	r1, r5
 8008642:	f7f8 fb41 	bl	8000cc8 <__aeabi_fmul>
 8008646:	494b      	ldr	r1, [pc, #300]	; (8008774 <atanf+0x1e0>)
 8008648:	f7f8 fa36 	bl	8000ab8 <__addsf3>
 800864c:	4629      	mov	r1, r5
 800864e:	f7f8 fb3b 	bl	8000cc8 <__aeabi_fmul>
 8008652:	4949      	ldr	r1, [pc, #292]	; (8008778 <atanf+0x1e4>)
 8008654:	f7f8 fa30 	bl	8000ab8 <__addsf3>
 8008658:	4629      	mov	r1, r5
 800865a:	f7f8 fb35 	bl	8000cc8 <__aeabi_fmul>
 800865e:	4947      	ldr	r1, [pc, #284]	; (800877c <atanf+0x1e8>)
 8008660:	f7f8 fa2a 	bl	8000ab8 <__addsf3>
 8008664:	4629      	mov	r1, r5
 8008666:	f7f8 fb2f 	bl	8000cc8 <__aeabi_fmul>
 800866a:	4945      	ldr	r1, [pc, #276]	; (8008780 <atanf+0x1ec>)
 800866c:	f7f8 fa24 	bl	8000ab8 <__addsf3>
 8008670:	4641      	mov	r1, r8
 8008672:	f7f8 fb29 	bl	8000cc8 <__aeabi_fmul>
 8008676:	4943      	ldr	r1, [pc, #268]	; (8008784 <atanf+0x1f0>)
 8008678:	4680      	mov	r8, r0
 800867a:	4628      	mov	r0, r5
 800867c:	f7f8 fb24 	bl	8000cc8 <__aeabi_fmul>
 8008680:	4941      	ldr	r1, [pc, #260]	; (8008788 <atanf+0x1f4>)
 8008682:	f7f8 fa17 	bl	8000ab4 <__aeabi_fsub>
 8008686:	4629      	mov	r1, r5
 8008688:	f7f8 fb1e 	bl	8000cc8 <__aeabi_fmul>
 800868c:	493f      	ldr	r1, [pc, #252]	; (800878c <atanf+0x1f8>)
 800868e:	f7f8 fa11 	bl	8000ab4 <__aeabi_fsub>
 8008692:	4629      	mov	r1, r5
 8008694:	f7f8 fb18 	bl	8000cc8 <__aeabi_fmul>
 8008698:	493d      	ldr	r1, [pc, #244]	; (8008790 <atanf+0x1fc>)
 800869a:	f7f8 fa0b 	bl	8000ab4 <__aeabi_fsub>
 800869e:	4629      	mov	r1, r5
 80086a0:	f7f8 fb12 	bl	8000cc8 <__aeabi_fmul>
 80086a4:	493b      	ldr	r1, [pc, #236]	; (8008794 <atanf+0x200>)
 80086a6:	f7f8 fa05 	bl	8000ab4 <__aeabi_fsub>
 80086aa:	4629      	mov	r1, r5
 80086ac:	f7f8 fb0c 	bl	8000cc8 <__aeabi_fmul>
 80086b0:	4601      	mov	r1, r0
 80086b2:	4640      	mov	r0, r8
 80086b4:	f7f8 fa00 	bl	8000ab8 <__addsf3>
 80086b8:	4621      	mov	r1, r4
 80086ba:	f7f8 fb05 	bl	8000cc8 <__aeabi_fmul>
 80086be:	1c73      	adds	r3, r6, #1
 80086c0:	4601      	mov	r1, r0
 80086c2:	d133      	bne.n	800872c <atanf+0x198>
 80086c4:	4620      	mov	r0, r4
 80086c6:	f7f8 f9f5 	bl	8000ab4 <__aeabi_fsub>
 80086ca:	e772      	b.n	80085b2 <atanf+0x1e>
 80086cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80086d0:	f7f8 f9f0 	bl	8000ab4 <__aeabi_fsub>
 80086d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80086d8:	4605      	mov	r5, r0
 80086da:	4620      	mov	r0, r4
 80086dc:	f7f8 f9ec 	bl	8000ab8 <__addsf3>
 80086e0:	4601      	mov	r1, r0
 80086e2:	4628      	mov	r0, r5
 80086e4:	f7f8 fba4 	bl	8000e30 <__aeabi_fdiv>
 80086e8:	2601      	movs	r6, #1
 80086ea:	4604      	mov	r4, r0
 80086ec:	e799      	b.n	8008622 <atanf+0x8e>
 80086ee:	4b2a      	ldr	r3, [pc, #168]	; (8008798 <atanf+0x204>)
 80086f0:	429d      	cmp	r5, r3
 80086f2:	dc14      	bgt.n	800871e <atanf+0x18a>
 80086f4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80086f8:	f7f8 f9dc 	bl	8000ab4 <__aeabi_fsub>
 80086fc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008700:	4605      	mov	r5, r0
 8008702:	4620      	mov	r0, r4
 8008704:	f7f8 fae0 	bl	8000cc8 <__aeabi_fmul>
 8008708:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800870c:	f7f8 f9d4 	bl	8000ab8 <__addsf3>
 8008710:	4601      	mov	r1, r0
 8008712:	4628      	mov	r0, r5
 8008714:	f7f8 fb8c 	bl	8000e30 <__aeabi_fdiv>
 8008718:	2602      	movs	r6, #2
 800871a:	4604      	mov	r4, r0
 800871c:	e781      	b.n	8008622 <atanf+0x8e>
 800871e:	4601      	mov	r1, r0
 8008720:	481e      	ldr	r0, [pc, #120]	; (800879c <atanf+0x208>)
 8008722:	f7f8 fb85 	bl	8000e30 <__aeabi_fdiv>
 8008726:	2603      	movs	r6, #3
 8008728:	4604      	mov	r4, r0
 800872a:	e77a      	b.n	8008622 <atanf+0x8e>
 800872c:	4b1c      	ldr	r3, [pc, #112]	; (80087a0 <atanf+0x20c>)
 800872e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8008732:	f7f8 f9bf 	bl	8000ab4 <__aeabi_fsub>
 8008736:	4621      	mov	r1, r4
 8008738:	f7f8 f9bc 	bl	8000ab4 <__aeabi_fsub>
 800873c:	4b19      	ldr	r3, [pc, #100]	; (80087a4 <atanf+0x210>)
 800873e:	4601      	mov	r1, r0
 8008740:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008744:	f7f8 f9b6 	bl	8000ab4 <__aeabi_fsub>
 8008748:	2f00      	cmp	r7, #0
 800874a:	4604      	mov	r4, r0
 800874c:	f6bf af37 	bge.w	80085be <atanf+0x2a>
 8008750:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8008754:	e733      	b.n	80085be <atanf+0x2a>
 8008756:	4c14      	ldr	r4, [pc, #80]	; (80087a8 <atanf+0x214>)
 8008758:	e731      	b.n	80085be <atanf+0x2a>
 800875a:	bf00      	nop
 800875c:	3fc90fdb 	.word	0x3fc90fdb
 8008760:	3edfffff 	.word	0x3edfffff
 8008764:	7149f2ca 	.word	0x7149f2ca
 8008768:	3f97ffff 	.word	0x3f97ffff
 800876c:	3c8569d7 	.word	0x3c8569d7
 8008770:	3d4bda59 	.word	0x3d4bda59
 8008774:	3d886b35 	.word	0x3d886b35
 8008778:	3dba2e6e 	.word	0x3dba2e6e
 800877c:	3e124925 	.word	0x3e124925
 8008780:	3eaaaaab 	.word	0x3eaaaaab
 8008784:	bd15a221 	.word	0xbd15a221
 8008788:	3d6ef16b 	.word	0x3d6ef16b
 800878c:	3d9d8795 	.word	0x3d9d8795
 8008790:	3de38e38 	.word	0x3de38e38
 8008794:	3e4ccccd 	.word	0x3e4ccccd
 8008798:	401bffff 	.word	0x401bffff
 800879c:	bf800000 	.word	0xbf800000
 80087a0:	080089f0 	.word	0x080089f0
 80087a4:	080089e0 	.word	0x080089e0
 80087a8:	bfc90fdb 	.word	0xbfc90fdb

080087ac <fabsf>:
 80087ac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80087b0:	4770      	bx	lr
	...

080087b4 <sqrtf>:
 80087b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087b6:	b08b      	sub	sp, #44	; 0x2c
 80087b8:	4604      	mov	r4, r0
 80087ba:	f000 f845 	bl	8008848 <__ieee754_sqrtf>
 80087be:	4b20      	ldr	r3, [pc, #128]	; (8008840 <sqrtf+0x8c>)
 80087c0:	4606      	mov	r6, r0
 80087c2:	f993 5000 	ldrsb.w	r5, [r3]
 80087c6:	1c6b      	adds	r3, r5, #1
 80087c8:	d02a      	beq.n	8008820 <sqrtf+0x6c>
 80087ca:	4621      	mov	r1, r4
 80087cc:	4620      	mov	r0, r4
 80087ce:	f7f8 fc41 	bl	8001054 <__aeabi_fcmpun>
 80087d2:	4607      	mov	r7, r0
 80087d4:	bb20      	cbnz	r0, 8008820 <sqrtf+0x6c>
 80087d6:	2100      	movs	r1, #0
 80087d8:	4620      	mov	r0, r4
 80087da:	f7f8 fc13 	bl	8001004 <__aeabi_fcmplt>
 80087de:	b1f8      	cbz	r0, 8008820 <sqrtf+0x6c>
 80087e0:	2301      	movs	r3, #1
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	4b17      	ldr	r3, [pc, #92]	; (8008844 <sqrtf+0x90>)
 80087e6:	4620      	mov	r0, r4
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	9708      	str	r7, [sp, #32]
 80087ec:	f7f7 fe1c 	bl	8000428 <__aeabi_f2d>
 80087f0:	2200      	movs	r2, #0
 80087f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087fa:	2300      	movs	r3, #0
 80087fc:	b99d      	cbnz	r5, 8008826 <sqrtf+0x72>
 80087fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008802:	4668      	mov	r0, sp
 8008804:	f000 f873 	bl	80088ee <matherr>
 8008808:	b1a8      	cbz	r0, 8008836 <sqrtf+0x82>
 800880a:	9b08      	ldr	r3, [sp, #32]
 800880c:	b11b      	cbz	r3, 8008816 <sqrtf+0x62>
 800880e:	f7ff fa7d 	bl	8007d0c <__errno>
 8008812:	9b08      	ldr	r3, [sp, #32]
 8008814:	6003      	str	r3, [r0, #0]
 8008816:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800881a:	f7f8 f8f7 	bl	8000a0c <__aeabi_d2f>
 800881e:	4606      	mov	r6, r0
 8008820:	4630      	mov	r0, r6
 8008822:	b00b      	add	sp, #44	; 0x2c
 8008824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008826:	4610      	mov	r0, r2
 8008828:	4619      	mov	r1, r3
 800882a:	f7f7 ff7f 	bl	800072c <__aeabi_ddiv>
 800882e:	2d02      	cmp	r5, #2
 8008830:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008834:	d1e5      	bne.n	8008802 <sqrtf+0x4e>
 8008836:	f7ff fa69 	bl	8007d0c <__errno>
 800883a:	2321      	movs	r3, #33	; 0x21
 800883c:	6003      	str	r3, [r0, #0]
 800883e:	e7e4      	b.n	800880a <sqrtf+0x56>
 8008840:	200001e0 	.word	0x200001e0
 8008844:	08008a00 	.word	0x08008a00

08008848 <__ieee754_sqrtf>:
 8008848:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800884c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	4603      	mov	r3, r0
 8008854:	4604      	mov	r4, r0
 8008856:	d309      	bcc.n	800886c <__ieee754_sqrtf+0x24>
 8008858:	4601      	mov	r1, r0
 800885a:	f7f8 fa35 	bl	8000cc8 <__aeabi_fmul>
 800885e:	4601      	mov	r1, r0
 8008860:	4620      	mov	r0, r4
 8008862:	f7f8 f929 	bl	8000ab8 <__addsf3>
 8008866:	4604      	mov	r4, r0
 8008868:	4620      	mov	r0, r4
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	2a00      	cmp	r2, #0
 800886e:	d0fb      	beq.n	8008868 <__ieee754_sqrtf+0x20>
 8008870:	2800      	cmp	r0, #0
 8008872:	da06      	bge.n	8008882 <__ieee754_sqrtf+0x3a>
 8008874:	4601      	mov	r1, r0
 8008876:	f7f8 f91d 	bl	8000ab4 <__aeabi_fsub>
 800887a:	4601      	mov	r1, r0
 800887c:	f7f8 fad8 	bl	8000e30 <__aeabi_fdiv>
 8008880:	e7f1      	b.n	8008866 <__ieee754_sqrtf+0x1e>
 8008882:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008886:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800888a:	d32e      	bcc.n	80088ea <__ieee754_sqrtf+0xa2>
 800888c:	3c7f      	subs	r4, #127	; 0x7f
 800888e:	07e2      	lsls	r2, r4, #31
 8008890:	f04f 0200 	mov.w	r2, #0
 8008894:	ea4f 0164 	mov.w	r1, r4, asr #1
 8008898:	4616      	mov	r6, r2
 800889a:	f04f 0419 	mov.w	r4, #25
 800889e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80088a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80088a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80088aa:	bf48      	it	mi
 80088ac:	005b      	lslmi	r3, r3, #1
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	1835      	adds	r5, r6, r0
 80088b2:	429d      	cmp	r5, r3
 80088b4:	bfde      	ittt	le
 80088b6:	182e      	addle	r6, r5, r0
 80088b8:	1b5b      	suble	r3, r3, r5
 80088ba:	1812      	addle	r2, r2, r0
 80088bc:	3c01      	subs	r4, #1
 80088be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80088c2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80088c6:	d1f3      	bne.n	80088b0 <__ieee754_sqrtf+0x68>
 80088c8:	b113      	cbz	r3, 80088d0 <__ieee754_sqrtf+0x88>
 80088ca:	3201      	adds	r2, #1
 80088cc:	f022 0201 	bic.w	r2, r2, #1
 80088d0:	1054      	asrs	r4, r2, #1
 80088d2:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80088d6:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 80088da:	e7c5      	b.n	8008868 <__ieee754_sqrtf+0x20>
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	3201      	adds	r2, #1
 80088e0:	0219      	lsls	r1, r3, #8
 80088e2:	d5fb      	bpl.n	80088dc <__ieee754_sqrtf+0x94>
 80088e4:	3a01      	subs	r2, #1
 80088e6:	1aa4      	subs	r4, r4, r2
 80088e8:	e7d0      	b.n	800888c <__ieee754_sqrtf+0x44>
 80088ea:	2200      	movs	r2, #0
 80088ec:	e7f8      	b.n	80088e0 <__ieee754_sqrtf+0x98>

080088ee <matherr>:
 80088ee:	2000      	movs	r0, #0
 80088f0:	4770      	bx	lr
	...

080088f4 <_init>:
 80088f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f6:	bf00      	nop
 80088f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088fa:	bc08      	pop	{r3}
 80088fc:	469e      	mov	lr, r3
 80088fe:	4770      	bx	lr

08008900 <_fini>:
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008902:	bf00      	nop
 8008904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008906:	bc08      	pop	{r3}
 8008908:	469e      	mov	lr, r3
 800890a:	4770      	bx	lr
